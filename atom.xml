<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2015-12-02T17:27:04+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[P4 Add New Executable Script]]></title>
    <link href="http://isunix.github.io/blog/2015/12/02/p4-add-new-executable-script/"/>
    <updated>2015-12-02T13:38:57+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/02/p4-add-new-executable-script</id>
    <content type="html"><![CDATA[<p>This post shows how to add a script into p4 repo.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">p4 add cross-rules-freqs.pl
</span><span class="line">p4 edit -t text+x cross-rules-freqs.pl
</span><span class="line">p4 submit
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unresolved Reference Issue in PyCharm]]></title>
    <link href="http://isunix.github.io/blog/2015/11/30/unresolved-reference-issue-in-pycharm/"/>
    <updated>2015-11-30T10:24:31+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/30/unresolved-reference-issue-in-pycharm</id>
    <content type="html"><![CDATA[<p>When I was using pycharm to develop a django app, I met the issue “unresolved reference” for importing modules.</p>

<p>Here is the page which shows how to solve thie issue.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/21236824/unresolved-reference-issue-in-pycharm
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find the Common Lines in Multiple Files]]></title>
    <link href="http://isunix.github.io/blog/2015/11/23/find-the-common-lines-in-multiple-files/"/>
    <updated>2015-11-23T17:22:11+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/23/find-the-common-lines-in-multiple-files</id>
    <content type="html"><![CDATA[<p>What if I want to find the lines exist in all the given files under linux. Of course I can write a small script but I do not want to do that, cause I am sure there are commands for this kind of task.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">grep -F -x -f file1 file2 ...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can refer to the following page for more details.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://unix.stackexchange.com/questions/28158/is-there-a-tool-to-get-the-lines-in-one-file-that-are-not-in-another
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Then Uinq vs Uniq Then Sort]]></title>
    <link href="http://isunix.github.io/blog/2015/11/23/sort-then-uinq-vs-uniq-then-sort/"/>
    <updated>2015-11-23T17:19:54+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/23/sort-then-uinq-vs-uniq-then-sort</id>
    <content type="html"><![CDATA[<table>
  <tbody>
    <tr>
      <td>In linux is there any difference between “sort</td>
      <td>uniq” and “uniq</td>
      <td>sort”? If you are not sure, try it first. If you are not sure why, think about it for a while or reference this post:</td>
    </tr>
  </tbody>
</table>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/1402223/calling-uniq-and-sort-in-different-orders-in-shell
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Underscore in Python's Variable Name]]></title>
    <link href="http://isunix.github.io/blog/2015/11/23/underscore-in-pythons-variable-name/"/>
    <updated>2015-11-23T13:37:08+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/23/underscore-in-pythons-variable-name</id>
    <content type="html"><![CDATA[<p>Found a very complete article about the “underscore” in python’s usage.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://my.oschina.net/leejun2005/blog/387136
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycharm Shortcuts]]></title>
    <link href="http://isunix.github.io/blog/2015/11/20/pycharm-shortcuts/"/>
    <updated>2015-11-20T18:47:53+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/20/pycharm-shortcuts</id>
    <content type="html"><![CDATA[<p>The following are some notes on using pycharm.</p>

<p>1.shortcuts</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cmd+O           <span class="o">(</span>search class<span class="o">)</span>
</span><span class="line">cmd+shift+O     <span class="o">(</span>search file name<span class="o">)</span>
</span><span class="line">cmd+alt+O       <span class="o">(</span>go to symbol<span class="o">)</span>, <span class="k">then </span>hit cmd+y to get a preview, hit enter will jump to the code.
</span><span class="line">by ctrl+clicking a method name, you will be redirected to its definition.
</span><span class="line"><span class="k">for </span>a html file, <span class="nb">type</span> <span class="s2">&quot;!&quot;</span> <span class="k">then </span><span class="nb">type</span> <span class="s2">&quot;tab&quot;</span> key will give a basic html5 template.
</span><span class="line"><span class="k">for </span>flask project, in the .py file, <span class="nb">type</span> <span class="s1">&#39;flaskp&#39;</span> and hit <span class="s2">&quot;tab&quot;</span>, will give you the definition of post method.
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Css Files Not Function Well While Using Gunicorn]]></title>
    <link href="http://isunix.github.io/blog/2015/11/19/css-files-not-function-well-while-using-gunicorn/"/>
    <updated>2015-11-19T16:42:04+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/19/css-files-not-function-well-while-using-gunicorn</id>
    <content type="html"><![CDATA[<p>I find that my bootstap files not working well while I am using gunicorn to start the app.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gunicorn --env <span class="nv">DJANGO_SETTINGS_MODULE</span><span class="o">=</span>myapp.settings myapp_management.wsgi --timeout 300 --workers<span class="o">=</span>2 --pid gunicorn.pid -b 0:10000 --access-logfile<span class="o">=</span>log/access_charts.log --error-logfile<span class="o">=</span>log/error_charts.log --access-logformat <span class="s1">&#39;&quot;%(h)s %(l)s %(u)s %(t)s &quot;%(r)s&quot; %(s)s %(b)s &quot;%(f)s&quot; &quot;%(a)s&quot; %(D)s %(p)s&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I find a solution for this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/12800862/django-static-files-under-gunicorn
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To summarize it here, add the following contents to the urls.py file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">from django.contrib.staticfiles.urls import staticfiles_urlpatterns
</span><span class="line">
</span><span class="line">
</span><span class="line">urlpatterns +<span class="o">=</span> staticfiles_urlpatterns<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ptpython With Python3 as the Backend]]></title>
    <link href="http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend/"/>
    <updated>2015-11-19T12:32:02+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend</id>
    <content type="html"><![CDATA[<p>I want to use ptpython with python3 as the interpreter, here is how:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">pip3 install ptpython
</span><span class="line">python3 -m ptpython
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Admin: Changing the Page Header]]></title>
    <link href="http://isunix.github.io/blog/2015/11/18/django-admin-changing-the-page-header/"/>
    <updated>2015-11-18T16:58:31+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/18/django-admin-changing-the-page-header</id>
    <content type="html"><![CDATA[<p>This post shows how to change the header of the django admin page.</p>

<p>The blog for reference is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.mc706.com/tip_trick_snippets/42/django-admin-changing-the-page-header/
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild the Outlook for Mac2011]]></title>
    <link href="http://isunix.github.io/blog/2015/11/18/rebuild-the-outlook-for-mac2011/"/>
    <updated>2015-11-18T11:22:13+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/18/rebuild-the-outlook-for-mac2011</id>
    <content type="html"><![CDATA[<p>Several days ago, my outlook started to quit the moment it was started after a sudden system shutup.</p>

<p>There is a post and I followed it, it works for me now.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">source/_posts/2015-11-18-rebuild-the-outlook-for-mac2011.markdown
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources on Python Web Frameworks]]></title>
    <link href="http://isunix.github.io/blog/2015/11/05/resources-on-python-web-frameworks/"/>
    <updated>2015-11-05T15:54:37+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/05/resources-on-python-web-frameworks</id>
    <content type="html"><![CDATA[<p>This post will keep notes on the resources I met regarding python web frameworks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.fullstackpython.com/flask.html            (flask)
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Most Used Shell Commands]]></title>
    <link href="http://isunix.github.io/blog/2015/11/02/the-most-used-shell-commands/"/>
    <updated>2015-11-02T16:21:57+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/02/the-most-used-shell-commands</id>
    <content type="html"><![CDATA[<p>We can use the following shell scripts to find the 10 most used shell commands for a user.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">history</span> | awk <span class="s1">&#39;{a[$2]++} END {for(i in a) {print a[i]&quot; &quot;i}}&#39;</span>| sort -rn | head
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trap Interrupts in Shell Scripts]]></title>
    <link href="http://isunix.github.io/blog/2015/11/02/trap-interrupts-in-shell-scripts/"/>
    <updated>2015-11-02T14:45:18+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/02/trap-interrupts-in-shell-scripts</id>
    <content type="html"><![CDATA[<p>Today I met some shell scirpts like the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">trap</span> <span class="s2">&quot;rm -f $file; exit&quot;</span> INT TERM EXIT
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>More code here:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cleanup<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;Cleaning stuff up...&quot;</span>
</span><span class="line">    <span class="nb">exit</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">trap </span>cleanup INT TERM
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39; --- press ENTER to close --- &#39;</span>
</span><span class="line"><span class="nb">read </span>var
</span><span class="line">cleanup
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>change “trap cleanup INT TERM” above to “trap cleanup INT TERM EXIT” and then execute the script. Enter ‘exit’ and see what differences will happen.</p>

<p>The following are references:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://unix.stackexchange.com/questions/57940/trap-int-term-exit-really-necessary
</span><span class="line">http://kb.mit.edu/confluence/pages/viewpage.action?pageId=3907156
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Learning Wsgi]]></title>
    <link href="http://isunix.github.io/blog/2015/10/27/resources-for-learning-wsgi/"/>
    <updated>2015-10-27T16:14:52+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/27/resources-for-learning-wsgi</id>
    <content type="html"><![CDATA[<p>Here below are some resources I used to learn wsgi and tornado werkzeug.</p>

<ol>
  <li>wsgi:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">https://brodie.io/journal/why-wsgi/
</span><span class="line">http://wsgi.readthedocs.org/en/latest/what.html
</span><span class="line">https://www.python.org/dev/peps/pep-3333/
</span><span class="line">http://wsgi.readthedocs.org/en/latest/learn.html
</span><span class="line">http://wsgi.tutorial.codepoint.net/
</span><span class="line">http://linuxgazette.net/115/orr.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>werkzeug:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://werkzeug.pocoo.org/
</span><span class="line">https://github.com/mitsuhiko/werkzeug
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>websocket:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://buildnewgames.com/websockets/
</span><span class="line">http://rz.scale-it.pl/2013/01/25/tornado___the_best_web_framework.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Shell Usage]]></title>
    <link href="http://isunix.github.io/blog/2015/10/23/django-shell-usage/"/>
    <updated>2015-10-23T16:50:03+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/23/django-shell-usage</id>
    <content type="html"><![CDATA[<p>Let’s say we have an app named “people” and that in our models.py file, we have the following model:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class="line">	<span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span><span class="line">	<span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After synchronizing the db, before django 1.7, we issue:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">python manage.py syncdb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After django1.7:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">python manage.py makemigrations
</span><span class="line">python manage.py migrate
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For django’s shell, we can enter it by issuing the following command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">python manage.py shell
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt;&gt;&gt;from people.models import Person
</span><span class="line">&gt;&gt;&gt;Person.objects.create<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steven&quot;</span>, <span class="nv">age</span><span class="o">=</span><span class="s2">&quot;24&quot;</span><span class="o">)</span>
</span><span class="line">&gt;&gt;&gt;Person.objects.get<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steven&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are several ways to create an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">a.  Person.objects.create<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steven&quot;</span>, <span class="nv">age</span><span class="o">=</span>24<span class="o">)</span>
</span><span class="line">b.  <span class="nv">p</span> <span class="o">=</span> Person<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steve&quot;</span>, <span class="nv">age</span><span class="o">=</span>24<span class="o">)</span>
</span><span class="line">    p.save<span class="o">()</span>
</span><span class="line">
</span><span class="line">c.  <span class="nv">p</span> <span class="o">=</span> Person<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steven&quot;</span><span class="o">)</span>
</span><span class="line">	p.age <span class="o">=</span> 23
</span><span class="line">	p.save<span class="o">()</span>
</span><span class="line">	
</span><span class="line">d.  Person.objects.get_or_create<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;steven&quot;</span>, <span class="nv">age</span><span class="o">=</span>24<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are more ways to get an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">a.	Person.objects.all<span class="o">()</span>
</span><span class="line">b.	Person.objects.all<span class="o">()[</span>:10<span class="o">]</span> <span class="c">#切片操作，获取10个人，不支持负索引，切片可以节约内存</span>
</span><span class="line">c.	Person.objects.get<span class="o">(</span><span class="nv">name</span><span class="o">=</span>name<span class="o">)</span> <span class="c">#{get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter}</span>
</span><span class="line">d.	Person.objects.filter<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span><span class="o">)</span> <span class="c"># 等于Person.objects.filter(name__exact=&quot;abc&quot;)</span>
</span><span class="line">e.	Person.objects.filter<span class="o">(</span><span class="nv">name__iexact</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span><span class="o">)</span> <span class="c">#{不区分大小写}</span>
</span><span class="line">f.	Person.objects.filter<span class="o">(</span><span class="nv">name__contains</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span><span class="o">)</span> <span class="c"># 名称中包含 &quot;abc&quot;的人</span>
</span><span class="line">g.	Person.objects.filter<span class="o">(</span><span class="nv">name__icontains</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span><span class="o">)</span> <span class="c">#名称中包含 &quot;abc&quot;，且abc不区分大小写</span>
</span><span class="line">h.	Person.objects.filter<span class="o">(</span><span class="nv">name__regex</span><span class="o">=</span><span class="s2">&quot;^abc&quot;</span><span class="o">)</span> <span class="c"># 正则表达式查询</span>
</span><span class="line">i.	Person.objects.filter<span class="o">(</span><span class="nv">name__iregex</span><span class="o">=</span><span class="s2">&quot;^abc&quot;</span><span class="o">)</span><span class="c"># 正则表达式不区分大小写</span>
</span><span class="line">j.	Person.objects.exclude<span class="o">(</span><span class="nv">name__contains</span><span class="o">=</span><span class="s2">&quot;WZ&quot;</span><span class="o">)</span> <span class="c"># 排除包含 WZ 的Person对象</span>
</span><span class="line">k.	Person.objects.filter<span class="o">(</span><span class="nv">name__contains</span><span class="o">=</span><span class="s2">&quot;abc&quot;</span><span class="o">)</span>.exclude<span class="o">(</span><span class="nv">age</span><span class="o">=</span>23<span class="o">)</span> <span class="c"># 找出名称含有abc, 但是排除年龄是23岁的</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Decorator and @app.route in Flask]]></title>
    <link href="http://isunix.github.io/blog/2015/10/23/about-decorator-and-at-app-dot-route-in-flask/"/>
    <updated>2015-10-23T14:09:30+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/23/about-decorator-and-at-app-dot-route-in-flask</id>
    <content type="html"><![CDATA[<p>About decorator and Flask’s @app.route internal mechanism, I found a good post:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://ains.co/blog/things-which-arent-magic-flask-part-1.html
</span><span class="line">http://ains.co/blog/things-which-arent-magic-flask-part-2.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Basics About Generators in Python]]></title>
    <link href="http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python/"/>
    <updated>2015-10-19T08:46:43+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python</id>
    <content type="html"><![CDATA[<p>Here below is a reference for learning python generators:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.dabeaz.com/generators/
</span><span class="line">http://www.dabeaz.com/finalgenerator/
</span><span class="line">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A basic explanation about the “for” statement in python:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
</span><span class="line">	<span class="c">#statements</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and how it is realized:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">_iter</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class="line"><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">	<span class="k">try</span><span class="p">:</span>
</span><span class="line">		<span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line">	<span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class="line">		<span class="k">break</span>
</span><span class="line">	<span class="c">#statements</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and why the “StopIteration” in the above code? It happens in iterables:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;input&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class="line"><span class="ne">StopIteration</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now will implement a user defined object that supports iterable:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">class</span> <span class="nc">countdown</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">start</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">StopIteration</span>
</span><span class="line">        <span class="n">r</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">return</span> <span class="n">r</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">c</span> <span class="o">=</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>countdown using generator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">n</span>
</span><span class="line">        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>About how to use non-generator methods, generator methods, awk to calculate the sum of a columns of numbs.</p>

<p>The records in the log file looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="mf">156.63</span><span class="o">.</span><span class="mf">68.202</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2008</span><span class="p">:</span><span class="mo">07</span><span class="p">:</span><span class="mi">49</span><span class="p">:</span><span class="mi">28</span> <span class="o">-</span><span class="mo">0600</span><span class="p">]</span> <span class="s">&quot;GET /favicon.ico HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">133</span>
</span><span class="line"><span class="mf">80.161</span><span class="o">.</span><span class="mf">85.77</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2008</span><span class="p">:</span><span class="mo">07</span><span class="p">:</span><span class="mi">52</span><span class="p">:</span><span class="mi">46</span> <span class="o">-</span><span class="mo">0600</span><span class="p">]</span> <span class="s">&quot;GET /ply/ply.html HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="mi">97238</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First the non-generator method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">wwwlog</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;access-log&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">wwwlog</span><span class="p">:</span>
</span><span class="line">    <span class="n">bytestr</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="k">if</span> <span class="n">bytestr</span> <span class="o">!=</span> <span class="s">&#39;-&#39;</span><span class="p">:</span>
</span><span class="line">        <span class="n">total</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">bytestr</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Total&quot;</span><span class="p">,</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the generator method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">wwwlog</span>     <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;access-log&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">bytecolumn</span> <span class="o">=</span> <span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">wwwlog</span><span class="p">)</span>
</span><span class="line"><span class="nb">bytes</span>      <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">bytecolumn</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="s">&#39;-&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Total&quot;</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">bytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then the awk method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="awk"><span class="line"><span class="nx">awk</span> <span class="s1">&#39;{ total += $NF } END { print total }&#39;</span> <span class="nx">access</span><span class="o">-</span><span class="kr">log</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PS: (a very useful shell script tutorial)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.grymoire.com/Unix/Sh.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Python Resources to Be Referenced]]></title>
    <link href="http://isunix.github.io/blog/2015/10/14/some-python-resources-to-be-referenced/"/>
    <updated>2015-10-14T16:24:06+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/14/some-python-resources-to-be-referenced</id>
    <content type="html"><![CDATA[<p>This post is a collection of useful python resources.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">https://github.com/vinta/awesome-python
</span><span class="line">(a collection of use python libraries)
</span><span class="line">
</span><span class="line">http://www.fullstackpython.com/django.html
</span><span class="line">(shows resources about being a full stack python developer)
</span><span class="line">
</span><span class="line">http://www.fullstackpython.com/best-python-resources.html
</span><span class="line">(cool python resources)
</span><span class="line">
</span><span class="line">http://www.fullstackpython.com/web-frameworks.html
</span><span class="line">(about python web frameworks)
</span><span class="line">
</span><span class="line">http://twoscoopspress.org/pages/current-django-books
</span><span class="line">(current django books)
</span><span class="line">
</span><span class="line">http://python.jobbole.com
</span><span class="line">(python section in jobbole)
</span><span class="line">
</span><span class="line">https://www.djangopackages.com/
</span><span class="line">(useful django packages)
</span><span class="line">
</span><span class="line">https://github.com/rosarior/awesome-django
</span><span class="line">(we have awesome python, now we have awesome django
</span><span class="line">
</span><span class="line">https://code.djangoproject.com/wiki/DjangoResources
</span><span class="line">(django resources)
</span><span class="line">
</span><span class="line">http://elweb.co/33-projects-that-make-developing-django-apps-awesome/
</span><span class="line">(tools to help django develop)
</span><span class="line">
</span><span class="line">http://jessenoller.com/good-to-great-python-reads/
</span><span class="line">(some good resources on python knowledges)
</span><span class="line">
</span><span class="line">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855
</span><span class="line">(about the yield keyword)
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Decorator Examples]]></title>
    <link href="http://isunix.github.io/blog/2015/10/13/python-decorator-examples/"/>
    <updated>2015-10-13T16:54:03+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/13/python-decorator-examples</id>
    <content type="html"><![CDATA[<p>Maybe I will just paste the link here,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Development in Python3 Environemnt]]></title>
    <link href="http://isunix.github.io/blog/2015/10/12/django-development-in-python3-environemnt/"/>
    <updated>2015-10-12T14:55:22+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/12/django-development-in-python3-environemnt</id>
    <content type="html"><![CDATA[<p>What if I want to development a django app in python3 environement.</p>

<p>Using vitualenv</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">python3 -m venv sbenv
</span><span class="line"><span class="nb">source </span>sbenv/bin/activate
</span><span class="line">pip install -r requirements.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using virtualenvwrapper</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">which python3   --to get the location of python3 interpreter
</span><span class="line">mkvirtualenv --python<span class="o">=</span>/usr/local/bin/python3 django_dev
</span><span class="line">workon django_dev
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
