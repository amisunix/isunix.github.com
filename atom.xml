<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2016-05-26T14:59:35+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basics of Linux Screen]]></title>
    <link href="http://isunix.github.io/blog/2016/05/26/basics-of-linux-screen/"/>
    <updated>2016-05-26T14:52:24+08:00</updated>
    <id>http://isunix.github.io/blog/2016/05/26/basics-of-linux-screen</id>
    <content type="html"><![CDATA[<p>A basic of introduction of linux screen.</p>

<p>1.To create a new screen session without the name specified, just type </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">screen
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.To create a new screen session with the name specified, just type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">screen -S sessionname
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.To detach from a session, type “Ctrl-A” and “d“</p>

<p>4.To list all the sessions , type “screen -ls”</p>

<p>5.To re-attach to a session, type “screen -r sessionname”</p>

<p>6.To switch between windows, type “Ctrl-A” then then enter the window number. Or just “Ctrl-A” followed by pressing “p” or “n”.</p>

<p>7.Type “Ctrl-A” and “?” without quotes. Then you will see all commands or parameters on screen.</p>

<p>8.Type “Ctrl-A” and “:” without quotes, then enter “sessionname NAME” to rename an existing sessioin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Perl Modules Through Cpanm]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm/"/>
    <updated>2016-03-31T16:54:00+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm</id>
    <content type="html"><![CDATA[<p>I want to update all the installed Perl modules using cpanm. Here is a method I found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cpan-outdated -p | cpanm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We have to first download the module “http://search.cpan.org/CPAN/authors/id/T/TO/TOKUHIROM/App-cpanoutdated-0.24.tar.gz” and then issue the command to update the modules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">pip</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">pip</span><span class="o">.</span><span class="n">get_installed_distributions</span><span class="p">():</span>
</span><span class="line">    <span class="n">call</span><span class="p">(</span><span class="s">&quot;pip install --upgrade &quot;</span> <span class="o">+</span> <span class="n">dist</span><span class="o">.</span><span class="n">project_name</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort an Object by One Key Using Js]]></title>
    <link href="http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js/"/>
    <updated>2016-03-09T09:41:03+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js</id>
    <content type="html"><![CDATA[<p>I have something like the following,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I want to find out the one with the earliest time, in the above code, it is “2016/03/02 01:12”, and the corresponding item is “sophos”, here is the realization is js code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sophos</span><span class="p">,</span> <span class="nx">mcafee</span><span class="p">,</span> <span class="nx">trend</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">compare</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source Terminal Applications]]></title>
    <link href="http://isunix.github.io/blog/2016/02/19/open-source-terminal-applications/"/>
    <updated>2016-02-19T09:44:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/02/19/open-source-terminal-applications</id>
    <content type="html"><![CDATA[<p>Found some interesting posts about tools available on linux, will collect them here.</p>

<p>1.15 Greatest Open Source Terminal Applications Of 2012</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/open-source/best-terminal-applications-for-linux-unix-macosx/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.nixCraft (a site which has interesting posts on linux/unix):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.How to use awk in bash scripting.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/faq/bash-scripting-using-awk/
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界观祛魅]]></title>
    <link href="http://isunix.github.io/blog/2016/01/21/shi-jie-guan-qu-mei/"/>
    <updated>2016-01-21T15:00:05+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/21/shi-jie-guan-qu-mei</id>
    <content type="html"><![CDATA[<p>这是一篇同人于野的«智识分子»第一篇”世界观祛魅”的读书笔记。</p>

<ol>
  <li>模仿的雪崩效应:</li>
</ol>

<p>说的是许多人的行动， 其实是为了模仿而模仿。所以对于一些不好的事件，为了防止事情的方法，一个很好的方法是抓带头人。</p>

<p>这让我想起自己所在公司的一些事情。比如最近很多同事开始在上班的时间开始吃瓜子，其他人也开始跟着吃了，于是整个office一篇吃瓜子的声音还有瓜子的味道。</p>

<p>如果一开始就禁止这种事情，或者稍微警告下带头的人， 我想整个办公室的秩序会好很多。</p>

<p>就如作者所说， “长治久安的上策当然是创造条件让人从一开始就不会犯罪， 如果做不到这一点，那么就得维稳， 而维稳不关心有没有第一个，只关心有没有第二个”.</p>

<ol>
  <li>国家不是家庭:</li>
</ol>

<p>要求对富人持续性的加税， 乃至产生均贫富的思想， 这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是”都是一个国家的人，贫富差距这么大是否道德”, 而应该是”什么样的税收制度有利于经济增长”.</p>

<p>以上是作者的原话， 其实我的想法是，有的时候一个社会普遍施行的某些措施，并不一定就是有道理的，活着就是对国家的发展有利的， 但是有的时候就得照顾到某些特定人群的利益， 给某些特定人群以特定的关怀。</p>

<ol>
  <li>要啥有啥其实很没意思。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Lines by Length]]></title>
    <link href="http://isunix.github.io/blog/2016/01/20/sort-lines-by-length/"/>
    <updated>2016-01-20T10:14:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/20/sort-lines-by-length</id>
    <content type="html"><![CDATA[<p>I have a file containing quite many lines of strings and I want to sort them by line length. Here is how.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat <span class="nv">$file</span> | awk <span class="s1">&#39;{ print length($0) &quot; &quot; $0; }&#39;</span> | sort -r -n | cut -d <span class="s1">&#39; &#39;</span> -f 2- | less
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Wonderful Post on Stdin]]></title>
    <link href="http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin/"/>
    <updated>2016-01-05T14:30:04+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin</id>
    <content type="html"><![CDATA[<p>The following is a wonderful post on stdin, stdout, stderr.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.jstorimer.com/blogs/workingwithcode/7766119-when-to-use-stderr-instead-of-stdout
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notes:</p>

<p>1.[-n string] 将会测试string的长度，如果大于0， 则返回true</p>

<p>2.awesome os-x command line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">https://github.com/herrbischoff/awesome-osx-command-line
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wget Several Files Using Bash Cmd]]></title>
    <link href="http://isunix.github.io/blog/2015/12/31/wget-several-files-using-bash-cmd/"/>
    <updated>2015-12-31T18:36:09+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/31/wget-several-files-using-bash-cmd</id>
    <content type="html"><![CDATA[<p>I want to down the lecture notes on the page </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the command I am using.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wget http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/lecture<span class="o">{</span>1..26<span class="o">}</span>webhand.pdf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The sad thing is not all the sequences are consecutive.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scheme Mastermind Game Re-write Using Python and Perl]]></title>
    <link href="http://isunix.github.io/blog/2015/12/30/scheme-mastermind-game-re-write-using-python-and-perl/"/>
    <updated>2015-12-30T16:34:41+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/30/scheme-mastermind-game-re-write-using-python-and-perl</id>
    <content type="html"><![CDATA[<p>There is a game “mastermind” written using scheme, which can be found using the folliwng page.</p>

<p>It looks like this:</p>

<p><img src="http://isunix.github.io/images/sun/mastermind.png" />  </p>

<p>Here I will re-write the game using Perl and Python.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Awk Commands]]></title>
    <link href="http://isunix.github.io/blog/2015/12/21/useful-awk-commands/"/>
    <updated>2015-12-21T16:51:15+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/21/useful-awk-commands</id>
    <content type="html"><![CDATA[<p>The following blogs are referenced, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.catonmat.net/blog/awk-one-liners-explained-part-one/
</span><span class="line">http://www.grymoire.com/Unix/Awk.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And I will list some of the commands I think might be useful for later usage here.</p>

<p>1.Print the total number of lines containing word “Regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/Regex/ { n++ }; END { print n+0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Print every line with more than 4 fields.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NF &gt; 4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.Print every line where the value of the last field is greater than 4.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$NF &gt; 4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Convert Windows/DOS newlines (CRLF) to Unix newlines (LF) from Unix.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/\r$/,&quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Convert Unix newlines (LF) to Windows/DOS newlines (CRLF) from Unix.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/$/,&quot;\r&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.Delete leading whitespace (spaces and tabs) from the beginning of each line (ltrim).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/^[ \t]+/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.Delete trailing whitespace (spaces and tabs) from the end of each line (rtrim).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/[ \t]+$/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.Delete both leading and trailing whitespaces from each line (trim).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ gsub(/^[ \t]+|[ \t]+$/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.Insert 5 blank spaces at beginning of each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/^/, &quot;     &quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10.Center all text on a 79-character width.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ l=length(); s=int((79-l)/2); printf &quot;%&quot;(s+l)&quot;s\n&quot;, $0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>11.Substitute (find and replace) “foo” with “bar” on each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/foo/,&quot;bar&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>12.Substitute “foo” with “bar” only on lines that contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/baz/ { gsub(/foo/, &quot;bar&quot;) }; { print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>13.Substitute “foo” with “bar” only on lines that do not contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!/baz/ { gsub(/foo/, &quot;bar&quot;) }; { print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>14.Change “scarlet” or “ruby” or “puce” to “red”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ gsub(/scarlet|ruby|puce/, &quot;red&quot;); print}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>15.Reverse order of lines (emulate “tac”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ a[i++] = $0 } END { for (j=i-1; j&gt;=0;) print a[j--] }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>16.Swap first field with second on every line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ temp = $1; $1 = $2; $2 = temp; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>17.Delete the second field on each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ $2 = &quot;&quot;; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>18.Print the fields in reverse order on every line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ for (i=NF; i&gt;0; i--) printf(&quot;%s &quot;, $i); printf (&quot;\n&quot;) }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>19.Remove duplicate, consecutive lines (emulate “uniq”)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;a !~ $0; { a = $0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>20.Remove duplicate, nonconsecutive lines.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!a[$0]++&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>21.Concatenate every 5 lines of input with a comma.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;ORS=NR%5?&quot;,&quot;:&quot;\n&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>22.Print only the lines that match a regular expression “/regex/” (emulates “grep”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>23.Print only the lines that do not match a regular expression “/regex/” (emulates “grep -v”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!/regex/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>24.Print the line immediately before a line that matches “/regex/” (but not the line that matches itself).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/ { print x }; { x=$0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>25.Print the line immediately after a line that matches “/regex/” (but not the line that matches itself).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/ { getline; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>26.Print lines that match any of “AAA” or “BBB”, or “CCC”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/AAA|BBB|CCC/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>27.Print lines that contain “AAA” and “BBB”, and “CCC” in this order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/AAA.*BBB.*CCC/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>28.Print only the lines that are 65 characters in length or longer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;length &gt; 64&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>29.Print a section of file from regular expression to end of file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/,0&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>30.Print lines 8 to 12 (inclusive).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NR==8,NR==12&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>31.Print line number 52.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NR==52&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>32.Print section of a file between two regular expressions (inclusive).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/Iowa/,/Montana/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>33.Delete all blank lines from a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk NF
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This one-liner uses the special NF variable that contains number of fields on the line. For empty lines, NF is 0, that evaluates to false, and false statements do not get the line printed.</p>

<p>34.Create a string of a specific length (generate a string of x’s of length 513).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">awk <span class="s1">&#39;BEGIN { while (a++&lt;513) s=s &quot;x&quot;; print s }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>35.Insert a string of specific length at a certain character position (insert 49 x’s after 6th char).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gawk --re-interval <span class="s1">&#39;BEGIN{ while(a++&lt;49) s=s &quot;x&quot; }; { sub(/^.{6}/,&quot;&amp;&quot; s) }; 1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>36.Print all lines where 5th field is equal to “abc123”.
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$5 == &quot;abc123&quot;&#39;</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>37.Print any line where field #5 is not equal to “abc123”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$5 != &quot;abc123&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>38.Print all lines whose 7th field matches a regular expression.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$7  ~ /^[a-f]/&#39;</span>
</span><span class="line">or
</span><span class="line">cat file | awk <span class="s1">&#39;$7 !~ /^[a-f]/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun Shell Tricks]]></title>
    <link href="http://isunix.github.io/blog/2015/12/21/fun-shell-tricks/"/>
    <updated>2015-12-21T15:04:39+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/21/fun-shell-tricks</id>
    <content type="html"><![CDATA[<p>1.Print the 10 most frequent words in the input.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat * | tr -sc A-Za-z <span class="s1">&#39;\n&#39;</span> | sort | uniq -c | sort -n | tail
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sadly this is not totally correct, it will give out something like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">22 pl
</span><span class="line">38 d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which are not exactly words.</p>

<p>2.use awk with substr:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">date | awk <span class="s1">&#39;{print substr($4, 1, 5)}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed One-liners]]></title>
    <link href="http://isunix.github.io/blog/2015/12/18/sed-one-liners/"/>
    <updated>2015-12-18T14:48:18+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/18/sed-one-liners</id>
    <content type="html"><![CDATA[<p>The following is a collection of sed. They are from the following blogs.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-one/
</span><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-two/
</span><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-three/
</span><span class="line">
</span><span class="line">http://www.grymoire.com/Unix/Sed.html
</span><span class="line">http://www.catonmat.net/blog/wp-content/uploads/2008/09/sed1line.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will pick some I that I think might be useful for me and listed them here.</p>

<p>1.Insert a blank line above every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/{x;p;x;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Insert a blank line below every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/G&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.Insert a blank line above and below every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/{x;p;x;G;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Number each line of a file (named filename). Left align the number.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">sed</span> <span class="o">=</span> filename | sed <span class="s1">&#39;N;s/\n/\t/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Convert DOS/Windows newlines (CRLF) to Unix newlines (LF). (All 3 have not been tested!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/.$//&#39;</span>
</span><span class="line">cat file | sed <span class="s1">&#39;s/^M$//&#39;</span>
</span><span class="line">cat file | sed <span class="s1">&#39;s/\x0D$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.Convert Unix newlines (LF) to DOS/Windows newlines (CRLF). (All 3 have not been tested!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sed <span class="s1">&#39;s/$/\r/&#39;</span>
</span><span class="line">sed <span class="s2">&quot;s/$//&quot;</span>
</span><span class="line">sed <span class="s2">&quot;s/$/`echo -e \\\r`/&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.Delete leading whitespace (tabs and spaces) from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^[ \t]*//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.Delete trailing whitespace (tabs and spaces) from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/[ \t]*$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.Delete both leading and trailing whitespace from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^[ \t]*//;s/[ \t]*$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10.Insert five blank spaces at the beginning of each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^/     /&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>11.Substitute (find and replace) the fourth occurrence of “foo” with “bar” on each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/foo/bar/4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>12.Substitute (find and replace) the first occurrence of a repeated occurrence of “foo” with “bar”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/\(.*\)foo\(.*foo\)/\1bar\2/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>13.Substitute all occurrences of “foo” with “bar” on all lines that contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/baz/s/foo/bar/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>14.Substitute all occurrences of “foo” with “bar” on all lines that DO NOT contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/baz/!s/foo/bar/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>15.Change text “scarlet”, “ruby” or “puce” to “red”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/scarlet/red/g;s/ruby/red/g;s/puce/red/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>16.Add a blank line after every five lines.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;n;n;n;n;G;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>17.Print the first 10 lines of a file (emulates “head -10”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed 10q
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>18.Print only the lines that match a regular expression (emulates “grep”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>19.Print only the lines that do not match a regular expression (emulates “grep -v”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/!p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>20.Print the line immediately before regexp, but not the line containing the regexp.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/{g;1!p;};h&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>21.Print the line immediately after regexp, but not the line containing the regexp.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/{n;p;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>22.Print one line before and after regexp. Also print the line matching regexp and its line number. (emulates “grep -A1 -B1”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n -e <span class="s1">&#39;/regexp/{=;x;1!p;g;$!N;p;D;}&#39;</span> -e h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>23.Grep for “AAA” and “BBB” and “CCC” in any order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/AAA/!d; /BBB/!d; /CCC/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>24.Grep for “AAA” and “BBB” and “CCC” in that order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/AAA.*BBB.*CCC/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>25.Grep for “AAA” or “BBB”, or “CCC”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -e <span class="s1">&#39;/AAA/b&#39;</span> -e <span class="s1">&#39;/BBB/b&#39;</span> -e <span class="s1">&#39;/CCC/b&#39;</span> -e d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>26.Print only the lines that are 65 characters in length or more.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/^.\{65\}/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>27.Print only the lines that are less than 65 chars.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/^.\{65\}/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>28.Print section of a file from a regex to end of file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/,$p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>29.Print lines 8-12 (inclusive) of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;8,12p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>30.Print line number 52.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;52p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>31.Beginning at line 3, print every 7th line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;3,${p;n;n;n;n;n;n;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>32.Print section of lines between two regular expressions (inclusive).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/Iowa/,/Montana/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>33.Print all lines in the file except a section between two regular expressions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/Iowa/,/Montana/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>34.Delete duplicate, consecutive lines from a file (emulates “uniq”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$!N; /^\(.*\)\n\1$/!P; D&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>35.Delete all lines except duplicate consecutive lines (emulates “uniq -d”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$!N; s/^\(.*\)\n\1$/\1/; t; D&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>36.Delete the first 10 lines of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;1,10d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>37.Delete the last line of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>38.Delete the last 2 lines of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;N;$!P;$!D;$d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>39.Delete lines that match regular expression pattern.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/pattern/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>40.Delete all blank lines in a file (emulates “grep ‘.’”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/^$/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>41.Delete all consecutive blank lines from a file (emulates “cat -s”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/./,/^$/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>42.Delete all leading blank lines at the top of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/./,$!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>43.Delete all trailing blank lines at the end of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -e :a -e <span class="s1">&#39;/^\n*$/{$d;N;ba&#39;</span> -e <span class="s1">&#39;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Color Themes for Pycharm and Webstorm]]></title>
    <link href="http://isunix.github.io/blog/2015/12/17/more-color-themes-for-pycharm-and-webstorm/"/>
    <updated>2015-12-17T18:44:44+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/17/more-color-themes-for-pycharm-and-webstorm</id>
    <content type="html"><![CDATA[<p>We can follow the link below to get more color themes for pycharm and webstorm.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">https://github.com/d1ffuz0r/pycharm-themes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Basically, For macos, it is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone git://github.com/d1ffuz0r/pycharm-themes.git
</span><span class="line"><span class="nb">cd </span>pycharm-themes/colors
</span><span class="line">cp *.icls ~/Library/Preferences/PyCharm50/colors
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For linux it is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone git://github.com/d1ffuz0r/pycharm-themes.git
</span><span class="line"><span class="nb">cd </span>pycharm-themes/colors
</span><span class="line">cp *.icls ~/.PyCharm50/config/colors/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have tested this on macos and it works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Secret Operators and Constants]]></title>
    <link href="http://isunix.github.io/blog/2015/12/17/perl-secret-operators-and-constants/"/>
    <updated>2015-12-17T10:37:47+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/17/perl-secret-operators-and-constants</id>
    <content type="html"><![CDATA[<p>Several days I met some perl one-liner like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat <span class="nv">$file</span> | perl -Mautodie -MList::MoreUtils<span class="o">=</span>none -ne <span class="s1">&#39;chomp; push @re, $_ }{ open $fh, $ENV{CF}; @s = &lt;$fh&gt;; foreach $s (@s) { print $s if none { $s =~ qr/$_/ } @re };&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have no idea what the “}{“ here means, at first I thought it maybe some typo.</p>

<p>Then my colleagues showed me the following page, which lists many weird perl operators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://search.cpan.org/dist/perlsecret/lib/perlsecret.pod
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To have a look at how it is used in the backend:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>perl -MO<span class="o">=</span>Deparse -lne <span class="s1">&#39;}{print$.&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It will give the following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="o">-</span><span class="n">e</span> <span class="n">syntax</span> <span class="n">OK</span>
</span><span class="line">    <span class="k">BEGIN</span> <span class="p">{</span> <span class="vg">$/</span> <span class="o">=</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span> <span class="vg">$\</span> <span class="o">=</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="n">LINE:</span> <span class="k">while</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$_</span> <span class="o">=</span> <span class="sr">&lt;ARGV&gt;</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">chomp</span> <span class="nv">$_</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">print</span> <span class="vg">$.</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep Lines in One File and Not in the Other]]></title>
    <link href="http://isunix.github.io/blog/2015/12/14/grep-lines-in-one-file-and-not-in-the-other/"/>
    <updated>2015-12-14T14:46:10+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/14/grep-lines-in-one-file-and-not-in-the-other</id>
    <content type="html"><![CDATA[<p>Say we have a file a, which has the following contentL:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a
</span><span class="line">b
</span><span class="line">c
</span><span class="line">d
</span><span class="line">e</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and b,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">c
</span><span class="line">d</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if we want to get all those in file a and not in file b, in this case, a, b, e?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">grep -F -x -v -f b.txt a.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To qutoe from the page</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://unix.stackexchange.com/questions/28158/is-there-a-tool-to-get-the-lines-in-one-file-that-are-not-in-another
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above command is doing the following things:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">This works by using each line in b.txt as a pattern (-f b.txt) and treating it as a plain string to match (not a regular regex) (-F). You force the match to happen on the whole line (-x) and print out only the lines that don&#39;t match (-v). Therefore you are printing out the lines in a.txt that don&#39;t contain the same data as any line in b.txt.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So remember the order of file a and b matters if you really understand what the command is doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Perl One-liners]]></title>
    <link href="http://isunix.github.io/blog/2015/12/11/more-perl-one-liners/"/>
    <updated>2015-12-11T10:18:24+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/11/more-perl-one-liners</id>
    <content type="html"><![CDATA[<p>Some maybe useful perl one-liners here for easy reference.</p>

<p>Some of the tip are from the post:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.catonmat.net/blog/perl-one-liners-explained-part-one/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Some are from my own daily usage.</p>

<p>I also found there are posts about useful sed/awk/perl one-liners:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.catonmat.net/blog/awk-one-liners-explained-part-one/
</span><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-one/
</span><span class="line">http://www.catonmat.net/blog/introduction-to-perl-one-liners/
</span><span class="line">http://linux.gda.pl/spotkania/sp_13/perl-one-liners.pdf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>1.Loop through a file for each line to find the lines matching certain pattern. Then grep those pattern against a file, and print those lines which has a column meets certain criteria.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file1.txt | perl -nle <span class="s1">&#39;print $1 if /\b(__[0-9a-z]\w+)\b/i;&#39;</span> | sort | uniq | xargs -I , grep , -w fileb.txt | awk <span class="s1">&#39;$2==0&#39;</span> | awk <span class="s1">&#39;{print $7}&#39;</span> | sort | uniq | xargs -I , grep , -w filec.txt | awk <span class="s1">&#39;$8==0&#39;</span> | awk <span class="s1">&#39;{print $8,&quot; &quot;,$13}&#39;</span> &gt; /tmp/<span class="sb">`</span>date +%Y%m%d<span class="sb">`</span>.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Add a blank line before every line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -pe <span class="s1">&#39;s//\n/&#39;</span> file.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.Remove all blank lines</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt | perl -ne <span class="s1">&#39;print unless /^$/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Remove all consecutive blank lines, leaving just one.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt | perl -00 -pe <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Compress/expand all blank lines into N consecutive ones.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat 1.txt| perl -00 -pe <span class="s1">&#39;$_.=&quot;\n&quot;x4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.substitute something in a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -pi -e <span class="s1">&#39;s/good/bad/g&#39;</span> file.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.same as item-6 but only on lines match something:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -pi -e <span class="s1">&#39;s/good/bad/g if /matched/&#39;</span> file
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.Finding all repeated lines in a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -ne <span class="s1">&#39;print if $a{$_}++&#39;</span> 1.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.Numbering lines in a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -ne <span class="s1">&#39;print &quot;$. $_&quot;&#39;</span> file.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>or with the ‘-p’ argument:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -pe <span class="s1">&#39;$_ = &quot;$. $_&quot;&#39;</span> file.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10.Sum up all the numbers on each line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt| perl -MList::Util<span class="o">=</span>sum -alne <span class="s1">&#39;print sum @F&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>11.TO see how the above one-liner works, use the Data::Dumper module to get a look at it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt| perl -MData::Dumper -alne <span class="s1">&#39;print  Dumper @F&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>12.Finding the date 10 days ago:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MPOSIX -le <span class="s1">&#39;@now = localtime; $now[3] -= 10; print scalar localtime mktime @now&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>13.Find the sum of the numbers in the first column:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt| perl -lane <span class="s1">&#39;$sum += $F[0]; END { print $sum }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>14.Getting a list of the names of all users on the system:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -a -F: -lne <span class="s1">&#39;print $F[4]&#39;</span> /etc/passwd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>15.Print the number of non-empty lines in a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt | perl -le <span class="s1">&#39;print scalar(grep{/./}&lt;&gt;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>16.Print the number of empty lines in a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt| perl -lne <span class="s1">&#39;$a++ if /^$/; END {print $a+0}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt | perl -le <span class="s1">&#39;print scalar(grep{/^$/}&lt;&gt;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file.txt | perl -le <span class="s1">&#39;print ~~grep{/^$/}&lt;&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>17.Print the number of lines in a file that match a pattern (emulate grep -c):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat 3.txt| perl -lne <span class="s1">&#39;$a++ if /good/; END {print $a+0}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat 3.txt | grep -c <span class="s2">&quot;good&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>18.Generate and print the alphabet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;print (&quot;a&quot;..&quot;z&quot;)&#39;</span>
</span><span class="line">or
</span><span class="line">perl -le <span class="s1">&#39;print a..z&#39;</span>
</span><span class="line">or
</span><span class="line">perl -le <span class="s1">&#39;print join &quot;&quot;, (&quot;a&quot;..&quot;z&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>19.Generate a random 8 character password:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;print map { (&quot;a&quot;..&quot;z&quot;)[rand 26] } 1..8&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>20.Find the numeric values for characters in the string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;print join &quot;, &quot;, map { ord } split //, &quot;hello world&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>21.Generate an array with odd numbers from 1 to 100:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;@odd = grep {$_ % 2 == 1} 1..100; print &quot;@odd&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>22.Find the length of the string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;print length &quot;hello boy&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>23.Find the number of elements in an array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -le <span class="s1">&#39;@array = (&quot;a&quot;..&quot;z&quot;); print ~~@array&#39;</span>
</span><span class="line">or
</span><span class="line">perl -le <span class="s1">&#39;@array = (&quot;a&quot;..&quot;z&quot;); print scalar @array&#39;</span>
</span><span class="line">or
</span><span class="line">perl -le <span class="s1">&#39;@array = (&quot;a&quot;..&quot;z&quot;); print $#array + 1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>24.Base64 encode a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MMIME::Base64 -e <span class="s1">&#39;print encode_base64(&quot;string&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>25.base64 encode the whole file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MMIME::Base64 -0777 -ne <span class="s1">&#39;print encode_base64($_)&#39;</span> file
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>26.Base64 decode a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MMIME::Base64 -le <span class="s1">&#39;print decode_base64(&quot;c3RyaW5n&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>27.URL-escape a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MURI::Escape -le <span class="s1">&#39;print uri_escape(&quot;1+2&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>28.URL-unescape a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MURI::Escape -le <span class="s1">&#39;print uri_unescape(&quot;1%2B2&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>29.HTML-encode a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MHTML::Entities -le <span class="s1">&#39;print encode_entities(&quot;&lt;br&gt;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>30.HTML-decode a string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -MHTML::Entities -le <span class="s1">&#39;print decode_entities(&quot;&amp;lt;br&amp;gt;&quot;)&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>31.Convert all text to uppercase:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -nle <span class="s1">&#39;print uc&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>32.Camel case each line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ple <span class="s1">&#39;s/(\w+)/\u$1/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>33.Strip leading whitespace (spaces, tabs) from the beginning of each line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ple <span class="s1">&#39;s/^[ \t]+//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>34.Strip trailing whitespace (space, tabs) from the end of each line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ple <span class="s1">&#39;s/[ \t]+$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>35.Strip whitespace from the beginning and end of each line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ple <span class="s1">&#39;s/^[ \t]+|[ \t]+$//g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>36.Substitute (find and replace) “foo” with “bar” on lines that match “baz”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -pe <span class="s1">&#39;/baz/ &amp;&amp; s/foo/bar/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>37.Print the first line of a file (emulate head -1):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print; exit&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>38.Print the first 10 lines of a file (emulate head -10):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -ne <span class="s1">&#39;print if $. &lt;= 10&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This one-liner uses the $. special variable. This variable stands for “current line number.” </p>

<p>39.Print the last line of a file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;$last = $_; END { print $last }&#39;</span>
</span><span class="line">or
</span><span class="line">cat file | perl -ne <span class="s1">&#39;print if eof&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>40.Print the last 10 lines of a file (emulate tail -10):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;push @a, $_; @a = @a[@a-10..$#a]; END { print @a }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>41.Print only lines that do not match a regular expression:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;!/regex/ &amp;&amp; print&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>42.Print the line before a line that matches a regular expression:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;/regex/ &amp;&amp; $last &amp;&amp; print $last; $last = $_&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>43.Print the line after a line that matches a regular expression:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;if ($p) { print; $p = 0 } $p++ if /regex/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>44.Print lines that match regex AAA and regex BBB in any order:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;/AAA/ &amp;&amp; /BBB/ &amp;&amp; print&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>45.Print lines that don’t match match regexes AAA and BBB:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;!/AAA/ &amp;&amp; !/BBB/ &amp;&amp; print&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>46.Print lines that match regex AAA followed by regex BBB followed by CCC:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;/AAA.*BBB.*CCC/ &amp;&amp; print&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>47.Print lines that are 20 chars or longer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print if length &gt;= 80&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>48.Print only line 13:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;$. == 13 &amp;&amp; print &amp;&amp; exit&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>49.Print all lines except line 13.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -ne <span class="s1">&#39;$. != 13 &amp;&amp; print&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>50.Print only lines 13, 19 and 67:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">perl -ne <span class="s1">&#39;print if $. == 13 || $. == 19 || $. == 67&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>51.Print all lines between two regexes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print if /regex1/../regex2/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>52.Print all lines from line 17 to line 30:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print if $. &gt;= 17 &amp;&amp; $. &lt;= 30&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>53.Print the longest line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;$l = $_ if length($_) &gt; length($l); END { print $l }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>54.Print the shortest line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;$s = $_ if $. == 1; $s = $_ if length($_) &lt; length($s); END { print $s }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>55.Print all lines that contain only characters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print if /^[[:alpha:]]+$/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>56.Print all lines that repeat:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print if ++$a{$_} == 2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>57.Print all unique lines:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -ne <span class="s1">&#39;print unless $a{$_}++&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>58.To remove blank lines:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | perl -pi -e <span class="s1">&#39;s!^\s+?$!!&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commen Perl Modules I Use]]></title>
    <link href="http://isunix.github.io/blog/2015/12/08/commen-perl-modules-i-use/"/>
    <updated>2015-12-08T16:07:21+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/08/commen-perl-modules-i-use</id>
    <content type="html"><![CDATA[<p>I will list some of common perl modules I here.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">LWP::UserAgent
</span><span class="line">Mojolicious
</span><span class="line">Dancer
</span><span class="line">Dancer2
</span><span class="line">DBI
</span><span class="line">File::Slurp
</span><span class="line">Path::Tiny
</span><span class="line">IO::All
</span><span class="line">File::Slurp::Tiny
</span><span class="line">File::Slurper
</span><span class="line">DBD::SQLite
</span><span class="line">Data::Dumper
</span><span class="line">FindBin
</span><span class="line">Getopt::Long
</span><span class="line">Class::Date
</span><span class="line">POSIX
</span><span class="line">JSON
</span><span class="line">Try::Tiny
</span><span class="line">use File::Basename
</span><span class="line">List::Util
</span><span class="line">List::MoreUtils
</span><span class="line">File::Spec::Functions
</span><span class="line">File::Spec
</span><span class="line">Email::Simple
</span><span class="line">Data::Printer
</span><span class="line">DBD::mysql
</span><span class="line">Sort::Fields
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Of course we can write a small script to loop through these modules and install these modules all together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python Request to Download Movies]]></title>
    <link href="http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies/"/>
    <updated>2015-12-04T14:50:25+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies</id>
    <content type="html"><![CDATA[<p>This post shows a working way to download movies using python requests module.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">requests</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MovieDownload</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">__contains__</span><span class="p">(</span><span class="s">&#39;//&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">download_movie</span><span class="p">()</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span><span class="p">(</span><span class="s">&quot;wrong url entered&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">download_movie</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">        <span class="n">pattern_title</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;&lt;h2 class=&quot;entry_title&quot;&gt;(.*?)&lt;/h2&gt;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">title</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern_title</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">pattern_to_download</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;&lt;li&gt;&lt;a href=&quot;(.*?)&quot;&gt;.*?1024\.mkv.*?&lt;/a&gt;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">movie_urls</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern_to_download</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;movie.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span><span class="p">(</span><span class="s">&quot;There are {} urls here!</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">movie_urls</span><span class="p">)))</span>
</span><span class="line">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;There are {} urls here!</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">movie_urls</span><span class="p">)))</span>
</span><span class="line">            <span class="k">for</span> <span class="n">movie_url</span> <span class="ow">in</span> <span class="n">movie_urls</span><span class="p">:</span>
</span><span class="line">                <span class="k">print</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">movie_url</span><span class="p">))</span>
</span><span class="line">                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;{}</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">movie_url</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://cn163.net/archives/3639/&quot;</span>
</span><span class="line"><span class="n">MovieDownload</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then execute the script as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">python3 movie_download.py
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[P4 Add New Executable Script]]></title>
    <link href="http://isunix.github.io/blog/2015/12/02/p4-add-new-executable-script/"/>
    <updated>2015-12-02T13:38:57+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/02/p4-add-new-executable-script</id>
    <content type="html"><![CDATA[<p>This post shows how to add a script into p4 repo.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">p4 add cross-rules-freqs.pl
</span><span class="line">p4 edit -t text+x cross-rules-freqs.pl
</span><span class="line">p4 submit
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
