<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-06-03T01:23:25+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intermediate Perl 第一章 序言]]></title>
    <link href="http://isunix.github.io/blog/2014/06/02/intermediate-perl-di-%5B%3F%5D-zhang-xu-yan/"/>
    <updated>2014-06-02T23:53:36+08:00</updated>
    <id>http://isunix.github.io/blog/2014/06/02/intermediate-perl-di-[?]-zhang-xu-yan</id>
    <content type="html"><![CDATA[<p>欢迎来到理解Perl的下一个阶段。 你来到这里可能是因为你想学写超过100行的Perl程序，又或者是因为你的老板让你学的。  </p>

<p>看， 我们的Learning Perl一书是很了不起的， 因为它介绍了如何在短的到中等长度的程序中使用Perl（用Perl所做的绝大多数编程都是如比）。但是为了避免“美洲驼书”（Learning Perl）变得太大让人恐惧， 我们刻意地小心地省略掉了很多地内容。   </p>

<p>在接下来的内容里， 你可以得到“故事的剩下的部分”， 它是同我们的好朋友“Learning Perl”中同样的风格的。它涵盖了你写100到1000行长的程序所需要的知识。   </p>

<p>例如， 你将学习到怎样和许多程序员在同一个项目上工作。这是很棒的， 因为除非你每天工作35个小时， 你在大的项目上是需要帮助的。你同样得确保当你在你的代码上进展到最终的应用的时候， 你的代码和别人的代码是能够一致的。    </p>

<p>这本书同样向你展示了如何处理更大的更加复杂的数据结构， 比如像我们或许会称作的“哈希的哈希” 或者“array of arrays of hashes of arrays”. 一旦你知道了点references(引用)， 你就开始进入到了任意复杂的数据结构的领域了。   </p>

<p>接着就是面向对象编程这个时髦的观念了， 它允许同一个项目里， 在有着微小或者重大变动的情况下， 可以部分重用你的代码（如果运气好的话，别人的代码）。    </p>

<p>团队合作的一个很重要的一方面是有着发布周期以及单元测试还有整合测试。你将学习到基础的把你的代码打包成一个distribution(发布版本)以及为这个distribution提供单元测试。这既是为了开发， 也是为了验证你的代码在最终的环境里是行得通的。   </p>

<p>正如我们在Learning Perl中承诺以及递交的那样， 我们将会以有趣的例子和坏坏的双关语来一路娱乐你。(我们们已经将Fred, Barney, Betty, 还有wilma遣送回家了。一组新的面孔将会扮演主要的角色。)   </p>

<h2 id="section">你应该已经知道的</h2>

<p>我们将假设你读过了Learning Perl, 或者至少假装你读过了。并且你使用Perl有足够的经验了， 达到了把那些基本的东西消化吸收的程度了。比如你将不会在本书中看到解释如何去获取一个数组的元素或者从subroutine中返回一个值。   </p>

<p>请确认你知道以下的事情：   </p>

<ul>
  <li>怎样在你的系统中运行一个Perl程序。</li>
  <li>三个基本的Pelr的变量类型：标量， 数组，还有哈希。</li>
  <li>控制结构， 诸如while, if, for 以及 foreach。</li>
  <li>Subroutines(子程序)。</li>
  <li>Perl操作符， 诸如grep, map, sort, 还有 print。</li>
  <li>文件操作， 诸如open, file reading, 还有 -X(文件测试)。</li>
</ul>

<p>你可能会在本书中获取到关于这些话题的更深的见解，但是我们将假设你知道这些基础知识了。  </p>

<h2 id="section-1">关于那些脚注</h2>
<p>像在Learning Perl中一样， 这本书把一些初次阅读时会感到生僻的内容降级到脚注里去。你应该在初次阅读的时候跳过那些内容，然后在重读的时候再拾起来。你将不会在脚注中发现在接下来的章节中的内容需要的知识。  </p>

<h2 id="section-2">关于练习</h2>

<p>实际动手操作的训练会让你更好的完成这件工作。最好的提供这种培训的方式就是在半个到一个小时的内容展示之后， 提供一系列的练习题。当然如果你是个快速阅读的人的话， 你结束一章的阅读可能并不需要半个小时。 放慢速度， 深呼吸， 然后做练习。  </p>

<p>每一个练习题都有一个“多少分钟能完成”的评级。我们是想用这个评级来表示完成这个联系所需要的最长的时间， 知识如果你花的时间比所示的时间长或者短很多的话， 请不要感觉糟糕。有的时候只是你在你的学习或者工作当中遇到了多少次同样的编程任务的问题而已。   </p>

<p>每个问题在附录中都有答案。请不要偷看哦， 要不要你就毁了这些习题的价值了。   </p>

<h2 id="perl">如果我是一个Perl的授课老师怎么办？</h2>

<p>如果你是一个决定使用本书来作为你的教材的授课老师， 你应该知道每一组问题， 都是足够的短到了让一个学生在45分钟到一个小时内完成， 而且还会有点时间留下来休息。有的章节的练习题会很快的得到解决， 有的可能得花更长的时间。那是因为一旦那些在中括号中的数字被写好了， 我们发现自己已经不知道该如何往上加了。  </p>

<p>那么就让我们开始吧。在你翻开此页之后课程就开始了。。。 </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intermediate Perl 前言]]></title>
    <link href="http://isunix.github.io/blog/2014/06/02/intermediate-perl-qian-yan/"/>
    <updated>2014-06-02T23:06:08+08:00</updated>
    <id>http://isunix.github.io/blog/2014/06/02/intermediate-perl-qian-yan</id>
    <content type="html"><![CDATA[<p>Perl的面向对象的机制是经典的变戏法。它接收一些Perl中存在的非面向对象特征，诸如packages, references, hashes,arrays, subroutines 以及 modules， 然后（并没有什么锦囊妙计）不知道从什么地方变出来完整的功能性的objects， classes 以及 methods。   </p>

<p>那是很大的一个技巧。这意味着你可以在不用首先掌握很多新的语法或者知晓大量的新的技巧的情况下， 在你已有的Perl知识的基础上继续发展， 轻松地进入面向对象的Perl发展进程中。这也同样意味着你可以通过选择最适合你的任务的已经存在的结构来对面向对象Perl进行微调， 以符合你自己的需要。  </p>

<p>但是这里有个问题。 由于Perl选择packages， references, hashes,arrays, subroutines 以及 modules 作为它的面向对象机制的基石， 为了使用面向对象Perl， 你得已经理解了packages，references, hashes,arrays, subroutines 以及 modules。   </p>

<p>接下来就是所谓的困难了。这里学习的曲线并没有被消除， 而只是被向后推延了几步而已。    </p>

<p>那么接下来你该如何学习一切你应该知道的关于非面向对象的知识，然后你就可以学习一切你因该知道的关于面向对象的知识呢？   </p>

<p>这本书就是答案。在接下来的每页里， Randal会利用他20多年使用Perl的经历， 以及40多年看Gilligan与Ed先生的经验来解释共同支撑着Perl的面向对象特性的每一个组成部分。 更棒的是， 他接着展示了如何联合那些组成的部分来创造有用的classes（类）以及objects（对象）。   </p>

<p>所以当涉及到Perl的objects，references, 以及 modules的时候， 你仍然感觉像是Gilligan， 那么这本书就是Professor要求的。  </p>

<p>以上都是真实的消息哦！   </p>

<p>–Damian Conway, 2003年5月。                                                             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew Update Errors Fixed]]></title>
    <link href="http://isunix.github.io/blog/2014/06/01/brew-update-errors-fixed/"/>
    <updated>2014-06-01T16:12:00+08:00</updated>
    <id>http://isunix.github.io/blog/2014/06/01/brew-update-errors-fixed</id>
    <content type="html"><![CDATA[<p>I met several errors while updating my homebrew, one is:  </p>

<p><img src="http://isunix.github.io/images/sun/first.png" />    </p>

<p>the solution is:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd `brew --prefix`    
</span><span class="line">git remote add origin https://github.com/mxcl/homebrew.git   
</span><span class="line">git fetch origin    
</span><span class="line">git reset --hard origin/master 
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the other is:   </p>

<p><img src="http://isunix.github.io/images/sun/second.png" />    </p>

<p>To address this this error, we just have have to change the permissions on the folder to a certain user:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chown -R sun .git  </span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Error Using Rake New_post Under Zsh]]></title>
    <link href="http://isunix.github.io/blog/2014/05/31/on-the-error-using-rake-new-post-under-zsh/"/>
    <updated>2014-05-31T17:48:54+08:00</updated>
    <id>http://isunix.github.io/blog/2014/05/31/on-the-error-using-rake-new-post-under-zsh</id>
    <content type="html"><![CDATA[<p>When I issue the command “rake new_post[]” using the zsh, I got the error telling me that “no matches found”. I googled, it said if using “noglob rake” rather than simply “rake”, this problem will be solved. But in my case, it does not work. </p>

<p>My expedient solution here is, issuing the followng command:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake "new_post[on the error using rake new_post under zsh]"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>rather than in the normal way:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post["on the error using rake new_post under zsh"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works in my case, but it is not a nice solution for sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Story With Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/05/31/my-story-with-perl/"/>
    <updated>2014-05-31T17:22:45+08:00</updated>
    <id>http://isunix.github.io/blog/2014/05/31/my-story-with-perl</id>
    <content type="html"><![CDATA[<p>When I was In college, I am not interested in programming language at all. At that time, I devoted almost all of my time to English study and math thinking. I thought learning computer science was silly, because if you know how to do something(or compute something) in your own language, why do you bother to do it in computer’s language?   </p>

<p>With this thought in my mind, you can guess I did not study computer science very well, although I have to take many courses in CS. I did not fail any one of the courses I took but also not proficient in any of them.  </p>

<p>When I was about to graduate from college, I had to find a job. I was interested in foreign trade then and hoped I could use my English skill and further my interest in economics and business. I did get jobs in this area but when a job oppotunity concerning database with the job title ‘database production analyst’ got landed by me, I gave up my dream of becoming a business man and became a database production analyst, because the latter one offers a more huge salary and better working environment, and that was in year 2011 then, before July.   </p>

<p>I spent the first year of working career not knowing what to do. I was not interested in SQL programming at all, and my job then did not require too much programming skill on SQL. My team leader then is one who is very proficent in SQL Server and T-SQL programming, maybe because of him, I did not further my pursue in SQL programming.    </p>

<p>But I had to learn something then, I thought command line tools very cool, so I spent a lot of time reading other people’s code in the production environment. In order to learn how a web site is built and how to use PHP and javascript, I also joined a team in the company whose aim was to develop an internal management system, my role there was testing, but I did not think I have ever offered any help to the team and the project. Later on when the internal management system was almost finished, my name was also mentioned in the to be appreciated list. I feel quite ashamed.  </p>

<p>So based on the above， you can see I did not get a lot in my first year regarding programming language, but I did begin to make my own choice of what I wanted to learn.</p>

<p>As to my encounter with Perl, I knew the language of Perl in late 2011. I used to spend a lot of time on it when I was in the first company I joined, since that company uses a lot of Perl to do system administratiion. The problem is I have not used perl to write any useful scripts, although I have crafted some small snipptes.   </p>

<p>I always think Perl is not a beautiful language. I know something about Python also, and think Python is more readable than Perl. I have bought and read several books on Python, I have studied some of Python’s advanced usages. I have delved into Django, Flask and Tornado, the three very famous Python web framework. </p>

<p>Also, I have spent quite a while to learn Ruby and Rails. I used to think maybe I should find a job in using ruby because I have read a book on ruby written by its maker Mats then. I found ruby to be very easy and interesting then. I spent several weeks learning ruby and another several week on Rails to learn how to build a web site.  </p>

<p>And currently I am using PHP to write some internal tools for my team. I have to confess I have spent many hours on how to build the environment for PHP and Apache. I read books and watched videos on PHP. PHP is the second language I used besides bash that got deployed to production environment. As to PHP, I want to thank this language because it is easy to use and guided me to the programming world. I get to know a lot of programming concepts through using PHP. Most of the codes I wrote was in PHP.  </p>

<p>When I wanted to join the currnet company, I applied for the job position of becoming a Perl developer. I read the job description and I thought then that I can take this job. But after interviewing with my manager, he thought I was a rookie and I surely was a rookie. So I did not landed the job of becoming a Perl developer but became an analyst again, also reporting to the same manager who interviewed me on Perl developer.</p>

<p>For all these accountings, I have no idea why deep down in my heart I want to write something useful in Perl. Maybe because it is hard, maybe because I believe yes I can. </p>

<p>I want to use this opportunity to further my understanding of Perl. I choose the book “Intermediate Perl” here, and want to translate it into Chinese and expand some of the topics diccussed in that book and write something about them in this blog. I choose this book, because it is the first book on Perl that I bought. I did not buy learning Perl first because I thought I can grasp the basic of Perl just by reading the ebook and there is no need to buy the elementary one. The fact is I bought “learning Perl” several months later. I read “Intermediate Perl” several times, but I can not claim that I can understand it all, actually if I grasp the contents in that book, now it will not be necessary for me to write this post any more. </p>

<p>It is very nice to meet someone who is very proficient in Perl. But what is to be noted is, you can learn from someone, but do not count on someone to help teach you, they do not have the obligations to do that. </p>

<p>That is it, let us embark on a new journey!  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clone Octopress From Github to Another Machine and Publish Posts]]></title>
    <link href="http://isunix.github.io/blog/2014/05/24/clone-octopress-from-github-to-another-machine-and-publish-posts/"/>
    <updated>2014-05-24T14:00:50+08:00</updated>
    <id>http://isunix.github.io/blog/2014/05/24/clone-octopress-from-github-to-another-machine-and-publish-posts</id>
    <content type="html"><![CDATA[<p>When you want to clone a octopress blog from the github to a machine and then enabled to publish posts from the cloned repo, you can follow the following steps:   </p>

<ol>
  <li>git clone -b source https://github.com/isunix/isunix.github.com octopress    </li>
  <li>cd octopress    </li>
  <li>git clone https://github.com/isunix/isunix.github.com _deploy        </li>
  <li>sudo gem install bundler   </li>
  <li>bundle install    </li>
  <li>rake new_post[“The Title of Your Article”]    </li>
  <li>bundle exec rake generate</li>
  <li>bundle exec rake preview    </li>
  <li>bundle exec rake deploy    </li>
  <li>git add . </li>
  <li>git commit -m ‘your comment’  </li>
  <li>git push origin source</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Here]]></title>
    <link href="http://isunix.github.io/blog/2014/05/10/my-first-blog-here/"/>
    <updated>2014-05-10T11:51:22+08:00</updated>
    <id>http://isunix.github.io/blog/2014/05/10/my-first-blog-here</id>
    <content type="html"><![CDATA[<p>This is my foreword published on this site using the new name “isunix”. </p>

<p>Previously I was using the name “shpeacelover” which you can google about it.   </p>

<p>However I have not written much useful things under that name. </p>

<p>I hope since now on, I can be more focused on programming and technical things and write more delicately.   </p>

<p>Wish you all have a good time while visiting my dream land!</p>

]]></content>
  </entry>
  
</feed>
