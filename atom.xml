<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-11-06T17:11:02+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Perl on Centos Locally]]></title>
    <link href="http://isunix.github.io/blog/2014/11/06/install-perl-on-centos-locally/"/>
    <updated>2014-11-06T16:55:54+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/06/install-perl-on-centos-locally</id>
    <content type="html"><![CDATA[<p>Following the following steps to install perl in the local directory on your machine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">tar</span> <span class="o">-</span><span class="n">xzf</span> <span class="n">perl</span><span class="o">-</span><span class="mf">5.10.1</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
</span><span class="line"><span class="n">cd</span> <span class="n">perl</span><span class="o">-</span><span class="mf">5.10.1</span>
</span><span class="line"><span class="o">.</span><span class="sr">/Configure -des -Dprefix=$HOME/</span><span class="nb">local</span>
</span><span class="line"><span class="n">make</span>
</span><span class="line"><span class="n">make</span> <span class="n">test</span>
</span><span class="line"><span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pro PHP and Jquery Chap03: Object Oriented Programming]]></title>
    <link href="http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming/"/>
    <updated>2014-10-30T14:03:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>I have written some code in PHP, but I almost never use the object oriented way. Here below is some excerpts from the book “Pro PHP and Jquery”.  </p>

<p>1.How to build a class and instantiate it.   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">MyClass</span><span class="p">{</span>
</span><span class="line">    <span class="c1">//class properties and methods go here</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line">  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It gives out something like </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="nx">object</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">)</span><span class="c1">#1 (0) { }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.The following code shows how to set and read out a class property.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">MyClass</span><span class="p">{</span>
</span><span class="line">    <span class="c1">//class properties and methods go here</span>
</span><span class="line">    <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line">  <span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">prop1</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.THe following code shows how to define methods in php. Methods are class-specific functions:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
</span><span class="line">  <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">setProperty</span><span class="p">(</span><span class="nv">$newval</span><span class="p">){</span>
</span><span class="line">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">=</span> <span class="nv">$newval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProperty</span><span class="p">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">.</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line"><span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">prop1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Use of contructor methods:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">echo</span> <span class="s1">&#39;The class &quot;&#39;</span><span class="p">,</span> <span class="nx">__CLASS__</span><span class="p">,</span> <span class="s1">&#39;&quot; was initiated!&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">setProperty</span><span class="p">(</span><span class="nv">$newval</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">=</span> <span class="nv">$newval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProperty</span><span class="p">()</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">.</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Create a new object</span>
</span><span class="line"><span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line"><span class="c1">// Get the value of $prop1</span>
</span><span class="line"><span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">getProperty</span><span class="p">();</span>
</span><span class="line"><span class="c1">// Output a message at the end of the file</span>
</span><span class="line"><span class="k">echo</span> <span class="s2">&quot;End of file.&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Perl Chap03]]></title>
    <link href="http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap03/"/>
    <updated>2014-10-28T16:58:25+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap03</id>
    <content type="html"><![CDATA[<p>This is a note about chap03 in “Object oriented perl”.  </p>

<p>1.In object oriented perl, there are three rules,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="mi">1</span><span class="o">.</span> <span class="n">rule1:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">a</span> <span class="n">class</span><span class="p">,</span> <span class="n">build</span> <span class="n">a</span> <span class="nb">package</span><span class="o">.</span>
</span><span class="line"><span class="mi">2</span><span class="o">.</span> <span class="n">rule2:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">a</span> <span class="n">method</span><span class="p">,</span> <span class="nb">write</span> <span class="n">a</span> <span class="n">subroutine</span><span class="o">.</span>
</span><span class="line"><span class="mi">3</span><span class="o">.</span> <span class="n">rule3:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">an</span> <span class="n">object</span><span class="p">,</span> <span class="nb">bless</span> <span class="n">a</span> <span class="n">referent</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Some cases while calling a method through an arrow:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$hsh_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">};</span><span class="c1"># Access the hash referred to by $hashref</span>
</span><span class="line"><span class="nv">$arr_ref</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span><span class="c1"># Access the array referred to by $arrayref</span>
</span><span class="line"><span class="nv">$sub_ref</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span><span class="c1"># Access the sub referred to by $subref</span>
</span><span class="line"><span class="nv">$obj_ref</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span><span class="c1"># Access the object referred to by $objref</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.When a method like <code>Bug::print_me</code> is called, the argument list that it receives begins with the object reference through which it was called, followed by any arguments that were explicitly given to the method. That means that calling </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nn">Bug::</span><span class="n">print_me</span><span class="p">(</span><span class="s">&quot;logfile&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>is not the same as calling </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$nextbug</span><span class="o">-&gt;</span><span class="n">print_me</span><span class="p">(</span><span class="s">&quot;logfile&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the first case, print_me is treated as a regular subroutine so the argument list passed to <code>Bug::print_me</code> is equivalent to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="p">(</span> <span class="s">&quot;logfile&quot;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In the second case, <code>print_me</code> is treated as a method so the argument list is equivalent to:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="p">(</span> <span class="nv">$objref</span><span class="p">,</span> <span class="s">&quot;logfile&quot;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Having a reference to the object passed as the first parameter is vital, because it means that the method then has access to the object on which it’s supposed to operate. Hence you’ll find that most methods in Perl start with something equivalent to this:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="n">Bug</span><span class="p">;</span>
</span><span class="line"><span class="k">sub </span><span class="nf">print_me</span><span class="p">{</span>
</span><span class="line">	<span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">)</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or better still:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="n">Bug</span><span class="p">;</span>
</span><span class="line"><span class="k">sub </span><span class="nf">print_me</span><span class="p">{</span>
</span><span class="line">	<span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This second version is better because it provides a lexically scoped copy of the argument list <code>(@args)</code>.   </p>

<p>4.Unlike other object-oriented languages, Perl doesn’t require that an object be a special kind of recordlike data structure. In fact, you can use any existing type of Perl variable—a scalar, an array, a hash—as an object in Perl.   </p>

<p>5.The <code>bless</code> function takes two arguments: a reference to the variable to be marked and a string containing the name of the class. It then sets an internal flag on the variable, indicating that it now belongs to the class.  </p>

<p>6.We didn’t bless the reference; we blessed the referent. The scalar didn’t change—only the nameless hash it refers to has been marked.   </p>

<p>7.You can check that the blessing succeeded by applying the built-in ref function to <code>$nextbug</code>. Normally, when <code>ref</code> is applied to a reference, it returns the type of that reference.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">$nextbug</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_id</span> <span class="o">=&gt;</span> <span class="s">&quot;00001&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">_type</span> <span class="o">=&gt;</span> <span class="s">&quot;fatal&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">_descr</span> <span class="o">=&gt;</span> <span class="s">&quot;application does not compile&quot;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nb">bless</span> <span class="nv">$nextbug</span><span class="p">,</span> <span class="s">&quot;Bug&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="nb">ref</span><span class="p">(</span><span class="nv">$nextbug</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>THe above code gives out the result, <code>Bug</code>.   </p>

<p>8.Based on the things we said above, we will show a piece of code to demonstrate how to get and set attributes in perl.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="nn">CD::</span><span class="n">Music</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">sub </span><span class="nf">get_count</span><span class="p">{</span><span class="nv">$_count</span><span class="p">}</span>
</span><span class="line">    <span class="k">sub </span><span class="nf">_incr_count</span><span class="p">{</span><span class="o">++</span><span class="nv">$_count</span><span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">new</span> <span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">@arg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$class</span><span class="o">-&gt;</span><span class="n">_incr_count</span><span class="p">();</span>
</span><span class="line">    <span class="nb">bless</span><span class="p">{</span>
</span><span class="line">        <span class="n">name</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class="line">        <span class="n">singer</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class="line">        <span class="n">album</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">        <span class="n">rating</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class="line">    <span class="p">},</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">name</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">name</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="k">sub </span><span class="nf">singer</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">singer</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="k">sub </span><span class="nf">album</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">album</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">rating</span> <span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$rating</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$self</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">rating</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$rating</span> <span class="k">if</span> <span class="nv">$rating</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">package</span> <span class="n">main</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$cd</span> <span class="o">=</span> <span class="nn">CD::</span><span class="n">Music</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="s">&quot;谁的眼泪在飞&quot;</span><span class="p">,</span> <span class="s">&quot;孟庭苇&quot;</span><span class="p">,</span> <span class="s">&quot;谁的眼泪在飞&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">singer</span><span class="o">.</span><span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">album</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">rating</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;There have been &quot;</span><span class="p">,</span> <span class="nn">CD::</span><span class="n">Music</span><span class="o">-&gt;</span><span class="n">get_count</span><span class="p">(),</span> <span class="s">&quot; CD[s] created\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Perl Chap02]]></title>
    <link href="http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap02/"/>
    <updated>2014-10-28T14:08:34+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap02</id>
    <content type="html"><![CDATA[<p>This is a note about chap02 in “Object oriented perl”.  </p>

<p>1.For a hash, we have two ways to get the key-value pair.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="n">steven</span> <span class="o">=&gt;</span> <span class="s">&quot;good&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">sun</span>    <span class="o">=&gt;</span> <span class="s">&quot;bad&quot;</span><span class="p">,</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$nextkey</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$nextkey</span> <span class="o">=</span> <span class="nb">each</span> <span class="nv">%hash</span><span class="p">)){</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;the key $nextkey has the value $hash{$nextkey}\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The other way is:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">%hash</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="n">steven</span> <span class="o">=&gt;</span> <span class="s">&quot;good&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">sun</span>    <span class="o">=&gt;</span> <span class="s">&quot;bad&quot;</span><span class="p">,</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">((</span><span class="nv">$nextkey</span><span class="p">,</span> <span class="nv">$nextval</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span> <span class="nv">%hash</span><span class="p">){</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;the key $nextkey has value $nextval\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Subroutines can also be declared with a prototype, which is a series of specifiers that tells the compiler to restrict the type and number of arguments with which the subroutine may be invoked. For example, in the subroutine definition:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">sub </span><span class="nf">insensitive_less_than</span> <span class="p">($$)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nb">lc</span><span class="p">(</span><span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">lt</span> <span class="nb">lc</span><span class="p">(</span><span class="nv">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The prototype is <code>($$)</code> and specifies that the subroutine insensitive_less_than can only be called with exactly two arguments, each of which will be treated as a scalar—even if it’s actually an array!  </p>

<p>Prototypes are only enforced when a subroutine is called using the name(args) syntax. Prototypes are not enforced when a subroutine is called with a leading &amp; or through a subroutine reference.   </p>

<p>3.Here is a clear illustration of how to use reference in Perl:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">@row1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line"><span class="k">my</span> <span class="nv">@row2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class="line"><span class="k">my</span> <span class="nv">@row3</span> <span class="o">=</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">@cols</span> <span class="o">=</span> <span class="p">(</span><span class="o">\</span><span class="nv">@row1</span><span class="p">,</span> <span class="o">\</span><span class="nv">@row2</span><span class="p">,</span> <span class="o">\</span><span class="nv">@row3</span><span class="p">);</span>
</span><span class="line"><span class="k">my</span> <span class="nv">$table</span> <span class="o">=</span> <span class="o">\</span><span class="nv">@cols</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;2 x 3 is &quot;</span><span class="p">,</span> <span class="nv">$table</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Here is a script to realize the function of skipping along an array by a fixed step size. It uses anynymous soubroutine and closure.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">sub </span><span class="nf">hop_along</span><span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$from</span><span class="p">,</span> <span class="nv">$to</span><span class="p">,</span> <span class="nv">$step</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$next</span> <span class="o">=</span> <span class="nv">$from</span> <span class="o">-</span> <span class="nv">$step</span><span class="p">;</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$closure_ref</span> <span class="o">=</span> <span class="n">sub</span><span class="p">{</span>
</span><span class="line">        <span class="nv">$next</span> <span class="o">+=</span> <span class="nv">$step</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="k">if</span> <span class="nv">$next</span> <span class="o">&gt;</span> <span class="nv">$to</span><span class="p">;</span>
</span><span class="line">        <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$closure_ref</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$iterator</span> <span class="o">=</span> <span class="n">hop_along</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line"><span class="k">while</span><span class="p">(</span><span class="nv">$iterator</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$next</span><span class="p">)){</span>
</span><span class="line">    <span class="k">print</span> <span class="nv">$next</span><span class="o">.</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The sad thing is, I am not sure if this is the best way to achieve the function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use of Select in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/10/24/use-of-select-in-perl/"/>
    <updated>2014-10-24T13:34:51+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/24/use-of-select-in-perl</id>
    <content type="html"><![CDATA[<p>One of the best illustration of the use of select I read maybe from the book “data munging with perl”.   </p>

<p>Look at the the differences between the following 3 ones.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">print</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="n">LIST</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="n">FILEHANDLE</span> <span class="n">LIST</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the first one “print”, since on target is specified, the contents of <code>$_</code> are printed to the default output file handle(usually STDOUT).    </p>

<p>For the second one “print LIST”, the contents of LIST are printed to the default output file handle.  </p>

<p>For the third one “print FILEHANDLE LIST”, the contents of LIST are printed to the specified file handle, “FILEHANDLE”.  </p>

<p>If you call select with no parameters, it will return the name of the currently selected output file handle, so </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">print</span> <span class="nb">select</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>will normally print main::STDOUT.   </p>

<p>If you call select with the name of a file handle, it will replace the current default output file handle with the new one. It returns the previously selected file handle so that you can store it and reset it later. If you
need to write a lot of data to a particular file, you could use code like this:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="s">&#39;&gt;out.txt&#39;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;Can&#39;t open out.txt: $!&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">my</span> <span class="nv">$old</span> <span class="o">=</span> <span class="nb">select</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class="line"><span class="k">foreach</span> <span class="p">(</span><span class="nv">@data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">print</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nb">select</span> <span class="nv">$old</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another variable that is useful when writing data is <code>$|</code>. Setting this variable to a nonzero value will force the output buffer to be flushed immediately after every print (or write) statement. This has the effect of making the output stream look as if it were unbuffered. This variable acts on the currently selected output file handle. If you want to unbuffer any other file handle, you will need to select it, change the value of <code>$|</code>, and then reselect the previous file handle using code like this:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="nb">select</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class="line"><span class="vg">$|</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nb">select</span> <span class="nv">$file</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In its compact form, it can be written as:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">select</span><span class="p">((</span><span class="nb">select</span><span class="p">(</span><span class="n">FILE</span><span class="p">),</span> <span class="vg">$|</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally we will take a look at an example,  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">open</span><span class="p">(</span><span class="n">FILE</span><span class="p">,</span><span class="s">&quot;&gt;./test.out&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$oldHandle</span> <span class="o">=</span> <span class="nb">select</span><span class="p">(</span><span class="n">FILE</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span> <span class="nb">select</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;This is sent to test.out.\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$second</span> <span class="o">=</span> <span class="nb">select</span><span class="p">(</span><span class="nv">$oldHandle</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;to default stdout!\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="nv">$second</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you understand how “select” works, the output for this piece of code is quite obvious.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NLPP Preface]]></title>
    <link href="http://isunix.github.io/blog/2014/10/20/nlpp-preface/"/>
    <updated>2014-10-20T14:01:10+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/20/nlpp-preface</id>
    <content type="html"><![CDATA[<p>I am going to write a series of notes regarding “natural language processing with python”. The first article will be about the preface of the book.  </p>

<p>The following are the tool that are listed to be installed for this book, some are necessary and some are optional.  </p>

<ol>
  <li>
    <p>NLTK</p>
  </li>
  <li>
    <p>NLTK-Data  </p>
  </li>
  <li>
    <p>NumPy (recommended) </p>
  </li>
  <li>
    <p>Matplotlib (recommended)  </p>
  </li>
  <li>
    <p>NetworkX (optional)</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Advanced Perl Tricks]]></title>
    <link href="http://isunix.github.io/blog/2014/10/17/some-advanced-perl-tricks/"/>
    <updated>2014-10-17T18:50:35+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/17/some-advanced-perl-tricks</id>
    <content type="html"><![CDATA[<p>I am taking notes of some of the advanced perl tricks used in perl.  </p>

<p>1.to get all the matched items using the /g flag,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$_</span> <span class="o">=</span> <span class="s">&quot;Just another Perl hacker,&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">my</span> <span class="nv">@words</span> <span class="o">=</span> <span class="sr">/(\S+)/g</span><span class="p">;</span> <span class="c1"># &quot;Just&quot; &quot;another&quot; &quot;Perl&quot; &quot;hacker,&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.to get the word count, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">$word_count</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=</span> <span class="sr">/(\S+)/g</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.The built-in pos() operator returns the match position for the string we give it (or $_ by default).   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$_</span> <span class="o">=</span> <span class="s">&quot;just another perl hacker&quot;</span><span class="p">;</span>
</span><span class="line"><span class="sr">/(just)/g</span><span class="p">;</span>
</span><span class="line"><span class="k">my</span> <span class="nv">$pos</span> <span class="o">=</span> <span class="nb">pos</span><span class="p">();</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[$1] ends at position $pos\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.To anchor our next match exactly where we left off the last time, we can use the \G anchor. It’s just like the beginning of string anchor \A, except for where \G anchors at the current match position. If our match fails, Perl resets pos() and we start at the beginning of the string.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Perl Script to Rename File Names]]></title>
    <link href="http://isunix.github.io/blog/2014/10/17/a-perl-script-to-rename-file-names/"/>
    <updated>2014-10-17T16:15:19+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/17/a-perl-script-to-rename-file-names</id>
    <content type="html"><![CDATA[<p>I have some files with file name quite weird in the format, “[Alex_Holmes]_Hadoop_in_Practice(BookZZ.org).pdf
“. What I want to achieve is removing the parts in the [] or ().  Here below is the perl script I wrote. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">Cwd</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$target_dir</span> <span class="o">=</span> <span class="n">getcwd</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nb">opendir</span><span class="p">(</span><span class="k">my</span> <span class="nv">$dh</span><span class="p">,</span> <span class="nv">$target_dir</span><span class="p">)</span> <span class="o">||</span> <span class="nb">die</span> <span class="s">&quot;can&#39;t opendir $target_dir: $!&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">@files</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span> <span class="sr">/\w/</span> <span class="o">&amp;&amp;</span> <span class="o">-</span><span class="n">f</span> <span class="s">&quot;$_&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="sr">/^\./</span><span class="p">}</span> <span class="nb">readdir</span><span class="p">(</span><span class="nv">$dh</span><span class="p">);</span>
</span><span class="line"><span class="c1"># [Alex_Holmes]_Hadoop_in_Practice(BookZZ.org).pdf</span>
</span><span class="line"><span class="c1">#files not staring with &quot;.&quot; and contains char, thus (., .., .DS_STORE) will be ignored.</span>
</span><span class="line"><span class="c1">#print Dumper @files;</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="nv">@files</span><span class="p">){</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="sr">/^(?:\[[\S\s]+\])([\S\s]+)(?:\([\S\s]+\))\.pdf$/</span><span class="p">){</span>
</span><span class="line">        <span class="k">my</span> <span class="nv">$new_name</span> <span class="o">=</span> <span class="nv">$1</span><span class="o">.</span><span class="s">&quot;.pdf&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="nb">rename</span><span class="p">(</span><span class="s">&quot;$file&quot;</span><span class="p">,</span> <span class="s">&quot;$new_name&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">die</span><span class="p">(</span><span class="s">&quot;error in renaming: $!&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Bebugger Tips]]></title>
    <link href="http://isunix.github.io/blog/2014/10/16/perl-bebugger-tips/"/>
    <updated>2014-10-16T15:31:54+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/16/perl-bebugger-tips</id>
    <content type="html"><![CDATA[<p>Knowing how to debug a perl program is really important. I am saying this not simply because it is supposed to be so, but also because I have encountered several occasions where I am stucked because I do not know how to debug and I have to ask for help from others. </p>

<p>I am writing this post currently based on two perl pods, one is “perldebug”, the other is “perldebtut”. There is book named “perl debugged” which focuses on how to debug a perl program. Also google it to find post and materials as to how to debug a perl program. I am preparing to stuff all tips and knowledges regrading to perl debugging in this post.  </p>

<p>1.if we want to do a syntax check, we can use the following way:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">c</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.The line shown is the one that is about to be executed next, it hasn’t happened yet. So while we can print a variable with the letter ‘p’, at this point all we’d get is an empty (undefined) value back. What we need to do is to step through the next executable statement with an ‘s’. Then you can see the previous shown variable using the “p varname” format.  </p>

<p>3.type something like “x keys %data” will print out the data in a pretty format. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">Evals</span> <span class="n">expr</span> <span class="n">in</span> <span class="n">list</span> <span class="n">context</span><span class="p">,</span> <span class="n">dumps</span> <span class="n">the</span> <span class="n">result</span> <span class="ow">or</span> <span class="n">lists</span> <span class="n">methods</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.using the “x” operator on a hash is not quite useful here. since a couple of welcomes in there, but no indication of which are keys, and which are values, it’s just a listed array dump and, in this case, not particularly helpful. The trick here, is to use a reference to the data structure:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">x</span> <span class="o">\</span><span class="nv">%data</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Know the differences between “qw” and “q”: qw// is simply q// followed by a split on whitespace. No way to conserve blanks. Thus if the quoted words have blank spaces, and you want to treat them as a whole, use q rather than qw.  </p>

<p>5.perl -w script-name will execute the script and give out the warning messages.  </p>

<p>6.Take a closer look at the ‘x’ command, it’s really useful and will merrily dump out nested references, complete objects, partial objects - just about whatever you throw at it.   </p>

<p>7.If we want to start the debugger and want some form of input from STDIN, we give it something non-committal, a zero: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">de</span> <span class="mi">0</span>	
</span><span class="line"><span class="ow">or</span>
</span><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">de0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.typing “perl -de 0” into the terminal, build an on-the-fly object over a couple of lines (note the backslash):  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;1&gt;</span> <span class="nv">$obj</span> <span class="o">=</span> <span class="nb">bless</span><span class="p">({</span><span class="s">&#39;unique_id&#39;</span><span class="o">=&gt;</span><span class="s">&#39;123&#39;</span><span class="p">,</span> <span class="s">&#39;attr&#39;</span><span class="o">=&gt;</span> <span class="o">\</span>
</span><span class="line"><span class="n">cont:</span> 	<span class="p">{</span><span class="s">&#39;col&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="s">&#39;things&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sx">qw(this that etc)</span><span class="p">]}},</span> <span class="s">&#39;MY_class&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.use the “x” command to see the internals of the obj. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;2&gt;</span> <span class="n">x</span> <span class="nv">$obj</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10.To give more examples on using the “perl -de 0” command, I will just copy the code from the “perldebtut” pod page.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;3&gt;</span> <span class="nv">@data</span> <span class="o">=</span> <span class="sx">qw(this that the other atheism leather theory scythe)</span>
</span><span class="line"><span class="n">DB</span><span class="sr">&lt;4&gt;</span> <span class="n">p</span> <span class="s">&#39;saw -&gt; &#39;</span><span class="o">.</span><span class="p">(</span><span class="nv">$cnt</span> <span class="o">+=</span> <span class="nb">map</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;\t:\t$_\n&quot;</span> <span class="p">}</span> <span class="nb">grep</span><span class="p">(</span><span class="sr">/the/</span><span class="p">,</span> <span class="nb">sort</span> <span class="nv">@data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>11.If you want to see the command History, type an ‘H’:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;5&gt;</span> <span class="n">H</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>12.And if you want to repeat any previous command, use the exclamation: ‘!’:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;5&gt;</span> <span class="o">!</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>13.If we want to put a breakpoint on a line, we can use this:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">b</span> <span class="n">linenum</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>14.We can see what breakpoints are set by using the list ‘L’ command:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;3&gt;</span> <span class="n">L</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>15.To delete a break point on a line, we use the “B” command. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">DB</span><span class="sr">&lt;3&gt;</span> <span class="n">B</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>16.At the end of the tutorial, its recommended to refer to the following tutorials:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perldebug</span><span class="p">,</span> <span class="n">perldebguts</span><span class="p">,</span> <span class="n">perldiag</span><span class="p">,</span> <span class="n">perlrun</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>17.Option s and n does step by step execution of each statements. Option s steps into the subroutine. Option n executes the subroutine in a single step (stepping over it).</p>

<p>The s option does stepping into the subroutine while n option which would execute the subroutine(stepping over it).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[匹配最长连续数字串]]></title>
    <link href="http://isunix.github.io/blog/2014/10/14/pi-pei-zui-chang-lian-xu-shu-zi-chuan/"/>
    <updated>2014-10-14T13:11:06+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/14/pi-pei-zui-chang-lian-xu-shu-zi-chuan</id>
    <content type="html"><![CDATA[<p>Say if we are given a string, like “ab1c123def3456h259887”, we want to get the longest consecutive string which consists of only data.  </p>

<p>we are using perl to realize this function. (Actually this is much harder than I thought!)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Mastering Algorithms With Perl Chap01]]></title>
    <link href="http://isunix.github.io/blog/2014/10/10/notes-on-mastering-algorithms-with-perl-chap01/"/>
    <updated>2014-10-10T14:24:33+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/10/notes-on-mastering-algorithms-with-perl-chap01</id>
    <content type="html"><![CDATA[<p>This is the opening post of a series of articles on the book “mastering algorithms with perl”. Using Perl to realize some of the classical data structures and algorithms is a very good channel both for learning Algorithms and for learning Perl.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regexp::Debugger使用示例]]></title>
    <link href="http://isunix.github.io/blog/2014/10/09/regexp-debuggershi-yong-shi-li/"/>
    <updated>2014-10-09T14:09:52+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/09/regexp-debuggershi-yong-shi-li</id>
    <content type="html"><![CDATA[<p>This post shows how to use the perl module, Regexp::Debugger. Used skillfully, this module can do us a lot of favor.  </p>

<p>1.”rxrx prog.pl” is a shorthand for “perl -MRegexp::Debugger prog.pl”.  </p>

<p>2.print out if matched</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">E</span> <span class="s">&quot;say &#39;matched&#39; if &#39;ababc&#39; =~ /(a|b)b+c/x&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.print out if matched and which part matched</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">E</span> <span class="s">&quot;say &#39;matched: &#39;, $&amp; if &#39;ababc&#39; =~ /(a|b)b+c/x&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.use “re” module</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">E</span> <span class="s">&quot;use re &#39;debug&#39;; &#39;ababc&#39; =~ /(a|b)b+c/x&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.use Regexp::Debugger module</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">E</span> <span class="s">&quot;use Regexp::Debugger; &#39;ababc&#39; =~ /(a|b)b+c/x&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.any regex</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="p">(?</span><span class="n">i</span><span class="p">)</span> <span class="p">(?</span><span class="sr">&lt;AB&gt;</span> <span class="p">(?</span><span class="o">&amp;</span><span class="n">ABs</span><span class="p">))</span> <span class="p">(?</span><span class="sr">&lt;AA&gt;</span><span class="p">(??{</span><span class="s">&#39;aa&#39;</span><span class="p">}))</span> <span class="p">(?(</span><span class="n">DEFINE</span><span class="p">)(?</span><span class="sr">&lt;ABs&gt;</span><span class="p">[</span><span class="n">ab</span><span class="p">]{</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">}</span><span class="o">+</span><span class="p">))</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.for the Regexp::Debugger, we have a cmd-line tool named “rxrx”, we typr “rxrx”, then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="sr">/(a|b)b+c/</span>
</span><span class="line"><span class="s">&quot;ababc&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then hit “enter” key or “tab” key to see how and if the string matches the regex.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[哥德尔、艾舍尔、 巴赫:集异璧之大成]]></title>
    <link href="http://isunix.github.io/blog/2014/10/03/ge-de-er-%2C-ai-she-er-%2C-ba-he-ji-yi-bi-zhi-da-cheng/"/>
    <updated>2014-10-03T10:26:03+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/03/ge-de-er-,-ai-she-er-,-ba-he-ji-yi-bi-zhi-da-cheng</id>
    <content type="html"><![CDATA[<p>其实老早就知道这本书了。但是之前甚至连找个电子版的书看完前言的努力都没有的。  </p>

<p>这个国庆是在加班中度过的。在网上看到有人解释函数式编程中的Y Combinator，然后用到了递归的知识，并且提到了图灵机，丘奇以及本文title中的这本《哥德尔、艾舍尔、 巴赫:集异璧之大成》。这里面提到的这几个知识点几乎都是自己比较感兴趣的，只可惜之前一直都没有努力去弄明白。现在对于有这样的一本书可以同时提供这几个方面的知识，那自然是极好的事情了。  </p>

<p>在购买了《哥德尔、艾舍尔、 巴赫:集异璧之大成》这本书的同时，自己也有在看以下的视频:  </p>

<p>1.MIT courseware, 哥德尔、艾舍尔、 巴赫, 一次心灵太空漫游 , </p>

<p>在这个系列的视频中，我们会看到有用到以下的知识点的, 本人是数学系的学生，有的概念尚且很模糊，非数学或者计算机专业的学生想要搞明白里面的一些内容恐怕是难上加难了。不过有不知道的东西或者能认识到自己有哪些的不足其实是很好的事情的。 先列出prerequisites吧： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Isomorphisms
</span><span class="line">Recursion
</span><span class="line">Paradox
</span><span class="line">Infinity
</span><span class="line">Formal System</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这些都是”道”方面的内容的。 我看过不少的人，他们没有把时间和精力花在研究道上面，而是热衷于玩弄所谓的新技术，新名词。满足于能够使用的基础上，却很少去问几个why. 其实他们可以想想：同样的知识自己如果可以掌握的话，别人难道就不可以很快的掌握了吗？若是有哪怕丝毫的谦虚自省的精神，也不至于狂悖傲慢了。   </p>

<p>这些话既是对自己看到的现象的反省，也是对自己的鞭策吧！</p>

<p>2.BBC, Dangerous Knowledge  </p>

<p>后续的话会有关于这方面的学习笔记的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Testing程序高手秘笈]]></title>
    <link href="http://isunix.github.io/blog/2014/10/02/perl-testingcheng-xu-gao-shou-mi-ji/"/>
    <updated>2014-10-02T14:16:01+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/02/perl-testingcheng-xu-gao-shou-mi-ji</id>
    <content type="html"><![CDATA[<p>This post is for the book “perl testing: 程序高手秘笈”.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cgi Set Up on Macos]]></title>
    <link href="http://isunix.github.io/blog/2014/09/30/cgi-set-up-on-macos/"/>
    <updated>2014-09-30T16:57:08+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/30/cgi-set-up-on-macos</id>
    <content type="html"><![CDATA[<p>There are multiple guidelines as to how to set up cgi for perl on macos or linux. </p>

<p>This post keeps notes of how to set up cgi on MACOS.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/Library/</span><span class="n">WebServer</span><span class="sr">/CGI-Executables ~/</span><span class="n">www</span><span class="o">/</span><span class="n">cgi</span><span class="o">-</span><span class="n">bin</span>
</span><span class="line"><span class="n">cd</span> <span class="o">~</span><span class="sr">/www/cgi</span><span class="o">-</span><span class="n">bin</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>put scripts in this dir and access it using the link “localhost/cgi-bin/filename” </p>

<p>you may need to change the permission of the script to “755” if needed.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习任务规划]]></title>
    <link href="http://isunix.github.io/blog/2014/09/29/xue-xi-ren-wu-gui-hua/"/>
    <updated>2014-09-29T21:44:40+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/29/xue-xi-ren-wu-gui-hua</id>
    <content type="html"><![CDATA[<p>自己无论是在知识的广度还是深度上都还是有着很大的不足的。   </p>

<p>所以为了能够更好地督促自己的学习，现在规定自己在一下这些方面要做到要求:  </p>

<ol>
  <li>写10篇关于正则表达式的博客。涵盖从最基础的用法到高级的用法。  </li>
  <li>每天一篇关于perl的文章。如果遇到节假日或者特殊情况，归来的时候也得补上。  </li>
  <li>关于php，python， ruby至少保证每周都有一个脚本产生，不至于生疏。</li>
  <li>关于算法，不管有没有兴趣，至少保证初级水准，别连一个快速排序都记不得。</li>
</ol>

<p>如果还有其他的，以后想到了再补上吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Using Curl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/26/notes-on-using-curl/"/>
    <updated>2014-09-26T18:03:17+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/26/notes-on-using-curl</id>
    <content type="html"><![CDATA[<p>This post gives a little detailed info on how to use curl. Of course we can use “man curl” to get the listed info, what makes this post different is, we will give more examples as to how to use curl.   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Script to List All Methods in a Perl Module]]></title>
    <link href="http://isunix.github.io/blog/2014/09/25/bash-script-to-list-all-methods-in-a-perl-module/"/>
    <updated>2014-09-25T16:21:52+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/25/bash-script-to-list-all-methods-in-a-perl-module</id>
    <content type="html"><![CDATA[<p>In the post “Dynamicly Adding a Method to a Module”, I showed how to use a perl one-liner to list all the methods in a module.  </p>

<p>I will show how to do it in a shell script thus we can accept the module on the command line, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">perl -e <span class="s2">&quot;use Data::Dumper; use $1; print Dumper \%$1::&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Ruby on Centos]]></title>
    <link href="http://isunix.github.io/blog/2014/09/24/how-to-install-ruby-on-centos/"/>
    <updated>2014-09-24T16:19:16+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/24/how-to-install-ruby-on-centos</id>
    <content type="html"><![CDATA[<p>This post keeps notes of how to install ruby on centos server: </p>

<p>1.use rvm
2.use rbenv</p>

<p>3.use src, the </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span class="o">.</span><span class="n">/configure</span> <span class="o">--</span><span class="n">prefix</span><span class="o">=</span><span class="sr">/home/s</span><span class="n">tsun</span><span class="o">/</span><span class="n">local</span>
</span><span class="line"><span class="n">make</span>
</span><span class="line"><span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamicly Adding a Method to a Module]]></title>
    <link href="http://isunix.github.io/blog/2014/09/24/dynamicly-adding-a-method-to-a-module/"/>
    <updated>2014-09-24T12:57:20+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/24/dynamicly-adding-a-method-to-a-module</id>
    <content type="html"><![CDATA[<p>We can follow the following steps to add/change a method in a module dynamicly.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="nb">package</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">sub </span><span class="nf">test</span> <span class="p">{</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;test to add a new method to Data::Dumper\n&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class="line"><span class="nn">Data::Dumper::</span><span class="n">test</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="n">Dumper</span> <span class="o">\</span><span class="nv">%</span><span class="nn">Data::Dumper::</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we can also use the following one liner to check the methods defined in a module:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">e</span> <span class="s">&quot;use File::Find; use Data::Dumper; print Dumper \%File::Find::&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or we can use JSON to print out its format:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">perl</span> <span class="o">-</span><span class="n">e</span> <span class="s">&quot;use File::Find; use JSON; print to_json(\%File::Find::)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
