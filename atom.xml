<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2017-09-14T10:35:13+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resources on Shell Scripts and Linux Tools]]></title>
    <link href="http://isunix.github.io/blog/2017/09/14/resources-on-shell-scripts-and-linux-tools/"/>
    <updated>2017-09-14T10:10:41+08:00</updated>
    <id>http://isunix.github.io/blog/2017/09/14/resources-on-shell-scripts-and-linux-tools</id>
    <content type="html"><![CDATA[<p>一些可能有用的关于linux和shell的链接</p>

<p>(http://isunix.github.io/)[Steven Sun’s blog]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hive Insert Using Select *]]></title>
    <link href="http://isunix.github.io/blog/2016/08/09/hive-insert-using-select-star/"/>
    <updated>2016-08-09T09:34:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/08/09/hive-insert-using-select-star</id>
    <content type="html"><![CDATA[<p>I want to insert into a table with values from another table. and I want to use the follwing statements,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">table_b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both table_a and table_b have the followig 3 fields, “name”, “age”, and the “load_day” field which is used to partition.</p>

<p>If using the above syntax, we will get errors saying table has just 2 fields and table_b has 3.</p>

<p>So one right way to insert the data is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span><span class="p">(</span><span class="n">partition</span><span class="o">=</span><span class="ss">&quot;2016-08-01&quot;</span><span class="p">)</span> <span class="k">select</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">table_b</span> <span class="k">where</span> <span class="n">load_day</span> <span class="o">=</span> <span class="ss">&quot;2016-08-01&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if there are many fields, thus we will need to list them one by one after select which is very tedious.</p>

<p>Here is the solution,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">set</span> <span class="n">hive</span><span class="p">.</span><span class="k">exec</span><span class="p">.</span><span class="k">dynamic</span><span class="p">.</span><span class="n">partition</span><span class="p">.</span><span class="k">mode</span><span class="o">=</span><span class="n">nonstrict</span><span class="p">;</span>
</span><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span> <span class="n">partition</span><span class="p">(</span><span class="n">load_day</span><span class="p">)</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">table_b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy and Paste Spaces Separated Text Into Excel]]></title>
    <link href="http://isunix.github.io/blog/2016/08/04/copy-and-paste-spaces-separated-text-into-excel/"/>
    <updated>2016-08-04T16:06:03+08:00</updated>
    <id>http://isunix.github.io/blog/2016/08/04/copy-and-paste-spaces-separated-text-into-excel</id>
    <content type="html"><![CDATA[<p>最近经常需要把空格作为delimiter的文本粘贴到excel里。之前的做法是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat aa.log | awk <span class="s1">&#39;{print $1}&#39;</span> | pbcopy
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来一列一列地copy到excel里。甚是繁琐。 excel不会用的啊。</p>

<p>今天发现了原来还可以这么来操作。</p>

<ol>
  <li>把整个文件的内容粘贴到excel里去</li>
  <li>在excel中选中文件内容， 然后点击 Data-&gt;Text to Columns, 然后选择合适的delimiter去把文本内容给搞到excel中去。 </li>
</ol>

<p>Bingo！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Reading the Paper by Matei Zaharia and So On]]></title>
    <link href="http://isunix.github.io/blog/2016/07/29/notes-on-reading-the-paper-by-matei-zaharia-and-so-on/"/>
    <updated>2016-07-29T11:52:31+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/29/notes-on-reading-the-paper-by-matei-zaharia-and-so-on</id>
    <content type="html"><![CDATA[<p>This post keeps note for the paper “Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing” by Matei Zaharia and so on.</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Spark exposes RDDs through a language-integrated API where each dataset is represented as an object and transformations are invoked using methods on these objects.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Programmers start by defining one or more RDDs through transformations on data in stable storage (e.g., map and filter). They can then use these RDDs in actions, which are operations that return a value to the application or export data to a storage system. Examples of actions include count (which returns the number of elements in the dataset), collect (which returns the elements themselves), and save (which outputs the dataset to a storage system)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Spark computes RDDs lazily the first time they are used in an action, so that it can pipeline transformations</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">In addition, programmers can call a persist method to indicate which RDDs they want to reuse in future operations. Spark keeps persistent RDDs in memory by default, but it can spill them to disk if there is not enough RAM.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">RDDs themselves are statically typed objects parametrized by an element type. For example, RDD[Int] is an RDD of integers.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Transformations are lazy operations that define a new RDD, while actions launch a computation to return a value to the program or write data to external storage.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">map is a one-to-one mapping, while flatMap maps each input value to one or more outputs (similar to the map in MapReduce).</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Operations such as groupByKey, reduceByKey and sort automatically result in a hash or range partitioned RDD</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">We found it both sufficient and useful to classify dependencies into two types: narrow dependencies, where each partition of the parent RDD is used by at most one partition of the child RDD, wide dependencies, where multiple child partitions may depend on it. For example, map leads to a narrow dependency, while join leads to to wide dependencies (unless the parents are hash-partitioned).</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weird Things Happen When Scripts Executing With . And Passing Args With Getopts]]></title>
    <link href="http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts/"/>
    <updated>2016-07-19T17:43:32+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts</id>
    <content type="html"><![CDATA[<p>I have met the following scripts, say aa.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for aa.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for aa.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for aa.sh is $count&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for aa.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span><span class="sb">`</span>sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and bb.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;we are setting the OPTIND to 1&quot;</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for bb.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for bb.sh is $count&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and call.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">. ./aa.sh -t 2016-07-15 -c 4
</span><span class="line">. ./bb.sh -a 2016-07-20 -c 0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now execute the script, it will give out the followig result,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  <span class="nv">5</span>
</span><span class="line"><span class="o">=</span><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>bb.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which is definitely not what we want.</p>

<p>We can now change bb.sh into the following to test it again.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line">
</span><span class="line"><span class="nv">OPTIND</span><span class="o">=</span>1
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;we are setting the OPTIND to 1&quot;</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for bb.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for bb.sh is $count&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now “sh call.sh” will give out the following result,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  5
</span><span class="line">we are setting the OPTIND to 1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-20
</span><span class="line">count <span class="k">for </span>bb.sh is 0
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if we set the OPTIND to 3 now?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  5
</span><span class="line">we are setting the OPTIND to 3
</span><span class="line"><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>bb.sh is 0
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now the count value is changed to 0, however time is still not changed.</p>

<p>How to understand this? First let us look at the definitions of $OPTIND and getopts</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">A <span class="nb">getopts </span>construct usually comes packaged in a <span class="k">while </span>loop, which processes the options and
</span><span class="line">arguments one at a <span class="nb">time</span>, <span class="k">then </span>increments the implicit <span class="nv">$OPTIND</span> variable to point to the next.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In a while loop contaning getopts, getopts will use $OPTIND to find the arguments. if we call the script using “dot” which is the same as using “source”, $OPTIND will be global and available to the next script using getopts, and the next script will then can not find the right argument using $OPTIND now. </p>

<p>The solution here is, we can reset $OPTIND to 1 or we can call the script using “sh” rather than “.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Useful Shell Scripts]]></title>
    <link href="http://isunix.github.io/blog/2016/07/19/some-useful-shell-scripts/"/>
    <updated>2016-07-19T09:31:05+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/19/some-useful-shell-scripts</id>
    <content type="html"><![CDATA[<p>Here is a collection of those *sh commands I used that I think might be useful for later usage.</p>

<p>1.compare two directories and see if the differences between them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">diff -urNa <span class="nb">test </span>test1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.find all files with “old” in their filename, and then romove them</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">find ./ -name <span class="s2">&quot;*old*&quot;</span> -exec rm -i <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.grep</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">ll | grep <span class="s2">&quot;Jul 20&quot;</span> | awk <span class="s1">&#39;{print $NF}&#39;</span> | xargs -I , grep -i <span class="s2">&quot;Successfully&quot;</span> , | wc -l
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.substitute string in multiple files and backup the orignal files with “~”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">find . | xargs grep <span class="s2">&quot;good&quot;</span> -sl | uniq | xargs perl -pi~ -e <span class="s1">&#39;s/good/bad/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.substitute string in multiple files and backup the orignal files with extension “bak”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">find . | xargs grep <span class="s2">&quot;bad&quot;</span> -sl | uniq | xargs perl -i.bak -p -e <span class="s1">&#39;s/bad/excellent/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After checking that everything is ok, we can then remove those “bak” files</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">find ./ -name <span class="s2">&quot;*bak*&quot;</span> -exec rm -i <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.grep lines before and aftern certain matching line</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">grep -C 4 <span class="s1">&#39;. $kpi_shell $load_date&#39;</span> orig_cron_kpi.sh  | grep <span class="s2">&quot;\.sh&quot;</span> | less
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.grep lines in one file while not in the other.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">grep -F -x -v -f bb.txt aa.txt | grep <span class="s2">&quot;\.sh&quot;</span> | less
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么去除windows编辑过的文件中的^M字符]]></title>
    <link href="http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu/"/>
    <updated>2016-07-18T08:12:34+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu</id>
    <content type="html"><![CDATA[<p>We can use the following two methods to get rid of the “^M” character in a file which was edited on windows using vim.</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:%s/<span class="se">\r</span>//g
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:%s/ctrl-v ctrl-m//g
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The second one means pressing ctrl-v, then ctrl-m first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regexp_extract Usage in Impala]]></title>
    <link href="http://isunix.github.io/blog/2016/07/15/regexp-extract-usage-in-impala/"/>
    <updated>2016-07-15T10:43:30+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/15/regexp-extract-usage-in-impala</id>
    <content type="html"><![CDATA[<p>I need to use the regexp_extract function to extract certain parts of a string recently when I am doing big data analysis.</p>

<p>http://www.cloudera.com/documentation/archive/impala/2-x/2-1-x/topics/impala_string_functions.html, this link shows us how to do, but sadly regex in impala is a little different from those in perl or python, so I have to look through the page and try again.</p>

<p>I keep a note here for regexp_extract for my later own usage.</p>

<p>Say I have a string </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%2C%22hidisp%22%3A27%2C%22quietMode</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I want to extract the number followd by “hidisp” and ‘”:’, which is number ‘27’ here.</p>

<p>As describe in the above document, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Because the impala-shell interpreter uses the \ character for escaping, use \\ to represent the regular expression escape character in any regular expressions that you submit through impala-shell</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So if we want to represent the numbers here, we have use ‘\d’ rather than just ‘\d’ which is a standard in other programming  languages.</p>

<p>regexp_extract usage is in the following format,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">regexp_extract(string subject, string pattern, int index)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>group 0 matches the full pattern string, including the portion outside any () group, so</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22hidisp%22%3A27%2C%22quietMode', 'hidisp%22%3A(\\d+)', 0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>this will give out:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">hidisp%22%3A27</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>group 1 matches just the contents inside the first () group in the pattern string:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22hidisp%22%3A27%2C%22quietMode', 'hidisp%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>will give out</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">27</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And for the support of non-greedy matches using .*?, take the following string as an example,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How to extract the first match number for “reboot”, we can get the result in the following ways</p>

<p>a. without any “.*?” around the string pattern ‘reboot%22%3A(\d+)’, which is the easiest way I think </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', 'reboot%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or </p>

<p>b. append “.*?” right after the string pattern ‘reboot%22%3A(\d+)’,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', 'reboot%22%3A(\\d+).*?', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or</p>

<p>c. surround the string pattern ‘reboot%22%3A(\d+)’ with ‘.*?’ at both sides</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', '.*?reboot%22%3A(\\d+).*?', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So after the tree ways to get the leftmost match, we can easily guess how to get the rifht-most match.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', '.*?reboot%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That is just by appending the string pattern with ‘.*?’ at its left side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux: Error While Loading Shared Libraries: libevent-2.0.so.5]]></title>
    <link href="http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5/"/>
    <updated>2016-07-12T10:34:50+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5</id>
    <content type="html"><![CDATA[<p>I have kept a blog on tmux installation which is about missing module libevent, and the post is on:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://isunix.github.io/blog/2014/12/24/libevent-not-found-error-while-install-tmux/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Recently even after I install the livevent module, I still get the following errors after installing tmux and then running tmux:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"> ./tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I installed the libevent lib in $HOME/local/lib, and tmux says it can not find the library, Weird. With the help of one of my colleague, this problem is solved.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$HOME/local&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:<span class="nv">$DIR</span>/lib
</span><span class="line">./configure --prefix<span class="o">=</span><span class="nv">$DIR</span> <span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I$DIR/include&quot;</span> <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L$DIR/lib&quot;</span>
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, the point here is setting the “LD_LIBRARY_PATH” variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Hive on Mac]]></title>
    <link href="http://isunix.github.io/blog/2016/07/02/configure-hive-on-mac/"/>
    <updated>2016-07-02T18:14:13+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/02/configure-hive-on-mac</id>
    <content type="html"><![CDATA[<p>花了很长的时间在hive的安装和配置上， 先把有用的链接记下来， 等有空了再详细的写下安装过程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/5016505/mysql-grant-all-privileges-on-database
</span><span class="line">https://cwiki.apache.org/confluence/display/Hive/AdminManual+Configuration
</span><span class="line">http://stackoverflow.com/questions/27099898/java-net-urisyntaxexception-when-starting-hive
</span><span class="line">https://noobergeek.wordpress.com/2013/11/09/simplest-way-to-install-and-configure-hive-for-mac-osx-lion/
</span><span class="line">https://cwiki.apache.org/confluence/display/Hive/GettingStarted
</span><span class="line">https://amodernstory.com/2015/03/29/installing-hive-on-mac/
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Hadoop on Mac]]></title>
    <link href="http://isunix.github.io/blog/2016/07/02/install-hadoop-on-mac/"/>
    <updated>2016-07-02T16:16:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/02/install-hadoop-on-mac</id>
    <content type="html"><![CDATA[<p>这篇blog是关于如何在mac上安装hadoop的。 参考书目是《hadoop 核心技术》 by 翟周伟， 还有这篇博文， http://dongfeiwww.com/hadoop/2014/09/05/hadoop-on-mac/。</p>

<p>要要注意的点是， 如果是安装hadoop在／usr/local这种路径下， 最后跑start-dfs.sh这种脚本的时候， 是需要sudo权限的， 所以可以按照“核心技术”这本书来， 把hadoop解压到本地一个不需要sudo权限去访问执行的地方。</p>

<p>第二点就是start-all.sh这个脚本被deprecated的了， 推荐使用的是，start-dfs.sh and start-yarn.sh这种单独的脚本。</p>

<p>第三就是运行下ssh localhost看能不能连上。</p>

<p>最后， 配置成功后能从web页面访问到的端口有</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://localhost:50090/status.html      (Secondary NameNode status)
</span><span class="line">http://localhost:50070/dfshealth.html#tab-overview    (hdfs status)
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Query Sequence]]></title>
    <link href="http://isunix.github.io/blog/2016/06/28/sql-query-sequence/"/>
    <updated>2016-06-28T07:58:08+08:00</updated>
    <id>http://isunix.github.io/blog/2016/06/28/sql-query-sequence</id>
    <content type="html"><![CDATA[<p>A sql query will be executed in the following steps:</p>

<ol>
  <li>FROM</li>
  <li>ON</li>
  <li>JOIN</li>
  <li>WHERE</li>
  <li>GROUP BY</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>WITH {CUBE</td>
          <td>ROLLUP}</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>HAVING</li>
  <li>SELECT</li>
  <li>DISTINCT</li>
  <li>ORDER BY</li>
  <li>LIMIT</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Shell Commands]]></title>
    <link href="http://isunix.github.io/blog/2016/05/30/useful-shell-commands/"/>
    <updated>2016-05-30T16:13:41+08:00</updated>
    <id>http://isunix.github.io/blog/2016/05/30/useful-shell-commands</id>
    <content type="html"><![CDATA[<p>1.In bash shell, it provides us with two options to make debugging very much easier. “-v” and “-x”.</p>

<p>Take the following small script for an example.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;You are using $0&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Hello $*&quot;</span>
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If run with the follwoing “-v” option, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">bash -v aa.sh steven
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We will get the following result,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;You are using $0&quot;</span>
</span><span class="line">You are using aa.sh
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Hello $*&quot;</span>
</span><span class="line">Hello steven
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If run with the “-x” option, we will get the following result.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">+ <span class="nb">echo</span> <span class="s1">&#39;You are using aa.sh&#39;</span>
</span><span class="line">You are using aa.sh
</span><span class="line">+ <span class="nb">echo</span> <span class="s1">&#39;Hello steven&#39;</span>
</span><span class="line">Hello steven
</span><span class="line">+ <span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, “-x” might be more helpful to us.</p>

<p>2.We can use “read -p” to read from the user input and store the input into an variable. Like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">read</span> -p <span class="s2">&quot;Enter your name: &quot;</span> name
</span><span class="line"><span class="nb">echo</span> <span class="nv">$name</span>
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.use the “-s” option with “read” to control the visibility of the entered text.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nb">read</span> -p <span class="s2">&quot;May I ask your name: &quot;</span> name
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;Hello $name&quot;</span>
</span><span class="line"><span class="nb">read</span> -sn1 -p <span class="s2">&quot;Press any key to exit&quot;</span>
</span><span class="line"><span class="nb">echo</span>
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Grep with “-c” option to list the number of items grepped.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics of Linux Screen]]></title>
    <link href="http://isunix.github.io/blog/2016/05/26/basics-of-linux-screen/"/>
    <updated>2016-05-26T14:52:24+08:00</updated>
    <id>http://isunix.github.io/blog/2016/05/26/basics-of-linux-screen</id>
    <content type="html"><![CDATA[<p>A basic of introduction of linux screen.</p>

<p>1.To create a new screen session without the name specified, just type </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">screen
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.To create a new screen session with the name specified, just type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">screen -S sessionname
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.To detach from a session, type “Ctrl-A” and “d“</p>

<p>4.To list all the sessions , type “screen -ls”</p>

<p>5.To re-attach to a session, type “screen -r sessionname”</p>

<p>6.To switch between windows, type “Ctrl-A” then then enter the window number. Or just “Ctrl-A” followed by pressing “p” or “n”.</p>

<p>7.Type “Ctrl-A” and “?” without quotes. Then you will see all commands or parameters on screen.</p>

<p>8.Type “Ctrl-A” and “:” without quotes, then enter “sessionname NAME” to rename an existing sessioin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Perl Modules Through Cpanm]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm/"/>
    <updated>2016-03-31T16:54:00+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm</id>
    <content type="html"><![CDATA[<p>I want to update all the installed Perl modules using cpanm. Here is a method I found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cpan-outdated -p | cpanm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We have to first download the module “http://search.cpan.org/CPAN/authors/id/T/TO/TOKUHIROM/App-cpanoutdated-0.24.tar.gz” and then issue the command to update the modules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">pip</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">pip</span><span class="o">.</span><span class="n">get_installed_distributions</span><span class="p">():</span>
</span><span class="line">    <span class="n">call</span><span class="p">(</span><span class="s">&quot;pip install --upgrade &quot;</span> <span class="o">+</span> <span class="n">dist</span><span class="o">.</span><span class="n">project_name</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort an Object by One Key Using Js]]></title>
    <link href="http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js/"/>
    <updated>2016-03-09T09:41:03+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js</id>
    <content type="html"><![CDATA[<p>I have something like the following,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I want to find out the one with the earliest time, in the above code, it is “2016/03/02 01:12”, and the corresponding item is “sophos”, here is the realization is js code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sophos</span><span class="p">,</span> <span class="nx">mcafee</span><span class="p">,</span> <span class="nx">trend</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">compare</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source Terminal Applications]]></title>
    <link href="http://isunix.github.io/blog/2016/02/19/open-source-terminal-applications/"/>
    <updated>2016-02-19T09:44:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/02/19/open-source-terminal-applications</id>
    <content type="html"><![CDATA[<p>Found some interesting posts about tools available on linux, will collect them here.</p>

<p>1.15 Greatest Open Source Terminal Applications Of 2012</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/open-source/best-terminal-applications-for-linux-unix-macosx/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.nixCraft (a site which has interesting posts on linux/unix):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.How to use awk in bash scripting.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.cyberciti.biz/faq/bash-scripting-using-awk/
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界观祛魅]]></title>
    <link href="http://isunix.github.io/blog/2016/01/21/shi-jie-guan-qu-mei/"/>
    <updated>2016-01-21T15:00:05+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/21/shi-jie-guan-qu-mei</id>
    <content type="html"><![CDATA[<p>这是一篇同人于野的«智识分子»第一篇”世界观祛魅”的读书笔记。</p>

<p>1.模仿的雪崩效应:</p>

<p>说的是许多人的行动， 其实是为了模仿而模仿。所以对于一些不好的事件，为了防止事情的方法，一个很好的方法是抓带头人。</p>

<p>这让我想起自己所在公司的一些事情。比如最近很多同事开始在上班的时间开始吃瓜子，其他人也开始跟着吃了，于是整个office一篇吃瓜子的声音还有瓜子的味道。</p>

<p>如果一开始就禁止这种事情，或者稍微警告下带头的人， 我想整个办公室的秩序会好很多。</p>

<p>就如作者所说， “长治久安的上策当然是创造条件让人从一开始就不会犯罪， 如果做不到这一点，那么就得维稳， 而维稳不关心有没有第一个，只关心有没有第二个”.</p>

<p>2.国家不是家庭:</p>

<p>要求对富人持续性的加税， 乃至产生均贫富的思想， 这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是”都是一个国家的人，贫富差距这么大是否道德”, 而应该是”什么样的税收制度有利于经济增长”.</p>

<p>以上是作者的原话， 其实我的想法是，有的时候一个社会普遍施行的某些措施，并不一定就是有道理的，活着就是对国家的发展有利的， 但是有的时候就得照顾到某些特定人群的利益， 给某些特定人群以特定的关怀。</p>

<p>3.要啥有啥其实很没意思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Lines by Length]]></title>
    <link href="http://isunix.github.io/blog/2016/01/20/sort-lines-by-length/"/>
    <updated>2016-01-20T10:14:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/20/sort-lines-by-length</id>
    <content type="html"><![CDATA[<p>I have a file containing quite many lines of strings and I want to sort them by line length. Here is how.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat <span class="nv">$file</span> | awk <span class="s1">&#39;{ print length($0) &quot; &quot; $0; }&#39;</span> | sort -r -n | cut -d <span class="s1">&#39; &#39;</span> -f 2- | less
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
