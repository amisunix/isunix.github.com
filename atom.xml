<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2019-08-30T14:08:34+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一些关于RNN和LSTM和GRU的阅读材料]]></title>
    <link href="http://isunix.github.io/blog/2019/08/27/%5B%3F%5D-xie-guan-yu-rnnhe-lstmhe-grude-yue-du-cai-liao/"/>
    <updated>2019-08-27T15:40:38+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/27/[?]-xie-guan-yu-rnnhe-lstmhe-grude-yue-du-cai-liao</id>
    <content type="html"><![CDATA[<p><a href="https://towardsdatascience.com/illustrated-guide-to-recurrent-neural-networks-79e5eb8049c9">Illustrated Guide to Recurrent Neural Networks</a></p>

<p><a href="https://towardsdatascience.com/illustrated-guide-to-lstms-and-gru-s-a-step-by-step-explanation-44e9eb85bf21">Illustrated Guide to LSTM’s and GRU’s: A step by step explanation</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/37204589">直觉理解LSTM和GRU</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/28687529">RNN梯度消失和爆炸的原因</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/28749444">LSTM如何解决梯度消失问题</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/32481747">人人都能看懂的GRU</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/32085405">人人都能看懂的LSTM</a></p>

<p><a href="http://kyonhuang.top/Andrew-Ng-Deep-Learning-notes/#/Sequence_Models/循环序列模型">循环序列模型</a></p>

<p><a href="http://www.ai-start.com/dl2017/html/lesson5-week1.html">第五门课 序列模型(Sequence Models)</a></p>

<p><a href="https://machinelearningmastery.com/time-series-prediction-lstm-recurrent-neural-networks-python-keras/">Time Series Prediction with LSTM Recurrent Neural Networks in Python with Keras</a></p>

<p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a></p>

<p><a href="http://www.wildml.com/2015/10/recurrent-neural-network-tutorial-part-4-implementing-a-grulstm-rnn-with-python-and-theano/">Implementing a GRU/LSTM RNN with Python and Theano</a></p>

<p><a href="http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-1-introduction-to-rnns/">Introduction to RNNs</a></p>

<p><a href="http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/">Implementing a Neural Network from Scratch in Python</a></p>

<p><a href="http://www.wildml.com/2015/09/speeding-up-your-neural-network-with-theano-and-the-gpu/">Speeding up your Neural Network with Theano and the GPU</a></p>

<p><a href="http://cs231n.github.io/optimization-2/">CS231 On Gradients And BackPropagation</a></p>

<p><a href="http://colah.github.io/posts/2015-08-Backprop/">Calculus on Computational Graphs: Backpropagation</a></p>

<p><a href="http://neuralnetworksanddeeplearning.com/chap2.html">How the backpropagation algorithm works</a></p>

<p><a href="http://cs231n.github.io/python-numpy-tutorial/">Numpy Tutorial From CS231</a></p>

<p><a href="https://www.leiphone.com/news/201908/wq1m4fNK8LNuG0Rs.html">卷积神经网络数学原理解析</a></p>

<p><a href="https://christophm.github.io/interpretable-ml-book/">Interpretable Machine Learning</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何查看Linux中的内存占用情况]]></title>
    <link href="http://isunix.github.io/blog/2019/08/27/ru-he-cha-kan-linuxzhong-de-nei-cun-zhan-yong-qing-kuang/"/>
    <updated>2019-08-27T11:17:03+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/27/ru-he-cha-kan-linuxzhong-de-nei-cun-zhan-yong-qing-kuang</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ps -o pid,user,%mem,command ax | awk <span class="s1">&#39;($3 &gt; 0){print}&#39;</span> | sort -b -k3 -r
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以使用如上的命令来看那些占用了内存的程序，并且排序.</p>

<p>也可以将上上面的命令搞成一个alias:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">alias </span><span class="nv">memcheck</span><span class="o">=</span><span class="s2">&quot;ps -o pid,user,%mem,command ax | awk &#39;(\$3 &gt; 0){print}&#39; | sort -b -k3 -r&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark中排序输出]]></title>
    <link href="http://isunix.github.io/blog/2019/08/27/sparkzhong-pai-xu-shu-chu/"/>
    <updated>2019-08-27T10:11:02+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/27/sparkzhong-pai-xu-shu-chu</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># initialize pyspark</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">json</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">set_printoptions</span><span class="p">(</span><span class="n">suppress</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">findspark</span>
</span><span class="line"><span class="n">findspark</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pyspark</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
</span><span class="line"><span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="o">.</span><span class="n">builder</span> \
</span><span class="line">    <span class="o">.</span><span class="n">appName</span><span class="p">(</span><span class="s">&#39;PySpark-Analysis&#39;</span><span class="p">)</span> \
</span><span class="line">    <span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="s">&quot;spark.executor.memory&quot;</span><span class="p">,</span> <span class="s">&quot;3g&quot;</span><span class="p">)</span> \
</span><span class="line">    <span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="s">&quot;spark.executor.cores&quot;</span><span class="p">,</span> <span class="s">&quot;8&quot;</span><span class="p">)</span> \
</span><span class="line">    <span class="o">.</span><span class="n">getOrCreate</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="n">folder</span> <span class="o">=</span> <span class="s">&quot;xxxx&quot;</span>
</span><span class="line"><span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;one-big.tsv&quot;</span>
</span><span class="line"><span class="nb">file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span><span class="o">.</span><span class="n">rdd</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">r</span><span class="p">:</span> <span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">line</span><span class="p">:</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">toDF</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">orderBy</span><span class="p">(</span><span class="s">&quot;_1&quot;</span><span class="p">,</span> <span class="s">&quot;_2&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">coalesce</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="o">.</span><span class="n">csv</span><span class="p">(</span><span class="s">&quot;xxx2&quot;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Science at the Command Line]]></title>
    <link href="http://isunix.github.io/blog/2019/08/14/data-science-at-the-command-line/"/>
    <updated>2019-08-14T14:13:16+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/14/data-science-at-the-command-line</id>
    <content type="html"><![CDATA[<p>本文是关于如何使用命令行的方式，来更好的认识你的数据.</p>

<h2 id="section">1. 常用的命令和工具:</h2>

<ul>
  <li>
    <p>基本操作命令</p>

    <p><code>shell
cd, mv, cat, ls, wc, rm, sort, uniq, echo
printf, pwd, mkdir, dirname, mktemp， find
mail, sendmail, crontab, export, ps
zip, du, df, tar, split
exec, type, readlink
</code></p>
  </li>
  <li>
    <p>基本工具</p>

    <p><code>shell
grep, egrep, pcregrep, ack
curl, wget
ssh, tmux
awk, sed
</code></p>
  </li>
  <li>
    <p>辅助命令</p>

    <p><code>shell
jq, git,
man, tldr
conda, pip
</code></p>
  </li>
  <li>
    <p>辅助工具</p>

    <p><code>shell
zsh, oh-my-zsh, sexy-bash-prompt
</code></p>
  </li>
  <li>
    <p>瑞士军刀</p>
  </li>
</ul>

<p><code>shell
  Perl
 </code></p>

<h2 id="section-1">2. 一些应用场景:</h2>

<ul>
  <li>
    <p>使用 <code>split</code> 按照特定的行数或者大小，将一个文本进行分割</p>

    <p><code>shell
# Split a file, each split having 10 lines (except the last split)
split -l 10 filename
# plit a file with 512 bytes in each split
split -b 512 filename
</code></p>
  </li>
  <li>
    <p>使用 <code>grep -x -f</code>  找到两个文件中的相同的行</p>

    <p><code>shell
grep -x -f  file1 file2
</code></p>
  </li>
  <li>
    <p>使用 <code>grep</code> 或者 <code>egrep</code> 或者 <code>pcregrep</code> 或者 <code>ack</code> 并且辅助以正则表达式， 进行复杂的文本搜索</p>

    <p><code>shell
# print file name with the corresponding line number for each match
grep -Hn search_string path/to/file
# invert match for excluding specific strings:
grep -v search_string path/to/file
# search in case-insensitive mode:
grep -i search_string path/to/file
# search consecutive 9 numbers
grep -E '\d{9}' path/to/file
# search consecutive 9 numbers and grab it
grep -Eo '\d{9}' path/to/file
# recursively search
grep -eilr "\bamazfit\b\|\bwatch\b" path/to/dir
</code></p>
  </li>
  <li>
    <p><code>ssh</code> 登陆远程机器并且同时运行远程操作命令</p>

    <p><code>shell
# ssh 远程执行命令
ssh yyy@xxx.xxx.xxx.xxx "df -h"
# ssh 使用key文件登陆， 并且做远程的端口转发
ssh -L 9007:${hive_server} ${xiaomi_host} -N -i ${keyfile}
</code></p>
  </li>
  <li>
    <p><code>awk</code> 按照特定的分隔符，查看文本有多少列， 查看想要看的列，按照条件进行筛选</p>

    <p><code>shell
# 以空格做分隔符， 并且打印出第二列小于20的行
awk '($2 &lt; 20){print}'
# 以'#' 做分隔符， 并且打印出第二列小于20的行
awk -F '#' '($2&gt;=8){print}'
# 以',' 做分隔符， 并且打印出列数
awk -F"," '{print NF}'
# 有多个判断条件
awk '{if ($4&lt;1 &amp;&amp; $4&gt;=0.85 &amp;&amp; $2 &gt;= 0.001) print $7}'
</code></p>
  </li>
  <li>
    <p><code>sort</code> 结合 <code>uniq</code> 去重</p>

    <p><code>shell
du -cks * | sort | uniq | wc -l
</code></p>
  </li>
  <li>
    <p><code>xargs</code> 传递参数</p>

    <p><code>shell
# xargs 结合 kill 来干掉进程
ps auxww | grep file | grep -v grep | awk '{print $2}' | xargs kill -9
# 删除找到的文件
find . -name "*.txt" | xargs -I , rm -rf ,
</code></p>
  </li>
  <li>
    <p>使用 <code>jq</code> 命令来在命令行下更好的查看json文件</p>

    <p><code>shell
cat file.json | jq
</code></p>
  </li>
  <li>
    <p>非常好用的 <code>|</code></p>

    <p><code>shell
xx | yy | zz | dd | ee | ff | gg | hh
</code></p>
  </li>
</ul>

<h2 id="section-2">3. 参考资料:</h2>

<ul>
  <li>
    <p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux 菜鸟教程</a></p>
  </li>
  <li>
    <p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 - 教程</a></p>
  </li>
  <li>
    <p><a href="https://github.com/alebcay/awesome-shell">Awesome-Shell</a></p>
  </li>
</ul>

<p>参考链接:</p>

<ul>
  <li>
    <p><a href="https://csvkit.readthedocs.io/en/latest/tutorial/1_getting_started.html#installing-csvkit">csvkit</a></p>
  </li>
  <li>
    <p><a href="[https://www.datascienceatthecommandline.com](https://www.datascienceatthecommandline.com/)">Data Science at the Command Line</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradient Boosting Algorithm]]></title>
    <link href="http://isunix.github.io/blog/2019/08/14/gradient-boosting-algorithm/"/>
    <updated>2019-08-14T13:51:36+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/14/gradient-boosting-algorithm</id>
    <content type="html"><![CDATA[<p>Gradient Boosting Algorithm 算法参考链接：</p>

<ul>
  <li><a href="https://arxiv.org/pdf/1603.02754v1.pdf">XGBoost: A Scalable Tree Boosting System</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2017/06/which-algorithm-takes-the-crown-light-gbm-vs-xgboost/">Which algorithm takes the crown: Light GBM vs XGBOOST?</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2015/09/complete-guide-boosting-methods/">Learn Gradient Boosting Algorithm for better predictions (with codes in R)</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2015/05/boosting-algorithms-simplified/">Getting smart with Machine Learning – AdaBoost and Gradient Boost</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2015/11/quick-introduction-boosting-algorithms-machine-learning/">Quick Introduction to Boosting Algorithms in Machine Learning</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/">Complete Machine Learning Guide to Parameter Tuning in Gradient Boosting (GBM) in Python</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2016/03/complete-guide-parameter-tuning-xgboost-with-codes-python/">Complete Guide to Parameter Tuning in XGBoost with codes in Python</a></li>
  <li><a href="https://segmentfault.com/a/1190000014040317">XGboost数据比赛实战之调参篇</a></li>
  <li><a href="http://www.sohu.com/a/226265476_609569">通俗的将Xgboost的原理讲明白</a></li>
  <li><a href="https://blog.csdn.net/app_12062011/article/details/52136117">决策树</a> 和 <a href="https://blog.csdn.net/zhaocj/article/details/50503450">决策树源码剖析</a></li>
  <li><a href="[http://matafight.github.io/2017/03/14/XGBoost-%E7%AE%80%E4%BB%8B/](http://matafight.github.io/2017/03/14/XGBoost-简介/)">XGBoost 笔记</a></li>
  <li><a href="https://blog.csdn.net/liuzonghao88/article/details/88808408">XGBoost如何避免过拟合</a></li>
  <li><a href="https://blog.csdn.net/u012735708/article/details/83651832">XGBoost调参笔记</a></li>
  <li><a href="https://blog.csdn.net/a358463121/article/details/68617389">xgboost中的数学原理</a></li>
  <li><a href="https://blog.csdn.net/sb19931201/article/details/52557382">xgboost入门与实战</a></li>
  <li><a href="https://blog.csdn.net/xiaocong1990/article/details/55107239">XGBoost参数调优</a></li>
  <li><a href="https://blog.csdn.net/Totoro1745/article/details/53328725">xgboost：一个纯小白的学习历程</a></li>
  <li><a href="https://blog.csdn.net/github_38414650/article/details/76061893">通俗、有逻辑的写一篇说下Xgboost的原理</a></li>
  <li><a href="https://towardsdatascience.com/boosting-algorithm-gbm-97737c63daa3">Boosting algorithm: GBM</a></li>
  <li><a href="https://www.imooc.com/article/43784?block_id=tuijian_wz">LightGBM 调参方法</a></li>
  <li><a href="https://www.kaggle.com/c/LANL-Earthquake-Prediction/discussion/89909">Good summary of XGBoost vs CatBoost vs LightGBM</a></li>
  <li><a href="https://www.kaggle.com/samratp/lightgbm-xgboost-catboost">LightGBM + XGBoost + Catboost</a></li>
  <li><a href="https://datascience.stackexchange.com/questions/49567/lightgbm-vs-xgboost-vs-catboost">lightgbm-vs-xgboost-vs-catboost</a></li>
  <li><a href="https://medium.com/kaggle-nyc/gradient-boosting-decision-trees-xgboost-vs-lightgbm-and-catboost-72df6979e0bb">Gradient Boosting Decision trees: XGBoost vs LightGBM (and catboost)</a></li>
  <li><a href="https://towardsdatascience.com/catboost-vs-light-gbm-vs-xgboost-5f93620723db">CatBoost vs. Light GBM vs. XGBoost</a></li>
  <li><a href="https://blog.csdn.net/LrS62520kV/article/details/79620615">CatBoost vs. Light GBM vs. XGBoost 的中文翻译</a></li>
  <li><a href="https://stackoverflow.com/questions/44937698/lightgbm-oserror-library-not-loaded">关于lightgbm的安装</a></li>
  <li><a href="https://towardsdatascience.com/custom-loss-functions-for-gradient-boosting-f79c1b40466d">Custom Loss Functions for Gradient Boosting</a></li>
  <li><a href="https://github.com/Microsoft/LightGBM/blob/master/examples/README.md#machine-learning-challenge-winning-solutions">machine-learning-challenge-winning-solutions-lightgbm-winned</a></li>
  <li><a href="https://www.jianshu.com/p/b4ac0596e5ef">LightGBM 如何调参</a></li>
  <li><a href="https://www.cnblogs.com/ljygoodgoodstudydaydayup/p/6665239.html">xgboost调参</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于P值]]></title>
    <link href="http://isunix.github.io/blog/2019/08/07/guan-yu-pzhi/"/>
    <updated>2019-08-07T13:45:59+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/07/guan-yu-pzhi</id>
    <content type="html"><![CDATA[<p>参考链接:</p>

<p><a href="https://towardsdatascience.com/p-values-explained-by-data-scientist-f40a746cfc8">p值是什么？数据科学家用最简单的方式告诉你</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Spark的MLlib进行机器学习]]></title>
    <link href="http://isunix.github.io/blog/2019/08/01/shi-yong-sparkde-mllibjin-xing-ji-qi-xue-xi/"/>
    <updated>2019-08-01T17:55:54+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/01/shi-yong-sparkde-mllibjin-xing-ji-qi-xue-xi</id>
    <content type="html"><![CDATA[<p>1.比如我们有个 case class</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">CaseClassTest</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们通过使用<code>mapPartitions</code>来进行操作， 注意此处<code>mapPartitions</code>的用法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">mapResult</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">input</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)).</span><span class="n">mapPartitions</span> <span class="o">{</span>
</span><span class="line">      <span class="n">iter</span> <span class="k">=&gt;</span>
</span><span class="line">        <span class="n">iter</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">          <span class="n">iterms</span> <span class="k">=&gt;</span> <span class="nc">CaseClassTest</span><span class="o">(</span><span class="n">iterms</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">iterms</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.reduceByKey<code>  和 </code>case` 的用法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">data</span> <span class="k">=</span> <span class="n">gowalla</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class="line">      <span class="n">check</span><span class="k">:</span> <span class="kt">CheckIn</span> <span class="o">=&gt;</span> <span class="o">(</span><span class="n">check</span><span class="o">.</span><span class="n">user</span><span class="o">,</span> <span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="nc">Set</span><span class="o">(</span><span class="n">check</span><span class="o">.</span><span class="n">time</span><span class="o">),</span> <span class="nc">Set</span><span class="o">(</span><span class="n">check</span><span class="o">.</span><span class="n">location</span><span class="o">)))</span>
</span><span class="line">    <span class="o">}.</span><span class="n">rdd</span><span class="o">.</span><span class="n">reduceByKey</span><span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="n">_1</span> <span class="o">+</span> <span class="n">right</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">left</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">union</span><span class="o">(</span><span class="n">right</span><span class="o">.</span><span class="n">_2</span><span class="o">),</span><span class="n">left</span><span class="o">.</span><span class="n">_3</span><span class="o">.</span><span class="n">union</span><span class="o">(</span><span class="n">right</span><span class="o">.</span><span class="n">_3</span><span class="o">))</span>
</span><span class="line">    <span class="o">}.</span><span class="n">map</span><span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="o">(</span><span class="n">checkins</span><span class="o">,</span> <span class="n">days</span><span class="k">:</span><span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">locations</span><span class="k">:</span><span class="kt">Set</span><span class="o">[</span><span class="kt">String</span><span class="o">]))</span> <span class="k">=&gt;</span>
</span><span class="line">        <span class="nc">Vectors</span><span class="o">.</span><span class="n">dense</span><span class="o">(</span><span class="n">checkins</span><span class="o">.</span><span class="n">toDouble</span><span class="o">,</span> <span class="n">days</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">toDouble</span><span class="o">,</span> <span class="n">locations</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">toDouble</span><span class="o">)</span>
</span><span class="line">        <span class="c1">//次数，天数，地点数</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>reduceByKey</code> 这里是求 <code>(1L, Set(check.time), Set(check.location))</code> 中的一个元素累加，第二个元素求并集，第三个元素也是求并集. <code>case</code> 的作用是让输入符合规范； 注意在 <code>map</code> 中，我们可以限定指示变量的类型， 比如这里的 <code>check: CheckIn =&gt;</code></p>

<h4 id="section">参考</h4>

<ol>
  <li>Spark机器学习进阶实战</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上单机起PySpark遇到的问题debug]]></title>
    <link href="http://isunix.github.io/blog/2019/07/30/macshang-dan-ji-qi-pysparkyu-dao-de-wen-ti-debug/"/>
    <updated>2019-07-30T10:38:15+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/30/macshang-dan-ji-qi-pysparkyu-dao-de-wen-ti-debug</id>
    <content type="html"><![CDATA[<p>今天在本地起个<code>pyspark</code> 发现总是遇到</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Caused by: java.net.UnknownHostException: master: nodename nor servname provided, or not known</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>尝试了设置 <code>SPARK_HOME</code>, <code>HADOOP_HOME</code> 等变量之后，依然不起作用。</p>

<p>最后发现是要修改 <code>SPARK_HOME</code> 里面的配置文件<code>spark-env.sh</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">SPARK_MASTER_IP</span><span class="o">=</span>StevenMac
</span><span class="line"><span class="nb">export </span><span class="nv">SPARK_LOCAL_IP</span><span class="o">=</span>StevenMac
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并且在<code>/etc/hosts</code> 文件中，加入如下的内容:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">127.0.0.1  StevenMac
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Bingo!!!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中不输出warning的信息]]></title>
    <link href="http://isunix.github.io/blog/2019/07/29/pythonzhong-bu-shu-chu-warningde-xin-xi/"/>
    <updated>2019-07-29T13:36:53+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/29/pythonzhong-bu-shu-chu-warningde-xin-xi</id>
    <content type="html"><![CDATA[<p>我们在<code>Python</code> 代码中，如果不想输出一些warnings, 可以在代码的一开始，加入如下的代码，就可以了.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">warnings</span>
</span><span class="line"><span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>filterwarnings 函数可以带参数的，上述的方式是把所有的warnings都给ignore了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VScode Remote 远程开发与调试]]></title>
    <link href="http://isunix.github.io/blog/2019/07/24/vscode-remote-yuan-cheng-kai-fa-yu-diao-shi/"/>
    <updated>2019-07-24T15:28:32+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/24/vscode-remote-yuan-cheng-kai-fa-yu-diao-shi</id>
    <content type="html"><![CDATA[<p>最近要给别的团队A，在AWS的EC2 上面去搭建一个算法的开发环境。鉴于自己之前在 AWS 上都是使用的Linux，在和团队A讨论了之后，最后决定建个Linux 的 EC2。 但是在基本的Python和数据分析和算法开发的环境都搭建好了之后，团队A的同学，又提了没有IDE, 影响效率。
没有办法，得考虑是不是换个windows 的 EC2 了。这个时候 <code>VS Code Remote Development</code> comes to my rescue.</p>

<p>可以参考下面的文章去看看怎么搞 <code>VS Code Remote Development</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">https://code.visualstudio.com/docs/remote/remote-overview
</span><span class="line">https://www.jianshu.com/p/0f2fb935a9a1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>试用了下来， 感觉这个 <code>VS Code Remote Development</code> 是个神器啊.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中从ndarray或者DataFrame里获取数据和标签]]></title>
    <link href="http://isunix.github.io/blog/2019/07/23/pythonzhong-cong-ndarrayhuo-zhe-dataframeli-huo-qu-shu-ju-he-biao-qian/"/>
    <updated>2019-07-23T11:27:22+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/23/pythonzhong-cong-ndarrayhuo-zhe-dataframeli-huo-qu-shu-ju-he-biao-qian</id>
    <content type="html"><![CDATA[<p>如果我们有一个ndarray, 最后一列是label，前面几列是data, 我们可以通过如下的方式去获取数据(假如我们有9列):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">X = dataset[:,0:-1] or X = dataset[:,0:8]
</span><span class="line">Y = dataset[:,8]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们有个DataFrame, 我们可以通过如下的方式去获取:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">X, y = data.iloc[:,:-1], data.iloc[:,-1]</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对(大)数据分析工作的一些思考]]></title>
    <link href="http://isunix.github.io/blog/2019/07/20/dui-da-shu-ju-fen-xi-fen-xi-gong-zuo-de-%5B%3F%5D-xie-si-kao/"/>
    <updated>2019-07-20T08:50:36+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/20/dui-da-shu-ju-fen-xi-fen-xi-gong-zuo-de-[?]-xie-si-kao</id>
    <content type="html"><![CDATA[<p>如果把之前在Sonata Services做anti spam的工作也算是数据分析的话(确实跟数据分析沾边, 当时招聘的时候，就说懂机器学习是个加分项。 其实我们当时所做的工作，可以用”专家系统”来概括: 通过我们的知识和经验，去写规则和脚本去anti spam), 再加上在华米科技的这3年多做大数据分析的经历，也算是一个在数据分析领域，浸淫了快7年之久的人了， 如果再加上大学四年的”信息与计算科学”这个专业的学习经历的话(其实是3年，因为大一上半年是在农学类专业，大一下学期转到信息与计算科学)，那就是跟数据打交道了快10年的人了。往多了说10年，往少了说3年多， 也是该写点总结了。</p>

<p>BTW, 最近在看«谁说菜鸟不会数据分析»这本书， 发现自己的很多思考，跟书中提炼的内容，竟然不谋而合， 看来这本书还是不错的，哈哈哈。</p>

<p>从数据分析的技巧和方式上来看的话，可以分为:
1. 描述性数据分析
2. 探索性数据分析
3. 验证下数据分析</p>

<p>从数分析在日常工作中起到的作用来看的话，可以分为:
1. 现状分析
2. 原因分析
3. 预测分析</p>

<p>在«谁说菜鸟不会数据分析»这本书中，作者还总结了数据分析的6步曲:
1. 明确分析目的和思路
2. 数据收集
3. 数据处理
4. 数据分析
5. 数据展现
6. 报告撰写</p>

<p>其实，只要是在企业里做过数据分析的人， 这几步应该都是做过的，或许在报告的撰写这块， 不是每次都需要,尤其是做临时业务分析，并非每次都要写结论报告。</p>

<p>针对上面的6步曲，以我丰富的”描述性数据分析”的经验来看的话, 1-5都不难，只要受到专业的数学或者统计方面的训练， 加上一定的数据分析的专业工具和知识的培训，就可以上手了(如果一个人，连基本的统计概念都不清楚，你会对他做出的数据分析结果有信心么?)， 但是第6点的话， 就比较复杂了， 可能跟我这边”报告”撰写的少有关系，毕竟我们很多都是临时业务分析，不需要出报告， 而且报告的撰写，要有文字功底，要有优秀的思维能力， 要有不错的排版技术，要对业务足够的了解， 要对商业有一定的了解。</p>

<p>接下来说说数据分析的误区(参考自«谁说菜鸟不会数据分析»):
1. 分析目的不明确，为分析而分析
2. 缺乏业务知识，分析结果偏离实际
3. 一味追求使用高级方法，热衷研究模型</p>

<p>除了上面的3点，从我的经历中，我还要加上下面几点
1. 收集数据的时候，盲目相信数据的提供者； 比如有同事在找云端问数据在哪里的时候，云端说啥，他就认了，也不仔细思考，为啥用这个表，不用另外一个表？ 两个表有啥区别？ 
2. 分析出了数据，就完事了，也不去跟历史相似的数据，交叉比对，也不去想想我这个分析出来的额结果，有啥用？ 解决了数据需求者的问题了么？</p>

<p>接下来谈谈数据分析师的职业要求, 作者总结了以下几点
1. 懂业务
2. 懂管理
3. 懂分析
4. 懂工具
5. 懂设计</p>

<p>要做好一个数据分析师，难不难？ 很难。 很多人在 “懂分析” 和 “懂工具” 这块，就做的不好了， 而其实”懂分析” 和 “懂工具” 其实应该是做为一个数据分析师的硬性和基本的要求。做过几年数据分析的人，应该都能理解 “懂业务”, “懂管理” 和 “懂设计” 对于一个数据分析师来说，也是非常重要的。 “懂分析” 和 “懂工具” 决定了你能不能成为一个分析师，而是不是”懂业务”, “懂管理” 和 “懂设计”， 则决定了，你是不是一个好的分析师。 遗憾的是，我自己在后三点上，虽然有意培养自己在这块的能力和意识，但是并非优秀。 </p>

<p>作者也总结了数据分析师的基本素质，列在这里:
1. 态度严谨负责
2. 好奇心强烈
3. 逻辑思维清晰
4. 擅长模仿学习
5. 勇于创新</p>

<p>除了这5点，我想加上我自己的理解，毕竟数据分析师是要在公司或者各种机构里工作的，是要跟人合作的, 应该具备如下的素质:
1. 要有很好的workflow优化意识，很好的自我管理
2. 要有不错的编码能力和规范, 代码管理工具使用能力
3. 扎实的数理知识</p>

<p>看起来很像招聘贴子中的条款是吧？ 是的，但是这个就是现实， 数据分析师要到真实的环境中去，要成为一个合格的team player， 上面说的三点，最好是都具备。要不然，就落入下乘了。</p>

<p>Play with data and have fun!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark文件操作备忘]]></title>
    <link href="http://isunix.github.io/blog/2019/07/08/sparkwen-jian-cao-zuo-bei-wang/"/>
    <updated>2019-07-08T11:08:53+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/08/sparkwen-jian-cao-zuo-bei-wang</id>
    <content type="html"><![CDATA[<h3 id="repartition">读取一个文本文件，然后进行repartition:</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">spark.read.textFile<span class="o">(</span>path1<span class="o">)</span>.repartition<span class="o">(</span>1<span class="o">)</span>.write.text<span class="o">(</span>path2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="pyspark-dataframe">pyspark 基本的dataframe的操作:</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
</span><span class="line"><span class="n">master</span> <span class="o">=</span> <span class="s">&quot;local&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">parquet</span><span class="p">(</span><span class="n">raw_data</span><span class="p">)</span>
</span><span class="line"><span class="n">df_filtered</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;f1&#39;</span><span class="p">,</span> <span class="s">&#39;f2&#39;</span><span class="p">,</span> <span class="s">&#39;f3&#39;</span><span class="p">,</span> <span class="s">&#39;f4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f1&#39;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">1531670400</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f1&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">1532188800</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f2&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f3&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f4&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">pyspark.sql.functions</span> <span class="kn">as</span> <span class="nn">func</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">df_filtered</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&#39;f3&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">countDistinct</span><span class="p">(</span><span class="s">&#39;f1&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">result</span><span class="o">.</span><span class="n">rdd</span><span class="o">.</span><span class="n">repartition</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span><span class="o">.</span><span class="n">saveAsTextFile</span><span class="p">(</span><span class="n">path2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="spark">用Spark操作数据</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">diff</span> <span class="k">=</span> <span class="n">diff1</span><span class="o">.</span><span class="n">union</span><span class="o">(</span><span class="n">diff2</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">raw</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">path1</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 限定有3个字段, 存成df</span>
</span><span class="line"><span class="k">val</span> <span class="n">raw_df</span> <span class="k">=</span> <span class="n">raw</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">).</span><span class="n">length</span> <span class="o">==</span> <span class="mi">3</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)(</span><span class="mi">0</span><span class="o">),</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)(</span><span class="mi">1</span><span class="o">).</span><span class="n">toLong</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)(</span><span class="mi">2</span><span class="o">))).</span><span class="n">toDF</span><span class="o">(</span><span class="s">&quot;f1&quot;</span><span class="o">,</span> <span class="s">&quot;f2&quot;</span><span class="o">,</span> <span class="s">&quot;f3&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// join获取rawdata</span>
</span><span class="line"><span class="k">val</span> <span class="n">joined_diff</span> <span class="k">=</span> <span class="n">diff</span><span class="o">.</span><span class="n">join</span><span class="o">(</span><span class="n">raw_df</span><span class="o">,</span> <span class="n">diff</span><span class="o">(</span><span class="s">&quot;f1&quot;</span><span class="o">)</span> <span class="o">===</span> <span class="n">raw_df</span><span class="o">(</span><span class="s">&quot;f1&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">diff</span><span class="o">(</span><span class="s">&quot;f2&quot;</span><span class="o">)</span> <span class="o">===</span> <span class="n">raw_df</span><span class="o">(</span><span class="s">&quot;f2&quot;</span><span class="o">),</span> <span class="s">&quot;inner&quot;</span><span class="o">).</span><span class="n">toDF</span><span class="o">(</span><span class="s">&quot;f1&quot;</span><span class="o">,</span> <span class="s">&quot;f2&quot;</span><span class="o">,</span> <span class="s">&quot;f3&quot;</span><span class="o">,</span> <span class="s">&quot;f4&quot;</span><span class="o">,</span> <span class="s">&quot;f5&quot;</span><span class="o">,</span> <span class="s">&quot;f6&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 存数据</span>
</span><span class="line"><span class="k">val</span> <span class="n">result_df</span> <span class="k">=</span> <span class="n">joined_diff</span><span class="o">.</span><span class="n">select</span><span class="o">(</span><span class="n">$</span><span class="s">&quot;f1&quot;</span><span class="o">,</span> <span class="n">$</span><span class="s">&quot;f2&quot;</span><span class="o">,</span> <span class="n">$</span><span class="s">&quot;f3&quot;</span><span class="o">,</span> <span class="n">$</span><span class="s">&quot;f4&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">result_df</span><span class="o">.</span><span class="n">repartition</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">write</span><span class="o">.</span><span class="n">mode</span><span class="o">(</span><span class="s">&quot;overwrite&quot;</span><span class="o">).</span><span class="n">option</span><span class="o">(</span><span class="s">&quot;delimiter&quot;</span><span class="o">,</span> <span class="s">&quot;\t&quot;</span><span class="o">).</span><span class="n">csv</span><span class="o">(</span><span class="n">path2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习的流程图]]></title>
    <link href="http://isunix.github.io/blog/2019/07/07/ji-qi-xue-xi-de-liu-cheng-tu/"/>
    <updated>2019-07-07T07:32:15+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/07/ji-qi-xue-xi-de-liu-cheng-tu</id>
    <content type="html"><![CDATA[<p>下面的机器学习的一个流程图是从某视频中看到的，现在记录如下:</p>

<p><img src="http://isunix.github.io/images/sun/machine_learning_flow.001.jpeg" /></p>

<p>虽然说会的不难， 但是里面的每一步都很艰辛。比如被很多人认为脏活累活的”加载预处理数据集”这块，这个大家实践下来的基本共识是，这块就占了整个机器学习流程的60%到80%的工作量。所以，不要心存美好幻想，觉得机器学习或者人工智能是多么高大上和美好的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言的一些记录]]></title>
    <link href="http://isunix.github.io/blog/2019/07/05/ryu-yan-de-%5B%3F%5D-xie-ji-lu/"/>
    <updated>2019-07-05T08:00:01+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/05/ryu-yan-de-[?]-xie-ji-lu</id>
    <content type="html"><![CDATA[<p>在R语言中，如果我们有一个<code>vector</code> 叫 <code>x</code>, <code>x</code> 的值中有 <code>NA</code>，如果我们想要过滤掉 <code>x</code> 中的 <code>NA</code>, 并把过滤后的结果，赋值给变量 <code>y</code>， 可以如下操作:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">y <span class="o">&lt;-</span> x<span class="p">[</span><span class="o">!</span>is.na<span class="p">(</span>x<span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们再想找出 <code>y</code> 中元素大于0的元素，可以如下操作L:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">y<span class="p">[</span>y <span class="o">&gt;</span> <span class="m">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上两步合在一起，可以如下操作:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x<span class="p">[</span><span class="o">!</span>is.na<span class="p">(</span>x<span class="p">)</span> <span class="o">&amp;</span> x <span class="o">&gt;</span> <span class="m">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们直接使用 <code>x[x &gt; 0]</code> 是不行的，会得到如下的包含<code>NA</code> 值的一个 <code>vector</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"> <span class="kc">NA</span>        <span class="kc">NA</span> <span class="m">0.3488261</span>        <span class="kc">NA</span> <span class="m">2.4099262</span>        <span class="kc">NA</span>        <span class="kc">NA</span>        <span class="kc">NA</span>        <span class="kc">NA</span>        <span class="kc">NA</span> <span class="m">0.4626879</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>创建一个4行5列的<code>matrix</code>，包含的数值是从1到20，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">my_matrix <span class="o">&lt;-</span> matrix<span class="p">(</span>data<span class="o">=</span><span class="m">1</span><span class="o">:</span><span class="m">20</span><span class="p">,</span> nrow <span class="o">=</span> <span class="m">4</span><span class="p">,</span> ncol <span class="o">=</span> <span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我想给这个<code>matrix</code>的每行添加一列，作为名字，可以采用如下的方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">patients <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;Bill&quot;</span><span class="p">,</span> <span class="s">&quot;Gina&quot;</span><span class="p">,</span> <span class="s">&quot;Kelly&quot;</span><span class="p">,</span> <span class="s">&quot;Sean&quot;</span><span class="p">)</span>
</span><span class="line">cbind<span class="p">(</span>patients<span class="p">,</span> my_matrix<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是上面这种方式，会导致<code>implicit coercion</code>, 把数字变成字符，为了解决这个问题，我们可以使用如下的方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">my_data <span class="o">&lt;-</span> data.frame<span class="p">(</span>patients<span class="p">,</span> my_matrix<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们再想给每个列增加一个<code>name</code>, 可以使用如下的方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">cnames <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;patient&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="s">&quot;weight&quot;</span><span class="p">,</span> <span class="s">&quot;bp&quot;</span><span class="p">,</span> <span class="s">&quot;rating&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class="line">colnames<span class="p">(</span>my_data<span class="p">)</span> <span class="o">&lt;-</span> cnames
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们想要获取当前的工作目录,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">getwd<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们想要切换到另外一个目录，可以</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">setwd<span class="p">(</span><span class="s">&quot;~/data/ISLR&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据分析和机器学习一些摘抄]]></title>
    <link href="http://isunix.github.io/blog/2019/07/04/shu-ju-fen-xi-he-ji-qi-xue-xi-%5B%3F%5D-xie-zhai-chao/"/>
    <updated>2019-07-04T18:24:50+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/04/shu-ju-fen-xi-he-ji-qi-xue-xi-[?]-xie-zhai-chao</id>
    <content type="html"><![CDATA[<ul>
  <li>怎么对待缺失值</li>
</ul>

<p><code>Missing values play an important role in statistics and data analysis. Often, missing values must not be ignored, but rather they should be carefully
| studied to see if there's an underlying pattern or cause for their missingness.</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近的工作的一些感想]]></title>
    <link href="http://isunix.github.io/blog/2019/07/04/zui-jin-de-gong-zuo-de-%5B%3F%5D-xie-gan-xiang/"/>
    <updated>2019-07-04T12:04:30+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/04/zui-jin-de-gong-zuo-de-[?]-xie-gan-xiang</id>
    <content type="html"><![CDATA[<h3 id="section">2019年年中开始，后面的工作内容应该有所调整。</h3>

<p>自从16年6月底，从上海回到合肥，加入到华米科技， 到现在整整3年了。 </p>

<p>从16年年中，到17年年初，基本一个人在做数据分析和报表。17年初到18年中， 带了一个新加入的同事A一起做数据分析和ETL等相关工作。 18年中，A去做上游的导数的事情，分析由我和新加入的B和C, 两个妹子，一起来完成，同时，自己也从大数据工程师，升级成了高级大数据工程师。 </p>

<p>到了19年年中，撇去一些不开心的因素(导火索吧), 为什么想从大数据分析，转到算法团队(人工智能实验室团队)去做点事情呢？ 我想主要还是想去了解数据探索的一个实用的套路吧。毕竟，描述性的统计分析，这个我已经做了三年了。 而关于数据的更地道的挖掘和分析，特征选取，建模， 模型评估这些，都是自己的薄弱点。也是我所认为的一个合格的<code>data scientist</code>必须掌握的。更何况，自己在算法和机器学习这块，并非是没有基础。人生那么长，总不能一辈子做基础的描述性的统计分析/业务分析还有做报表吧。</p>

<p>下面列出一些以前学习过的课程和材料吧, 算是对过往准备工作的一个总结。 </p>

<ul>
  <li>
    <p><code>台大林轩田的&lt;机器学习基石&gt;， &lt;机器学习技巧&gt; 和 对应的英文教材 &lt;Learning From Data&gt;</code></p>
  </li>
  <li>
    <p><code>吴恩达的&lt;机器学习&gt; 和 &lt;深度学习&gt;课程， 并且完成了coursera上的深度学习的几门课程(课后作业有点水，因为很多都可以通过上下文得到， 但是不得不承认，是好的课后作业)</code></p>
  </li>
  <li>
    <p><code>北京交通大学的桑基韬等人在网易云课堂上开的&lt;深度学习&gt;课程</code></p>
  </li>
  <li>
    <p><code>周志华的西瓜书&lt;机器学习&gt;</code></p>
  </li>
  <li>
    <p><code>李航的&lt;统计学习方法&gt;</code></p>
  </li>
  <li>
    <p><code>&lt;The Elements of Statistical Learning&gt; 看了一点点</code></p>
  </li>
  <li>
    <p><code>概率统计和线性代数的相关知识平时都有所复习</code></p>
  </li>
  <li>
    <p><code>scikit-learn, pandas 的了解和使用</code></p>
  </li>
  <li>
    <p><code>用逻辑回归和时间序列分析，做过点探索分析; 时间序列分析结果，还在团队内部进行过分享</code></p>
  </li>
  <li>
    <p><code>用深度学习的cnn方法，做过一个图片的分类程序(判断照片好看是不那么好看)</code></p>
  </li>
  <li>
    <p><code>使用过算法包跑算法，并且验证算法检测结果，计算FN, FP, TN, TP</code>.</p>
  </li>
  <li>
    <p><code>在来华米科技之前, 做了三年多的防垃圾邮件工作， 文本处理相关的原理和技术，非常熟悉了</code></p>
  </li>
</ul>

<p>准备不少，现在缺乏啥呢？ </p>

<ul>
  <li>
    <p><code>缺少对机器学习和深度学习算法的深刻理解，手写算法的能力</code></p>
  </li>
  <li>
    <p><code>缺少数据挖掘和更深层次的统计分析的流程认知</code></p>
  </li>
  <li>
    <p><code>缺乏项目经验</code></p>
  </li>
</ul>

<h2 id="section-1">希望一切都好，毕竟我才30岁。</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numpy的一些数据处理备忘]]></title>
    <link href="http://isunix.github.io/blog/2019/07/04/numpyde-%5B%3F%5D-xie-shu-ju-chu-li-bei-wang/"/>
    <updated>2019-07-04T11:43:34+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/04/numpyde-[?]-xie-shu-ju-chu-li-bei-wang</id>
    <content type="html"><![CDATA[<h2 id="numpy">记录numpy中的一些数据处理的方法.</h2>

<ul>
  <li>比如我们通过如下的方式，获取到了iris的数据,</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_iris</span>
</span><span class="line">
</span><span class="line"><span class="n">iris</span> <span class="o">=</span> <span class="n">load_iris</span><span class="p">()</span>
</span><span class="line"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">iris</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">iris</span><span class="o">.</span><span class="n">feature_names</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;sepal length&#39;</span><span class="p">,</span> <span class="s">&#39;sepal width&#39;</span><span class="p">,</span> <span class="s">&#39;petal length&#39;</span><span class="p">,</span> <span class="s">&#39;petal width&#39;</span><span class="p">,</span> <span class="s">&#39;label&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A. 如果我们想要去取第一列，第二列，和最后一列(label), 可以使用如下的方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">100</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>df.shape</code> 是 <code>(150, 5)</code>, <code>data.shape</code> 是 <code>(100, 3)</code></p>

<p><code>data</code> 现在是<code>lists in list</code> 的一个<code>ndarray</code></p>

<p>B. 如果我们想要去取<code>data</code>的每行的前两列， 还有最后一列，可以使用如下的方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">data</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>X, y</code> 都是 ndarray. <code>x.shape</code> 是 <code>(100, 2)</code>, <code>y.shape</code> 是 <code>(100,)</code></p>

<p>C. 如果要对标签进行二分类，我们可以使用 python 的 list comprehension:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">y</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样处理了之后，y 的 shape 还是跟之前是一样的.</p>

<ul>
  <li>如果我们又一个ndarray, <code>an_ndarray = np.array([[11,12,13,14], [21,22,23,24], [31,32,33,34]])</code></li>
</ul>

<p><code>row_rank1 = an_array[1, :]</code> 和 <code>row_rank2 = an_array[1:2, :]</code> 将会给出不同的结果，可以输出来看看有啥不同， 这个很重要.</p>

<ul>
  <li>我们也可以使用如下的方式，对array中的元素进行判断</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">an_ndarray</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">],</span> <span class="p">[</span><span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="p">]])</span>
</span><span class="line"><span class="n">bigger_than_fifteen</span> <span class="o">=</span> <span class="p">(</span><span class="n">an_array</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)</span>
</span><span class="line"><span class="n">an_ndarray</span><span class="p">[</span><span class="n">bigger_than_fifteen</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者我们也可以直接如下操作:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">an_ndarray</span><span class="p">[(</span><span class="n">an_ndarray</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>下面是针对上面的<code>an_ndarray</code>进行的一些数学操作</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c"># 求各个元素的均值</span>
</span><span class="line"><span class="n">an_ndarray</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># 求每行的均值</span>
</span><span class="line"><span class="n">an_ndarray</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 求每列的均值</span>
</span><span class="line"><span class="n">an_ndarray</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 求所有元素的和</span>
</span><span class="line"><span class="n">an_ndarray</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># 求每行的中位数</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">an_ndarray</span><span class="p">,</span> <span class="n">axix</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 求每列的中位数</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">median</span><span class="p">(</span><span class="n">an_ndarray</span><span class="p">,</span> <span class="n">axix</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 想要找到unique的元素</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">an_ndarray</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 下面是一些集合的操作</span>
</span><span class="line"><span class="n">s1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s">&#39;desk&#39;</span><span class="p">,</span><span class="s">&#39;chair&#39;</span><span class="p">,</span><span class="s">&#39;bulb&#39;</span><span class="p">])</span>
</span><span class="line"><span class="n">s2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s">&#39;lamp&#39;</span><span class="p">,</span><span class="s">&#39;bulb&#39;</span><span class="p">,</span><span class="s">&#39;chair&#39;</span><span class="p">])</span>
</span><span class="line"><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># s1 和 s2 交集</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">intersect1d</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># s1 和 s2 去重并集</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">union1d</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 在s1然后不在s2中的元素</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">setdiff1d</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 判断s1中的元素是不是在s2中</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">in1d</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>广播
最好的操作方式是能打印出来看看长啥样.</p>
  </li>
  <li>
    <p>文件的存取</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span> <span class="mf">23.23</span><span class="p">,</span> <span class="mf">24.24</span><span class="p">])</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;an_array&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">&#39;an_array.npy&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="s">&#39;array.txt&#39;</span><span class="p">,</span> <span class="n">X</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="s">&#39;array.txt&#39;</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>拼接数据集</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="n">K</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">high</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line"><span class="n">M</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">high</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">K</span><span class="p">,</span><span class="n">M</span><span class="p">))</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">K</span><span class="p">,</span><span class="n">M</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">([</span><span class="n">K</span><span class="p">,</span> <span class="n">M</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">([</span><span class="n">K</span><span class="p">,</span> <span class="n">M</span><span class="o">.</span><span class="n">T</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># vstack 和 hstack 和  最下面的两种方式是等价的</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Python来发送markdown格式的邮件]]></title>
    <link href="http://isunix.github.io/blog/2019/07/02/yong-pythonlai-fa-song-markdownge-shi-de-you-jian/"/>
    <updated>2019-07-02T15:19:06+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/02/yong-pythonlai-fa-song-markdownge-shi-de-you-jian</id>
    <content type="html"><![CDATA[<h2 id="httpsgithubcomyejianyemdmail">https://github.com/yejianye/mdmail</h2>

<p>mdmail， 这个是一个支持用 markdown 格式来发送邮件的工具.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">mdmail</span>
</span><span class="line">
</span><span class="line"><span class="n">email</span><span class="o">=</span><span class="s">&quot;&quot;&quot;</span>
</span><span class="line"><span class="s"># Sample Email</span>
</span><span class="line"><span class="s">- Python is awesome</span>
</span><span class="line"><span class="s">- Markdown is cool</span>
</span><span class="line"><span class="s">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">mdmail</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">subject</span><span class="o">=</span><span class="s">&#39;Sample Email Mdmail&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="n">from_email</span><span class="o">=</span><span class="s">&#39;mypeacelover@163.com&#39;</span><span class="p">,</span> <span class="n">to_email</span><span class="o">=</span><span class="s">&#39;mypeacelover@163.com&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很好用, 汪汪.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zeppelin搭配Presto]]></title>
    <link href="http://isunix.github.io/blog/2019/06/10/zeppelinda-pei-presto/"/>
    <updated>2019-06-10T17:57:13+08:00</updated>
    <id>http://isunix.github.io/blog/2019/06/10/zeppelinda-pei-presto</id>
    <content type="html"><![CDATA[<p>参考文章</p>

<p><code>https://stackoverflow.com/questions/35858606/presto-interpreter-in-zeppelin-on-emr</code></p>

<ul>
  <li>在 master 机器上安装 jdbc</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo /usr/lib/zeppelin/bin/install-interpreter.sh --name jdbc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo stop zeppelin
</span><span class="line">sudo start zeppelin
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
