<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2019-05-23T10:18:52+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样无需手动输入密码连接PostgreSQL]]></title>
    <link href="http://isunix.github.io/blog/2019/05/23/zen-yang-wu-xu-shou-dong-shu-ru-mi-ma-lian-jie-postgresql/"/>
    <updated>2019-05-23T08:44:13+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/23/zen-yang-wu-xu-shou-dong-shu-ru-mi-ma-lian-jie-postgresql</id>
    <content type="html"><![CDATA[<p>我们要想不每次手动输入密码来连接PostgreSQL, 可以在home目录创建一个pgpass文件<code>touch ~/.pgpass</code>.
然后在里面输入如下的信息<code>$host:$port:$db:$user:$password</code>.
这里的每个变量实际过程中替换成真实的值.
然后我们就可以使用如下的方式来进行psql的连接了<code>psql -h $host -p $port -U $user -d $db</code>.
同理，这里的每个变量实际过程中替换成真实的值.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用rpm安装crontab命令备忘]]></title>
    <link href="http://isunix.github.io/blog/2019/05/22/shi-yong-rpman-zhuang-crontabming-ling-bei-wang/"/>
    <updated>2019-05-22T16:36:21+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/22/shi-yong-rpman-zhuang-crontabming-ling-bei-wang</id>
    <content type="html"><![CDATA[<p>我这边有台ec2, 但是在yum update的时候，总是报错说依赖冲突，后来处理这个问题的时候，过于激进，导致yum不可以用了, 最后把rpm也删了</p>

<p>参考这篇文章
<a href="https://blog.seosiwei.com/detail/27">https://blog.seosiwei.com/detail/27</a>
里的方法2，把rpm和yum都删了然后重装了, 软件下载链接是
<a href="http://mirrors.ustc.edu.cn/centos/6/os/x86_64/Packages/">http://mirrors.ustc.edu.cn/centos/6/os/x86_64/Packages/</a></p>

<p>安装好了之后，发现yum还是不能用，总是报错</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">liblzma.so.0: cannot open shared object file: No such file or directory</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>之类的信息</p>

<p>无可奈何，只好使用rpm了, 我这边需要使用crontab，于是从上面的软件库中下载了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cronie-1.4.4-16.el6_8.2.x86_64.rpm``` 和 ```crontabs-1.10-33.el6.noarch.rpm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后执行如下的命令来安装</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpm -Uvh --replacepkgs --nodeps --force cron*.rpm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后报各种依赖找不到的错误, 比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">librpmio.so.3 not found</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>之类的</p>

<p>好在我们有别的ec2，我们可以去这个另外的ec2上找对应的依赖，然后copy到这个我们出问题的机器上</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">find / -name librpm.so.3 -type f</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后发现在/usr/lib64中，librpm.so.3是个软连接，指向/usr/lib64中的librpm.so.3.2.2, 我们把librpm.so.3.2.2copy到我们出问题的机器的/usr/lib64里，然后参照
<a href="http://isunix.github.io/blog/2019/05/22/linuxming-ling-lnde-shi-yong-bei-wang/">http://isunix.github.io/blog/2019/05/22/linuxming-ling-lnde-shi-yong-bei-wang/</a>
中的方式来做个软连接</p>

<p>仿照这个方式，如果还有问题，重复找依赖-copy-做软连接的过程</p>

<p>最后再执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpm -Uvh --replacepkgs --nodeps --force cron*.rpm</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>crontab命令成功安装了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令ln的使用备忘]]></title>
    <link href="http://isunix.github.io/blog/2019/05/22/linuxming-ling-lnde-shi-yong-bei-wang/"/>
    <updated>2019-05-22T16:22:49+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/22/linuxming-ling-lnde-shi-yong-bei-wang</id>
    <content type="html"><![CDATA[<p>我们现在在/usr/lib64中有个文件librpm.so.3.2.2, 我们想要在/usr/lib64做个软连接, 起名叫做librpm.so.3, 指向librpm.so.3.2.2, 我们可以这样做,</p>

<p><code>cd /usr/lib64 &amp;&amp; ln -s librpm.so.3.2.2 librpm.so.3</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask中使用ipython的shell]]></title>
    <link href="http://isunix.github.io/blog/2019/05/21/flaskzhong-shi-yong-ipythonde-shell/"/>
    <updated>2019-05-21T19:44:25+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/21/flaskzhong-shi-yong-ipythonde-shell</id>
    <content type="html"><![CDATA[<p>我们在Flask中使用shell的时候没有语法高亮和代码提示，想要获得一个ipython般的体验，现在有</p>

<ul>
  <li>https://github.com/ei-grad/flask-shell-ipython</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pip install flask-shell-ipython</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>装好了之后，执行如下的命令就可以了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">flask shell</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hive中删除partition]]></title>
    <link href="http://isunix.github.io/blog/2019/05/07/hivezhong-shan-chu-partition/"/>
    <updated>2019-05-07T17:25:48+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/07/hivezhong-shan-chu-partition</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alter table xxx drop PARTITION (partition_name&lt;='2019-01-13');</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ammonite中import第三方jar包]]></title>
    <link href="http://isunix.github.io/blog/2019/05/07/zai-ammonitezhong-importdi-san-fang-jarbao/"/>
    <updated>2019-05-07T16:54:15+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/07/zai-ammonitezhong-importdi-san-fang-jarbao</id>
    <content type="html"><![CDATA[<h3 id="scalarepl-jar-">我们在scala的repl中, 如果想要引入一个第三方的jar包, 可以使用如下的方式</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:require joda-time-2.1.jar</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="ammonite-">而在ammonite中, 可以使用如下的方式</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import $cp.`joda-time-2.1.jar`</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hive Insert Using Select *]]></title>
    <link href="http://isunix.github.io/blog/2016/08/09/hive-insert-using-select-star/"/>
    <updated>2016-08-09T09:34:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/08/09/hive-insert-using-select-star</id>
    <content type="html"><![CDATA[<p>I want to insert into a table with values from another table. and I want to use the follwing statements,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">table_b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both table_a and table_b have the followig 3 fields, “name”, “age”, and the “load_day” field which is used to partition.</p>

<p>If using the above syntax, we will get errors saying table has just 2 fields and table_b has 3.</p>

<p>So one right way to insert the data is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span><span class="p">(</span><span class="n">partition</span><span class="o">=</span><span class="ss">&quot;2016-08-01&quot;</span><span class="p">)</span> <span class="k">select</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="k">from</span> <span class="n">table_b</span> <span class="k">where</span> <span class="n">load_day</span> <span class="o">=</span> <span class="ss">&quot;2016-08-01&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if there are many fields, thus we will need to list them one by one after select which is very tedious.</p>

<p>Here is the solution,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">set</span> <span class="n">hive</span><span class="p">.</span><span class="k">exec</span><span class="p">.</span><span class="k">dynamic</span><span class="p">.</span><span class="n">partition</span><span class="p">.</span><span class="k">mode</span><span class="o">=</span><span class="n">nonstrict</span><span class="p">;</span>
</span><span class="line"><span class="k">insert</span> <span class="k">into</span> <span class="k">table</span> <span class="n">table_a</span> <span class="n">partition</span><span class="p">(</span><span class="n">load_day</span><span class="p">)</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">table_b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy and Paste Spaces Separated Text Into Excel]]></title>
    <link href="http://isunix.github.io/blog/2016/08/04/copy-and-paste-spaces-separated-text-into-excel/"/>
    <updated>2016-08-04T16:06:03+08:00</updated>
    <id>http://isunix.github.io/blog/2016/08/04/copy-and-paste-spaces-separated-text-into-excel</id>
    <content type="html"><![CDATA[<p>最近经常需要把空格作为delimiter的文本粘贴到excel里。之前的做法是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat aa.log | awk <span class="s1">&#39;{print $1}&#39;</span> | pbcopy
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>来一列一列地copy到excel里。甚是繁琐。 excel不会用的啊。</p>

<p>今天发现了原来还可以这么来操作。</p>

<ol>
  <li>把整个文件的内容粘贴到excel里去</li>
  <li>在excel中选中文件内容， 然后点击 Data-&gt;Text to Columns, 然后选择合适的delimiter去把文本内容给搞到excel中去。 </li>
</ol>

<p>Bingo！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weird Things Happen When Scripts Executing With . And Passing Args With Getopts]]></title>
    <link href="http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts/"/>
    <updated>2016-07-19T17:43:32+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts</id>
    <content type="html"><![CDATA[<p>I have met the following scripts, say aa.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for aa.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for aa.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for aa.sh is $count&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for aa.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span><span class="sb">`</span>sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and bb.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;we are setting the OPTIND to 1&quot;</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for bb.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for bb.sh is $count&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and call.sh</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">. ./aa.sh -t 2016-07-15 -c 4
</span><span class="line">. ./bb.sh -a 2016-07-20 -c 0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now execute the script, it will give out the followig result,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  <span class="nv">5</span>
</span><span class="line"><span class="o">=</span><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>bb.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which is definitely not what we want.</p>

<p>We can now change bb.sh into the following to test it again.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh before calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span><span class="line">
</span><span class="line"><span class="nv">OPTIND</span><span class="o">=</span>1
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;we are setting the OPTIND to 1&quot;</span>
</span><span class="line"><span class="k">while </span><span class="nb">getopts</span> <span class="s2">&quot;t:c:&quot;</span> opt
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    case</span> <span class="s2">&quot;$opt&quot;</span> in
</span><span class="line">        t<span class="o">)</span> <span class="nb">time</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">        c<span class="o">)</span> <span class="nv">count</span><span class="o">=</span><span class="s2">&quot;${OPTARG}&quot;</span>;;
</span><span class="line">    <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;time for bb.sh is $time&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;count for bb.sh is $count&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;OPTIND for bb.sh after calling is: &quot;</span> <span class="nv">$OPTIND</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now “sh call.sh” will give out the following result,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  5
</span><span class="line">we are setting the OPTIND to 1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-20
</span><span class="line">count <span class="k">for </span>bb.sh is 0
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if we set the OPTIND to 3 now?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">OPTIND <span class="k">for </span>aa.sh before calling is:  1
</span><span class="line"><span class="nb">time </span><span class="k">for </span>aa.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>aa.sh is 4
</span><span class="line">OPTIND <span class="k">for </span>aa.sh after calling is:  5
</span><span class="line">OPTIND <span class="k">for </span>bb.sh before calling is:  5
</span><span class="line">we are setting the OPTIND to 3
</span><span class="line"><span class="nb">time </span><span class="k">for </span>bb.sh is 2016-07-15
</span><span class="line">count <span class="k">for </span>bb.sh is 0
</span><span class="line">OPTIND <span class="k">for </span>bb.sh after calling is:  5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now the count value is changed to 0, however time is still not changed.</p>

<p>How to understand this? First let us look at the definitions of $OPTIND and getopts</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">A <span class="nb">getopts </span>construct usually comes packaged in a <span class="k">while </span>loop, which processes the options and
</span><span class="line">arguments one at a <span class="nb">time</span>, <span class="k">then </span>increments the implicit <span class="nv">$OPTIND</span> variable to point to the next.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In a while loop contaning getopts, getopts will use $OPTIND to find the arguments. if we call the script using “dot” which is the same as using “source”, $OPTIND will be global and available to the next script using getopts, and the next script will then can not find the right argument using $OPTIND now. </p>

<p>The solution here is, we can reset $OPTIND to 1 or we can call the script using “sh” rather than “.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么去除windows编辑过的文件中的^M字符]]></title>
    <link href="http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu/"/>
    <updated>2016-07-18T08:12:34+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu</id>
    <content type="html"><![CDATA[<p>We can use the following two methods to get rid of the “^M” character in a file which was edited on windows using vim.</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:%s/<span class="se">\r</span>//g
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:%s/ctrl-v ctrl-m//g
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The second one means pressing ctrl-v, then ctrl-m first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regexp_extract Usage in Impala]]></title>
    <link href="http://isunix.github.io/blog/2016/07/15/regexp-extract-usage-in-impala/"/>
    <updated>2016-07-15T10:43:30+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/15/regexp-extract-usage-in-impala</id>
    <content type="html"><![CDATA[<p>I need to use the regexp_extract function to extract certain parts of a string recently when I am doing big data analysis.</p>

<p>http://www.cloudera.com/documentation/archive/impala/2-x/2-1-x/topics/impala_string_functions.html, this link shows us how to do, but sadly regex in impala is a little different from those in perl or python, so I have to look through the page and try again.</p>

<p>I keep a note here for regexp_extract for my later own usage.</p>

<p>Say I have a string </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%2C%22hidisp%22%3A27%2C%22quietMode</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I want to extract the number followd by “hidisp” and ‘”:’, which is number ‘27’ here.</p>

<p>As describe in the above document, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Because the impala-shell interpreter uses the \ character for escaping, use \\ to represent the regular expression escape character in any regular expressions that you submit through impala-shell</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So if we want to represent the numbers here, we have use ‘\d’ rather than just ‘\d’ which is a standard in other programming  languages.</p>

<p>regexp_extract usage is in the following format,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">regexp_extract(string subject, string pattern, int index)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>group 0 matches the full pattern string, including the portion outside any () group, so</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22hidisp%22%3A27%2C%22quietMode', 'hidisp%22%3A(\\d+)', 0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>this will give out:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">hidisp%22%3A27</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>group 1 matches just the contents inside the first () group in the pattern string:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22hidisp%22%3A27%2C%22quietMode', 'hidisp%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>will give out</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">27</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And for the support of non-greedy matches using .*?, take the following string as an example,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How to extract the first match number for “reboot”, we can get the result in the following ways</p>

<p>a. without any “.*?” around the string pattern ‘reboot%22%3A(\d+)’, which is the easiest way I think </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', 'reboot%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or </p>

<p>b. append “.*?” right after the string pattern ‘reboot%22%3A(\d+)’,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', 'reboot%22%3A(\\d+).*?', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or</p>

<p>c. surround the string pattern ‘reboot%22%3A(\d+)’ with ‘.*?’ at both sides</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', '.*?reboot%22%3A(\\d+).*?', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So after the tree ways to get the leftmost match, we can easily guess how to get the rifht-most match.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select regexp_extract('%2C%22reboot%22%3A27%2C%22quietMode%2C%22reboot%22%3A12%2C%22quietMode', '.*?reboot%22%3A(\\d+)', 1);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That is just by appending the string pattern with ‘.*?’ at its left side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux: Error While Loading Shared Libraries: libevent-2.0.so.5]]></title>
    <link href="http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5/"/>
    <updated>2016-07-12T10:34:50+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5</id>
    <content type="html"><![CDATA[<p>I have kept a blog on tmux installation which is about missing module libevent, and the post is on:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://isunix.github.io/blog/2014/12/24/libevent-not-found-error-while-install-tmux/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Recently even after I install the livevent module, I still get the following errors after installing tmux and then running tmux:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"> ./tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I installed the libevent lib in $HOME/local/lib, and tmux says it can not find the library, Weird. With the help of one of my colleague, this problem is solved.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$HOME/local&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:<span class="nv">$DIR</span>/lib
</span><span class="line">./configure --prefix<span class="o">=</span><span class="nv">$DIR</span> <span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I$DIR/include&quot;</span> <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L$DIR/lib&quot;</span>
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, the point here is setting the “LD_LIBRARY_PATH” variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Hive on Mac]]></title>
    <link href="http://isunix.github.io/blog/2016/07/02/configure-hive-on-mac/"/>
    <updated>2016-07-02T18:14:13+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/02/configure-hive-on-mac</id>
    <content type="html"><![CDATA[<p>花了很长的时间在hive的安装和配置上， 先把有用的链接记下来， 等有空了再详细的写下安装过程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://stackoverflow.com/questions/5016505/mysql-grant-all-privileges-on-database
</span><span class="line">https://cwiki.apache.org/confluence/display/Hive/AdminManual+Configuration
</span><span class="line">http://stackoverflow.com/questions/27099898/java-net-urisyntaxexception-when-starting-hive
</span><span class="line">https://noobergeek.wordpress.com/2013/11/09/simplest-way-to-install-and-configure-hive-for-mac-osx-lion/
</span><span class="line">https://cwiki.apache.org/confluence/display/Hive/GettingStarted
</span><span class="line">https://amodernstory.com/2015/03/29/installing-hive-on-mac/
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="kn">import</span> <span class="nn">pip</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">call</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">pip</span><span class="o">.</span><span class="n">get_installed_distributions</span><span class="p">():</span>
</span><span class="line">    <span class="n">call</span><span class="p">(</span><span class="s">&quot;pip install --upgrade &quot;</span> <span class="o">+</span> <span class="n">dist</span><span class="o">.</span><span class="n">project_name</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort an Object by One Key Using Js]]></title>
    <link href="http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js/"/>
    <updated>2016-03-09T09:41:03+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/09/sort-an-object-by-one-key-using-js</id>
    <content type="html"><![CDATA[<p>I have something like the following,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and I want to find out the one with the earliest time, in the above code, it is “2016/03/02 01:12”, and the corresponding item is “sophos”, here is the realization is js code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">sophos</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;aa&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/02 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">mcafee</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;bb&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/03 01:12&quot;</span><span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">trend</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;cc&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="o">:</span><span class="s2">&quot;2016/03/04 01:12&quot;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sophos</span><span class="p">,</span> <span class="nx">mcafee</span><span class="p">,</span> <span class="nx">trend</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">compare</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Lines by Length]]></title>
    <link href="http://isunix.github.io/blog/2016/01/20/sort-lines-by-length/"/>
    <updated>2016-01-20T10:14:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/20/sort-lines-by-length</id>
    <content type="html"><![CDATA[<p>I have a file containing quite many lines of strings and I want to sort them by line length. Here is how.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat <span class="nv">$file</span> | awk <span class="s1">&#39;{ print length($0) &quot; &quot; $0; }&#39;</span> | sort -r -n | cut -d <span class="s1">&#39; &#39;</span> -f 2- | less
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Wonderful Post on Stdin]]></title>
    <link href="http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin/"/>
    <updated>2016-01-05T14:30:04+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin</id>
    <content type="html"><![CDATA[<p>The following is a wonderful post on stdin, stdout, stderr.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.jstorimer.com/blogs/workingwithcode/7766119-when-to-use-stderr-instead-of-stdout
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notes:</p>

<p>1.[-n string] 将会测试string的长度，如果大于0， 则返回true</p>

<p>2.awesome os-x command line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">https://github.com/herrbischoff/awesome-osx-command-line
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wget Several Files Using Bash Cmd]]></title>
    <link href="http://isunix.github.io/blog/2015/12/31/wget-several-files-using-bash-cmd/"/>
    <updated>2015-12-31T18:36:09+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/31/wget-several-files-using-bash-cmd</id>
    <content type="html"><![CDATA[<p>I want to down the lecture notes on the page </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the command I am using.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wget http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/lecture<span class="o">{</span>1..26<span class="o">}</span>webhand.pdf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The sad thing is not all the sequences are consecutive.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Awk Commands]]></title>
    <link href="http://isunix.github.io/blog/2015/12/21/useful-awk-commands/"/>
    <updated>2015-12-21T16:51:15+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/21/useful-awk-commands</id>
    <content type="html"><![CDATA[<p>The following blogs are referenced, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://www.catonmat.net/blog/awk-one-liners-explained-part-one/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And I will list some of the commands I think might be useful for later usage here.</p>

<ul>
  <li>Print the total number of lines containing word “Regex”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/Regex/ { n++ }; END { print n+0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print every line with more than 4 fields.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NF &gt; 4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print every line where the value of the last field is greater than 4.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$NF &gt; 4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Convert Windows/DOS newlines (CRLF) to Unix newlines (LF) from Unix.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/\r$/,&quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Convert Unix newlines (LF) to Windows/DOS newlines (CRLF) from Unix.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/$/,&quot;\r&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Delete leading whitespace (spaces and tabs) from the beginning of each line (ltrim).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/^[ \t]+/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Delete trailing whitespace (spaces and tabs) from the end of each line (rtrim).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/[ \t]+$/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Delete both leading and trailing whitespaces from each line (trim).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ gsub(/^[ \t]+|[ \t]+$/, &quot;&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Insert 5 blank spaces at beginning of each line.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/^/, &quot;     &quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Center all text on a 79-character width.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ l=length(); s=int((79-l)/2); printf &quot;%&quot;(s+l)&quot;s\n&quot;, $0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Substitute (find and replace) “foo” with “bar” on each line.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ sub(/foo/,&quot;bar&quot;); print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Substitute “foo” with “bar” only on lines that contain “baz”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/baz/ { gsub(/foo/, &quot;bar&quot;) }; { print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Substitute “foo” with “bar” only on lines that do not contain “baz”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!/baz/ { gsub(/foo/, &quot;bar&quot;) }; { print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Change “scarlet” or “ruby” or “puce” to “red”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ gsub(/scarlet|ruby|puce/, &quot;red&quot;); print}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Reverse order of lines (emulate “tac”).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ a[i++] = $0 } END { for (j=i-1; j&gt;=0;) print a[j--] }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Swap first field with second on every line.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ temp = $1; $1 = $2; $2 = temp; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Delete the second field on each line.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ $2 = &quot;&quot;; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print the fields in reverse order on every line.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;{ for (i=NF; i&gt;0; i--) printf(&quot;%s &quot;, $i); printf (&quot;\n&quot;) }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Remove duplicate, consecutive lines (emulate “uniq”)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;a !~ $0; { a = $0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Remove duplicate, nonconsecutive lines.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!a[$0]++&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Concatenate every 5 lines of input with a comma.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;ORS=NR%5?&quot;,&quot;:&quot;\n&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print only the lines that match a regular expression “/regex/” (emulates “grep”).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print only the lines that do not match a regular expression “/regex/” (emulates “grep -v”).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;!/regex/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print the line immediately before a line that matches “/regex/” (but not the line that matches itself).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/ { print x }; { x=$0 }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print the line immediately after a line that matches “/regex/” (but not the line that matches itself).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/ { getline; print }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print lines that match any of “AAA” or “BBB”, or “CCC”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/AAA|BBB|CCC/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print lines that contain “AAA” and “BBB”, and “CCC” in this order.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/AAA.*BBB.*CCC/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print only the lines that are 65 characters in length or longer.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;length &gt; 64&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print a section of file from regular expression to end of file.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/regex/,0&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print lines 8 to 12 (inclusive).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NR==8,NR==12&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print line number 52.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;NR==52&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print section of a file between two regular expressions (inclusive).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;/Iowa/,/Montana/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Delete all blank lines from a file.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk NF
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This one-liner uses the special NF variable that contains number of fields on the line. For empty lines, NF is 0, that evaluates to false, and false statements do not get the line printed.</p>

<ul>
  <li>Create a string of a specific length (generate a string of x’s of length 513).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">awk <span class="s1">&#39;BEGIN { while (a++&lt;513) s=s &quot;x&quot;; print s }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Insert a string of specific length at a certain character position (insert 49 x’s after 6th char).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gawk --re-interval <span class="s1">&#39;BEGIN{ while(a++&lt;49) s=s &quot;x&quot; }; { sub(/^.{6}/,&quot;&amp;&quot; s) }; 1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print all lines where 5th field is equal to “abc123”.
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span></figure></notextile></li>
</ul>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$5 == &quot;abc123&quot;&#39;</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;</p>

<ul>
  <li>Print any line where field #5 is not equal to “abc123”.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$5 != &quot;abc123&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Print all lines whose 7th field matches a regular expression.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | awk <span class="s1">&#39;$7  ~ /^[a-f]/&#39;</span>
</span><span class="line">or
</span><span class="line">cat file | awk <span class="s1">&#39;$7 !~ /^[a-f]/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed One-liners]]></title>
    <link href="http://isunix.github.io/blog/2015/12/18/sed-one-liners/"/>
    <updated>2015-12-18T14:48:18+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/18/sed-one-liners</id>
    <content type="html"><![CDATA[<p>The following is a collection of sed. They are from the following blogs.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-one/
</span><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-two/
</span><span class="line">http://www.catonmat.net/blog/sed-one-liners-explained-part-three/
</span><span class="line">
</span><span class="line">http://www.grymoire.com/Unix/Sed.html
</span><span class="line">http://www.catonmat.net/blog/wp-content/uploads/2008/09/sed1line.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will pick some I that I think might be useful for me and listed them here.</p>

<p>1.Insert a blank line above every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/{x;p;x;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Insert a blank line below every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/G&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.Insert a blank line above and below every line that matches “regex”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/regex/{x;p;x;G;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Number each line of a file (named filename). Left align the number.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">sed</span> <span class="o">=</span> filename | sed <span class="s1">&#39;N;s/\n/\t/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Convert DOS/Windows newlines (CRLF) to Unix newlines (LF). (All 3 have not been tested!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/.$//&#39;</span>
</span><span class="line">cat file | sed <span class="s1">&#39;s/^M$//&#39;</span>
</span><span class="line">cat file | sed <span class="s1">&#39;s/\x0D$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.Convert Unix newlines (LF) to DOS/Windows newlines (CRLF). (All 3 have not been tested!)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sed <span class="s1">&#39;s/$/\r/&#39;</span>
</span><span class="line">sed <span class="s2">&quot;s/$//&quot;</span>
</span><span class="line">sed <span class="s2">&quot;s/$/`echo -e \\\r`/&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.Delete leading whitespace (tabs and spaces) from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^[ \t]*//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.Delete trailing whitespace (tabs and spaces) from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/[ \t]*$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>9.Delete both leading and trailing whitespace from each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^[ \t]*//;s/[ \t]*$//&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>10.Insert five blank spaces at the beginning of each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/^/     /&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>11.Substitute (find and replace) the fourth occurrence of “foo” with “bar” on each line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/foo/bar/4&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>12.Substitute (find and replace) the first occurrence of a repeated occurrence of “foo” with “bar”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/\(.*\)foo\(.*foo\)/\1bar\2/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>13.Substitute all occurrences of “foo” with “bar” on all lines that contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/baz/s/foo/bar/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>14.Substitute all occurrences of “foo” with “bar” on all lines that DO NOT contain “baz”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/baz/!s/foo/bar/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>15.Change text “scarlet”, “ruby” or “puce” to “red”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;s/scarlet/red/g;s/ruby/red/g;s/puce/red/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>16.Add a blank line after every five lines.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;n;n;n;n;G;&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>17.Print the first 10 lines of a file (emulates “head -10”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed 10q
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>18.Print only the lines that match a regular expression (emulates “grep”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>19.Print only the lines that do not match a regular expression (emulates “grep -v”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/!p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>20.Print the line immediately before regexp, but not the line containing the regexp.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/{g;1!p;};h&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>21.Print the line immediately after regexp, but not the line containing the regexp.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/{n;p;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>22.Print one line before and after regexp. Also print the line matching regexp and its line number. (emulates “grep -A1 -B1”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n -e <span class="s1">&#39;/regexp/{=;x;1!p;g;$!N;p;D;}&#39;</span> -e h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>23.Grep for “AAA” and “BBB” and “CCC” in any order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/AAA/!d; /BBB/!d; /CCC/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>24.Grep for “AAA” and “BBB” and “CCC” in that order.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/AAA.*BBB.*CCC/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>25.Grep for “AAA” or “BBB”, or “CCC”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -e <span class="s1">&#39;/AAA/b&#39;</span> -e <span class="s1">&#39;/BBB/b&#39;</span> -e <span class="s1">&#39;/CCC/b&#39;</span> -e d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>26.Print only the lines that are 65 characters in length or more.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/^.\{65\}/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>27.Print only the lines that are less than 65 chars.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/^.\{65\}/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>28.Print section of a file from a regex to end of file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/regexp/,$p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>29.Print lines 8-12 (inclusive) of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;8,12p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>30.Print line number 52.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;52p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>31.Beginning at line 3, print every 7th line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;3,${p;n;n;n;n;n;n;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>32.Print section of lines between two regular expressions (inclusive).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -n <span class="s1">&#39;/Iowa/,/Montana/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>33.Print all lines in the file except a section between two regular expressions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/Iowa/,/Montana/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>34.Delete duplicate, consecutive lines from a file (emulates “uniq”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$!N; /^\(.*\)\n\1$/!P; D&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>35.Delete all lines except duplicate consecutive lines (emulates “uniq -d”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$!N; s/^\(.*\)\n\1$/\1/; t; D&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>36.Delete the first 10 lines of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;1,10d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>37.Delete the last line of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;$d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>38.Delete the last 2 lines of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;N;$!P;$!D;$d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>39.Delete lines that match regular expression pattern.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/pattern/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>40.Delete all blank lines in a file (emulates “grep ‘.’”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/^$/d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>41.Delete all consecutive blank lines from a file (emulates “cat -s”).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/./,/^$/!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>42.Delete all leading blank lines at the top of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed <span class="s1">&#39;/./,$!d&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>43.Delete all trailing blank lines at the end of a file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat file | sed -e :a -e <span class="s1">&#39;/^\n*$/{$d;N;ba&#39;</span> -e <span class="s1">&#39;}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
