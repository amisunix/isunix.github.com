<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven's Blog]]></title>
  <link href="http://isunix.github.io/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-12-25T18:13:11+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Libevent Not Found Error While Install Tmux]]></title>
    <link href="http://isunix.github.io/blog/2014/12/24/libevent-not-found-error-while-install-tmux/"/>
    <updated>2014-12-24T21:13:11+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/24/libevent-not-found-error-while-install-tmux</id>
    <content type="html"><![CDATA[<p>While I was installing tmux on cent-os, I met the error saying that “libevent not found”, something like this. Then I download libevent and install it into the location ‘/home/stsun/local’ dir.</p>

<p>Still I get the error saying that “libevent not found”. I solved the problem by the following way.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$HOME/local&quot;</span>
</span><span class="line">./configure --prefix<span class="o">=</span><span class="nv">$DIR</span> <span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I$DIR/include&quot;</span> <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L$DIR/lib&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since I install libevent with the option, “–prefix=$HOME/local”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make Zsh the Default Shell Without Root Access]]></title>
    <link href="http://isunix.github.io/blog/2014/12/24/how-to-make-zsh-the-default-shell-without-root-access/"/>
    <updated>2014-12-24T19:01:06+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/24/how-to-make-zsh-the-default-shell-without-root-access</id>
    <content type="html"><![CDATA[<p>As depicted by the title, this post keeps notes on how to make zsh the default shell without root access. BTW, I am using oh-my-zsh configuration files.</p>

<p>In the .bash_profile, add the following lines,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">SHELL</span><span class="o">=</span>/bin/zsh
</span><span class="line"><span class="nb">exec</span> /bin/zsh -l
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Where zsh will be your own location of your zsh file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes to Be Take While Using Ssh-keygen]]></title>
    <link href="http://isunix.github.io/blog/2014/12/23/notes-to-be-take-while-using-ssh-keygen/"/>
    <updated>2014-12-23T20:18:10+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/23/notes-to-be-take-while-using-ssh-keygen</id>
    <content type="html"><![CDATA[<p>I encoutered some problems while I was using ssh-keygen, it turns out to be originating from privileges setting up.</p>

<p>The following way turns out to be working.</p>

<p>1.Do not set up your home directory to be “777”, it will not work. I set it to be “755”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">chmod 755 /home/stsun
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">chmod 600 authorized_keys
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">chmod 700 .ssh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then it works well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Useful Linux Commands]]></title>
    <link href="http://isunix.github.io/blog/2014/12/18/some-useful-linux-commands/"/>
    <updated>2014-12-18T12:33:58+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/18/some-useful-linux-commands</id>
    <content type="html"><![CDATA[<p>I will keep notes of some of the useful Linux commands here.  </p>

<p>1.say you want to find something, we can use the “find” command or the convenient “ack” script.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">find . -iname <span class="s2">&quot;*stsun*&quot;</span> -delete
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This will find all files containing ‘stsun’ and then execute the delete command.</p>

<p>2.awk ‘{print $2 $1}’ text.txt</p>

<p>3.tr ‘[A-Z]’ ‘[a-z]’ &lt; test.txt</p>

<p>4.sed ‘125!d’ text.txt</p>

<p>5.awk ‘NR==125’ text.txt</p>

<p>6.to print out the shebang, do the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"> <span class="k">my</span> <span class="nv">$interpretr</span> <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">_</span><span class="p">};</span>
</span><span class="line"> <span class="k">print</span> <span class="nv">$interpreter</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>It will print out the interpreter that runs the script.</p>

<p>7.to cat a file and open it to a filehandle, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">open</span> <span class="p">(</span><span class="n">FH</span><span class="p">,</span> <span class="s">&quot;cat $file |&quot;</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;can&#39;t open the given file&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<table>
  <tbody>
    <tr>
      <td>Pay attention to the “</td>
      <td>” here, because in normal file opening, it is not needed.</td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study of Bloom Filters and Bloom::Filter Perl Module]]></title>
    <link href="http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module/"/>
    <updated>2014-12-09T13:46:30+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BerkeleyDB]]></title>
    <link href="http://isunix.github.io/blog/2014/12/08/berkeleydb/"/>
    <updated>2014-12-08T09:48:39+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/08/berkeleydb</id>
    <content type="html"><![CDATA[<p>I saw one of my previous colleagues is using BerkeleyDB in his perl code, but I have no idea why we have to use it, here is an article giving us more detailes on BerkeleyDB.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.aosabook.org/en/bdb.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Mojolicious]]></title>
    <link href="http://isunix.github.io/blog/2014/12/02/notes-on-mojolicious/"/>
    <updated>2014-12-02T20:52:52+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/02/notes-on-mojolicious</id>
    <content type="html"><![CDATA[<p>Will keep notes of some of the mojo tips I got.</p>

<p>1.A helper command to generate app for us.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">mojo</span> <span class="n">generate</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This will generate Mojolicious application directory structure.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">mojo</span> <span class="n">generate</span> <span class="n">lite_app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This will generate Mojolicious::Lite application for us.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">mojo</span> <span class="n">generate</span> <span class="n">lite_app</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This will generate the app with the name “hello”</p>

<p>2.about deploying your app to heroku</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">cpanm</span> <span class="nn">Mojolicious::Command::deploy::</span><span class="n">heroku</span>
</span><span class="line"><span class="n">mojo</span> <span class="n">generate</span> <span class="n">lite_app</span> <span class="n">bigfan</span>
</span><span class="line"><span class="o">./</span><span class="n">bigfan</span> <span class="n">deploy</span> <span class="n">heroku</span> <span class="o">--</span><span class="n">create</span>
</span><span class="line"><span class="ow">or</span> <span class="n">we</span> <span class="n">can</span> <span class="n">assign</span> <span class="k">our</span> <span class="n">app</span> <span class="n">name</span> <span class="n">like</span> <span class="n">the</span> <span class="n">following:</span>
</span><span class="line"><span class="o">./</span><span class="n">bigfan</span> <span class="n">deploy</span> <span class="n">heroku</span> <span class="o">-</span><span class="n">n</span> <span class="n">bigfan</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.In mojo, something like “hello.html.ep”, here “ep” stands for “embedded perl”, we can have html.ep, json.ep, txt.ep.</p>

<p>4.Three kinds of placeholders.</p>

<p>generic placeholders:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">get</span> <span class="s">&#39;/:fname/:lname&#39;</span> <span class="o">=&gt;</span> <span class="n">sub</span><span class="p">{</span>
</span><span class="line">	<span class="nb">shift</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="err">&#39;</span><span class="n">capture</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>relaxed placeholders: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">get</span> <span class="s">&#39;/:fname/(.lname)&#39;</span> <span class="o">=&gt;</span> <span class="n">sub</span><span class="p">{</span>
</span><span class="line">	<span class="nb">shift</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="err">&#39;</span><span class="n">capture</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>wildcard placeholders:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">get</span> <span class="s">&#39;/:fname/(*lname)&#39;</span> <span class="o">=&gt;</span> <span class="n">sub</span><span class="p">{</span>
</span><span class="line">	<span class="nb">shift</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="err">&#39;</span><span class="n">capture</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources on Mason]]></title>
    <link href="http://isunix.github.io/blog/2014/11/30/resources-on-mason/"/>
    <updated>2014-11-30T10:19:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/30/resources-on-mason</id>
    <content type="html"><![CDATA[<p>I collect some links to resources on Mason here. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://www.masonbook.com/book/
</span><span class="line">http://www.masonhq.com/
</span><span class="line">http://en.wikipedia.org/wiki/Mason_(Perl)
</span><span class="line">http://www.perl.com/pub/2002/12/11/mason.html
</span><span class="line">http://www.slideshare.net/chrisv/htmlmason-by-example
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Will update this post if more are found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Site underscore.js]]></title>
    <link href="http://isunix.github.io/blog/2014/11/28/site-underscore-dot-js/"/>
    <updated>2014-11-28T15:05:14+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/28/site-underscore-dot-js</id>
    <content type="html"><![CDATA[<p>Of course we can download js files to our local directory and site the path of the jquery file and underscore file. We show how to use the online way here:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you want a specific version of the jquery or underscore.js file, you can just go to the links listed above and find it by yourself.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Array Into String Using Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl/"/>
    <updated>2014-11-27T16:49:04+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl</id>
    <content type="html"><![CDATA[<p>In perl, there are cases we may want to make an array into string, and then for the string, we may also want to change it to the format that we want to use. Here below are some exaples. </p>

<p>Say we have an array, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">@nums</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1234</span><span class="p">,</span> <span class="mi">5678</span><span class="p">,</span> <span class="mi">2345</span><span class="p">,</span> <span class="mi">8976</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we then want to change it to a string with comma separated followed by a blank space.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">$nums</span> <span class="o">=</span> <span class="nb">join</span> <span class="s">&quot;, &quot;</span><span class="p">,</span> <span class="nv">@nums</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We then want to use the nums in a sql “in” clause which will have the format, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="k">column</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1234</span><span class="p">,</span> <span class="mi">5678</span><span class="p">,</span> <span class="mi">2345</span><span class="p">,</span> <span class="mi">8976</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Of course we can not use the array @nums here, we can change the $nums to the format, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$nums_in_str</span> <span class="o">=</span> <span class="s">&quot;(&quot;</span> <span class="o">.</span> <span class="nb">join</span><span class="p">(</span> <span class="s">&quot;,&quot;</span><span class="p">,</span> <span class="nv">@nums</span> <span class="p">)</span> <span class="o">.</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we can do the sql query as the following:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="k">column</span> <span class="k">in</span> <span class="err">$</span><span class="n">nums_in_str</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Siting Css in Cgi Script]]></title>
    <link href="http://isunix.github.io/blog/2014/11/26/siting-css-in-cgi-script/"/>
    <updated>2014-11-26T17:09:55+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/26/siting-css-in-cgi-script</id>
    <content type="html"><![CDATA[<p>While writing perl cgi scripts, when we need to add css or js files, there are two ways to add the file, one using absolute path, one using relative path. </p>

<p>First we want to check the document root of our file, we cat get it using the following way. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="c1">#!/usr/bin/env perl</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Content-type: text/plain; charset=utf-8\n\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">DOCUMENT_ROOT</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For example, in my case, it gives out the following result:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="s">&quot;/usr/local/www/apache22/data&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We assume that our server name is gopid.com, in the /usr/local/www/apache22/ dir, there are the data dir, cgi-bin dir, we make a sub-dir named steven in the data dir, then we can using the following two ways to site the css and js files.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/steven/js/bootstrap/css/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/steven/css/margin.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or using the absolute path: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;https://goopig.com/steven/js/bootstrap/css/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;https://goopig.com/steven/css/margin.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PS, if we want to print out the whole env infomation using cgi, we can using the following script:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="c1">#!/usr/local/bin/perl</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;Content-type: text/plain; charset=utf-8\n\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">foreach</span> <span class="nv">$var</span> <span class="p">(</span><span class="nb">sort</span><span class="p">(</span><span class="nb">keys</span><span class="p">(</span><span class="nv">%ENV</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">$var</span><span class="p">};</span>
</span><span class="line">    <span class="nv">$val</span> <span class="o">=~</span> <span class="n">s</span><span class="o">|\</span><span class="n">n</span><span class="o">|\\</span><span class="n">n</span><span class="o">|</span><span class="n">g</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$val</span> <span class="o">=~</span> <span class="n">s</span><span class="o">|</span><span class="s">&quot;|\\&quot;</span><span class="o">|</span><span class="n">g</span><span class="p">;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;${var}=\&quot;${val}\&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Oddmuse on Macos]]></title>
    <link href="http://isunix.github.io/blog/2014/11/24/install-oddmuse-on-macos/"/>
    <updated>2014-11-24T20:45:59+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/24/install-oddmuse-on-macos</id>
    <content type="html"><![CDATA[<p>I come across this tool through one of my colleagues. And I fell in love with it very soon. Here below are the steps I am using to set up the installation.  </p>

<p>The link for oddmuse is:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://oddmuse.org/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For MacOS user, the link is:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://download.savannah.gnu.org/releases/oddmuse/oddmuse-1.806.dmg
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This installation process is very trivial. I will write more about how to use oddmuse later. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Setup to Redirect a Site]]></title>
    <link href="http://isunix.github.io/blog/2014/11/24/apache-setup-to-redict-a-site/"/>
    <updated>2014-11-24T14:31:59+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/24/apache-setup-to-redict-a-site</id>
    <content type="html"><![CDATA[<p>While I was developing a dancer application, I usually open a new port, like goople.com:4001. Actually there is a better way to do this. </p>

<p>On our CentOS server, in the httpd.conf file, we include the following piece to it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">Include etc/apache22/Includes/*.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If it is not already there.  </p>

<p>Then in the dir,  /usr/local/etc/apache22/Includes, we will write our own configuration file. </p>

<p>Then we can make a file named sun.conf in the Includes dir and write to it something like this:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">Alias /~stsun /home/stsun/public_html
</span><span class="line">
</span><span class="line"><span class="nt">&lt;Directory</span> <span class="err">&quot;/</span><span class="na">home</span><span class="err">/</span><span class="na">stsun</span><span class="err">/</span><span class="na">public_html</span><span class="err">&quot;</span><span class="nt">&gt;</span>
</span><span class="line">	Options +Indexes FollowSymLinks
</span><span class="line">	AllowOverride All
</span><span class="line">	Order allow,deny
</span><span class="line">	Allow from all
</span><span class="line"><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print Stderr in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/11/18/print-stderr-in-perl/"/>
    <updated>2014-11-18T16:52:16+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/18/print-stderr-in-perl</id>
    <content type="html"><![CDATA[<p>I better not write one by myself, there is a very good article on this:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">http://perlmaven.com/stdout-stderr-and-redirection
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Include and Require in PHP]]></title>
    <link href="http://isunix.github.io/blog/2014/11/18/include-and-require-in-php/"/>
    <updated>2014-11-18T13:42:05+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/18/include-and-require-in-php</id>
    <content type="html"><![CDATA[<p>For a person who has experience in programming PHP, he should have heard the concept of “include”, “include_once”, “require”, “require_once”. We will give a little deailed info here.</p>

<p>1.include_once</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">The include_once statement includes and evaluates the specified file during the execution of the script. This is a behavior similar to the include statement, with the only difference being that if the code from a file has already been included, it will not be included again. As the name suggests, it will be included just once.
</span><span class="line">
</span><span class="line">include_once may be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, so in this case it may help avoid problems such as function redefinitions, variable value reassignments, etc.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.require and include</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">the differences between require and include are:  
</span><span class="line">
</span><span class="line">当要包含的文件不存在时,include产生一个警告(Warning)该语句后面的程序会继续执行；而require则导致一个致命错误（Fatal error),程序就此终止。
</span><span class="line">
</span><span class="line">include_once和require_once
</span><span class="line">应该用于在脚本执行期间同一个文件有可能被包含超过一次的情况下, 想确保它只被包含一次以避免函数重定义, 变量重新赋值等问题.
</span><span class="line">  
</span><span class="line">*.incluce在用到时加载，这个函式一般是放在流程控制的处理区段中
</span><span class="line">*.require在一开始就加载，这个函式通常放在PHP程式的最前面
</span><span class="line">*._once后缀表示已加载的不加载</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop Installation and Setup]]></title>
    <link href="http://isunix.github.io/blog/2014/11/17/hadoop-installation-and-setup/"/>
    <updated>2014-11-17T17:23:12+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/17/hadoop-installation-and-setup</id>
    <content type="html"><![CDATA[<p>This is for setting  up hadoop on ubuntu. I am using hadoop version 2.5.1, so when I search on the internet, the result I get may not apply to the version I am using, thus I keep a note of the installation process in the hope that later reference will be easier.  </p>

<p>1.install java and set java home env variable. </p>

<p>In the /etc/lib/jvm dir, make a soft link to the jdk dir their and renaming it ot “jdk” for short nanme.  and write to my .zshrc file the JAVA_HOME path variable. </p>

<p>2.edit the hadoop-env.sh file in hadoop/etc/hadoop dir by setting the java home var.</p>

<p>3.edit the core-site.xml file in hadoop/etc/hadoop dir by setting the default hadoop config which you can search by yourself.</p>

<p>4.edit the hdfs-site.xml file in hadoop/etc/hadoop dir by setting the default fs config which you can search by yourself.</p>

<p>5.edit the map-red.site.xml file in hadoop/etc/hadoop dir by setting the default fs config which you can search by yourself.  </p>

<p>6.format hdfs by issuing the following command:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">./bin/hadoop namenode -format
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.start services by executing the scripts in the sbin dir.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">./start-yarn.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>(It is not in the bin dir as is shown in most blogs.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Shell Scripts]]></title>
    <link href="http://isunix.github.io/blog/2014/11/10/notes-on-shell-scripts/"/>
    <updated>2014-11-10T16:40:55+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/10/notes-on-shell-scripts</id>
    <content type="html"><![CDATA[<p>While reading some of the scripts written by my colleagus, I found some usages to be quite tricky. Thus I keep a note of the usage here.</p>

<p>1.filename and extension parts</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="sb">`</span>basename <span class="nv">$PWD</span><span class="sb">`</span> <span class="c"># Basename of current working directory.</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;${PWD##*/}&quot;</span> <span class="c"># Basename of current working directory.</span>
</span><span class="line"><span class="nb">echo</span>
</span><span class="line"><span class="nb">echo</span> <span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span> <span class="c"># Name of script.</span>
</span><span class="line"><span class="nb">echo</span> <span class="nv">$0</span> <span class="c"># Name of script.</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;${0##*/}&quot;</span> <span class="c"># Name of script.</span>
</span><span class="line"><span class="nb">echo</span>
</span><span class="line"><span class="nv">filename</span><span class="o">=</span>test.data
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;${filename##*.}&quot;</span> <span class="c"># data</span>
</span><span class="line"><span class="c"># Extension of filename.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Perl on Centos Locally]]></title>
    <link href="http://isunix.github.io/blog/2014/11/06/install-perl-on-centos-locally/"/>
    <updated>2014-11-06T16:55:54+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/06/install-perl-on-centos-locally</id>
    <content type="html"><![CDATA[<p>Following the following steps to install perl in the local directory on your machine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="n">tar</span> <span class="o">-</span><span class="n">xzf</span> <span class="n">perl</span><span class="o">-</span><span class="mf">5.10.1</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
</span><span class="line"><span class="n">cd</span> <span class="n">perl</span><span class="o">-</span><span class="mf">5.10.1</span>
</span><span class="line"><span class="o">.</span><span class="sr">/Configure -des -Dprefix=$HOME/</span><span class="nb">local</span>
</span><span class="line"><span class="n">make</span>
</span><span class="line"><span class="n">make</span> <span class="n">test</span>
</span><span class="line"><span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pro PHP and Jquery Chap03: Object Oriented Programming]]></title>
    <link href="http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming/"/>
    <updated>2014-10-30T14:03:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>I have written some code in PHP, but I almost never use the object oriented way. Here below is some excerpts from the book “Pro PHP and Jquery”.  </p>

<p>1.How to build a class and instantiate it.   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">MyClass</span><span class="p">{</span>
</span><span class="line">    <span class="c1">//class properties and methods go here</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line">  <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It gives out something like </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="nx">object</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">)</span><span class="c1">#1 (0) { }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.The following code shows how to set and read out a class property.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">MyClass</span><span class="p">{</span>
</span><span class="line">    <span class="c1">//class properties and methods go here</span>
</span><span class="line">    <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line">  <span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">prop1</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.THe following code shows how to define methods in php. Methods are class-specific functions:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
</span><span class="line">  <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">setProperty</span><span class="p">(</span><span class="nv">$newval</span><span class="p">){</span>
</span><span class="line">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">=</span> <span class="nv">$newval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProperty</span><span class="p">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">.</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line"><span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">prop1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.Use of contructor methods:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">public</span> <span class="nv">$prop1</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m a class property!&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">echo</span> <span class="s1">&#39;The class &quot;&#39;</span><span class="p">,</span> <span class="nx">__CLASS__</span><span class="p">,</span> <span class="s1">&#39;&quot; was initiated!&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">setProperty</span><span class="p">(</span><span class="nv">$newval</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">=</span> <span class="nv">$newval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">getProperty</span><span class="p">()</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prop1</span> <span class="o">.</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Create a new object</span>
</span><span class="line"><span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">;</span>
</span><span class="line"><span class="c1">// Get the value of $prop1</span>
</span><span class="line"><span class="k">echo</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">getProperty</span><span class="p">();</span>
</span><span class="line"><span class="c1">// Output a message at the end of the file</span>
</span><span class="line"><span class="k">echo</span> <span class="s2">&quot;End of file.&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Perl Chap03]]></title>
    <link href="http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap03/"/>
    <updated>2014-10-28T16:58:25+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/28/object-oriented-perl-chap03</id>
    <content type="html"><![CDATA[<p>This is a note about chap03 in “Object oriented perl”.  </p>

<p>1.In object oriented perl, there are three rules,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="mi">1</span><span class="o">.</span> <span class="n">rule1:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">a</span> <span class="n">class</span><span class="p">,</span> <span class="n">build</span> <span class="n">a</span> <span class="nb">package</span><span class="o">.</span>
</span><span class="line"><span class="mi">2</span><span class="o">.</span> <span class="n">rule2:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">a</span> <span class="n">method</span><span class="p">,</span> <span class="nb">write</span> <span class="n">a</span> <span class="n">subroutine</span><span class="o">.</span>
</span><span class="line"><span class="mi">3</span><span class="o">.</span> <span class="n">rule3:</span> <span class="n">To</span> <span class="n">create</span> <span class="n">an</span> <span class="n">object</span><span class="p">,</span> <span class="nb">bless</span> <span class="n">a</span> <span class="n">referent</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.Some cases while calling a method through an arrow:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$hsh_ref</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">};</span><span class="c1"># Access the hash referred to by $hashref</span>
</span><span class="line"><span class="nv">$arr_ref</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span><span class="c1"># Access the array referred to by $arrayref</span>
</span><span class="line"><span class="nv">$sub_ref</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span><span class="c1"># Access the sub referred to by $subref</span>
</span><span class="line"><span class="nv">$obj_ref</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span><span class="c1"># Access the object referred to by $objref</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.When a method like <code>Bug::print_me</code> is called, the argument list that it receives begins with the object reference through which it was called, followed by any arguments that were explicitly given to the method. That means that calling </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nn">Bug::</span><span class="n">print_me</span><span class="p">(</span><span class="s">&quot;logfile&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>is not the same as calling </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nv">$nextbug</span><span class="o">-&gt;</span><span class="n">print_me</span><span class="p">(</span><span class="s">&quot;logfile&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the first case, print_me is treated as a regular subroutine so the argument list passed to <code>Bug::print_me</code> is equivalent to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="p">(</span> <span class="s">&quot;logfile&quot;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In the second case, <code>print_me</code> is treated as a method so the argument list is equivalent to:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="p">(</span> <span class="nv">$objref</span><span class="p">,</span> <span class="s">&quot;logfile&quot;</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Having a reference to the object passed as the first parameter is vital, because it means that the method then has access to the object on which it’s supposed to operate. Hence you’ll find that most methods in Perl start with something equivalent to this:   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="n">Bug</span><span class="p">;</span>
</span><span class="line"><span class="k">sub </span><span class="nf">print_me</span><span class="p">{</span>
</span><span class="line">	<span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">)</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or better still:  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="n">Bug</span><span class="p">;</span>
</span><span class="line"><span class="k">sub </span><span class="nf">print_me</span><span class="p">{</span>
</span><span class="line">	<span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This second version is better because it provides a lexically scoped copy of the argument list <code>(@args)</code>.   </p>

<p>4.Unlike other object-oriented languages, Perl doesn’t require that an object be a special kind of recordlike data structure. In fact, you can use any existing type of Perl variable—a scalar, an array, a hash—as an object in Perl.   </p>

<p>5.The <code>bless</code> function takes two arguments: a reference to the variable to be marked and a string containing the name of the class. It then sets an internal flag on the variable, indicating that it now belongs to the class.  </p>

<p>6.We didn’t bless the reference; we blessed the referent. The scalar didn’t change—only the nameless hash it refers to has been marked.   </p>

<p>7.You can check that the blessing succeeded by applying the built-in ref function to <code>$nextbug</code>. Normally, when <code>ref</code> is applied to a reference, it returns the type of that reference.  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="k">my</span> <span class="nv">$nextbug</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_id</span> <span class="o">=&gt;</span> <span class="s">&quot;00001&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">_type</span> <span class="o">=&gt;</span> <span class="s">&quot;fatal&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">_descr</span> <span class="o">=&gt;</span> <span class="s">&quot;application does not compile&quot;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nb">bless</span> <span class="nv">$nextbug</span><span class="p">,</span> <span class="s">&quot;Bug&quot;</span><span class="p">;</span>
</span><span class="line"><span class="k">print</span> <span class="nb">ref</span><span class="p">(</span><span class="nv">$nextbug</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>THe above code gives out the result, <code>Bug</code>.   </p>

<p>8.Based on the things we said above, we will show a piece of code to demonstrate how to get and set attributes in perl.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="nb">package</span> <span class="nn">CD::</span><span class="n">Music</span><span class="p">;</span>
</span><span class="line"><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="nv">$_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">sub </span><span class="nf">get_count</span><span class="p">{</span><span class="nv">$_count</span><span class="p">}</span>
</span><span class="line">    <span class="k">sub </span><span class="nf">_incr_count</span><span class="p">{</span><span class="o">++</span><span class="nv">$_count</span><span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">new</span> <span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">@arg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$class</span><span class="o">-&gt;</span><span class="n">_incr_count</span><span class="p">();</span>
</span><span class="line">    <span class="nb">bless</span><span class="p">{</span>
</span><span class="line">        <span class="n">name</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class="line">        <span class="n">singer</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class="line">        <span class="n">album</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">        <span class="n">rating</span> <span class="o">=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class="line">    <span class="p">},</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">name</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">name</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="k">sub </span><span class="nf">singer</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">singer</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="k">sub </span><span class="nf">album</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">album</span><span class="p">}</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">sub </span><span class="nf">rating</span> <span class="p">{</span>
</span><span class="line">    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$rating</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$self</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">rating</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$rating</span> <span class="k">if</span> <span class="nv">$rating</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nb">package</span> <span class="n">main</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$cd</span> <span class="o">=</span> <span class="nn">CD::</span><span class="n">Music</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="s">&quot;谁的眼泪在飞&quot;</span><span class="p">,</span> <span class="s">&quot;孟庭苇&quot;</span><span class="p">,</span> <span class="s">&quot;谁的眼泪在飞&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">singer</span><span class="o">.</span><span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">album</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$cd</span><span class="o">-&gt;</span><span class="n">rating</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;There have been &quot;</span><span class="p">,</span> <span class="nn">CD::</span><span class="n">Music</span><span class="o">-&gt;</span><span class="n">get_count</span><span class="p">(),</span> <span class="s">&quot; CD[s] created\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
</feed>
