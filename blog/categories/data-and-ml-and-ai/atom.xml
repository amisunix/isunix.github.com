<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[catogories：Data&ML&AI | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/data-and-ml-and-ai/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2019-08-02T07:54:11+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Spark的MLlib进行机器学习]]></title>
    <link href="http://isunix.github.io/blog/2019/08/01/shi-yong-sparkde-mllibjin-xing-ji-qi-xue-xi/"/>
    <updated>2019-08-01T17:55:54+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/01/shi-yong-sparkde-mllibjin-xing-ji-qi-xue-xi</id>
    <content type="html"><![CDATA[<ol>
  <li>比如我们有个case class</li>
</ol>

<p><code>scala
case class CaseClassTest(user: String, name: String)
</code></p>

<p>我们通过使用<code>mapPartitions</code>来进行操作， 注意此处<code>mapPartitions</code>的用法:</p>

<p><code>scala
val mapResult = spark.read.textFile(input).map(_.split("\t")).mapPartitions {
      iter =&gt;
        iter.map {
          iterms =&gt; CaseClassTest(iterms(0), iterms(1))
        }
    }
</code></p>

<ol>
  <li>
    <p><code>reduceByKey</code> 和 <code>case</code> 的用法</p>

    <p><code>scala
val data = gowalla.map {
      check: CheckIn =&gt; (check.user, (1L, Set(check.time), Set(check.location)))
    }.rdd.reduceByKey{
      case (left, right) =&gt; (left._1 + right._1, left._2.union(right._2),left._3.union(right._3))
    }.map{
      case (_, (checkins, days:Set[String], locations:Set[String])) =&gt;
        Vectors.dense(checkins.toDouble, days.size.toDouble, locations.size.toDouble)
        //次数，天数，地点数
    }
</code></p>
  </li>
</ol>

<p><code>reduceByKey</code> 这里是求 <code>(1L, Set(check.time), Set(check.location))</code> 中的一个元素累加，第二个元素求并集，第三个元素也是求并集. <code>case</code> 的作用是让输入符合规范； 注意在 <code>map</code> 中，我们可以限定指示变量的类型， 比如这里的 <code>check: CheckIn =&gt;</code></p>

<h4 id="section">参考</h4>

<ol>
  <li>Spark机器学习进阶实战</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中从ndarray或者DataFrame里获取数据和标签]]></title>
    <link href="http://isunix.github.io/blog/2019/07/23/pythonzhong-cong-ndarrayhuo-zhe-dataframeli-huo-qu-shu-ju-he-biao-qian/"/>
    <updated>2019-07-23T11:27:22+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/23/pythonzhong-cong-ndarrayhuo-zhe-dataframeli-huo-qu-shu-ju-he-biao-qian</id>
    <content type="html"><![CDATA[<p>如果我们有一个ndarray, 最后一列是label，前面几列是data, 我们可以通过如下的方式去获取数据(假如我们有9列):</p>

<p><code>
X = dataset[:,0:-1] or X = dataset[:,0:8]
Y = dataset[:,8]
</code></p>

<p>如果我们有个DataFrame, 我们可以通过如下的方式去获取:</p>

<p><code>
X, y = data.iloc[:,:-1], data.iloc[:,-1]
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习的流程图]]></title>
    <link href="http://isunix.github.io/blog/2019/07/07/ji-qi-xue-xi-de-liu-cheng-tu/"/>
    <updated>2019-07-07T07:32:15+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/07/ji-qi-xue-xi-de-liu-cheng-tu</id>
    <content type="html"><![CDATA[<p>下面的机器学习的一个流程图是从某视频中看到的，现在记录如下:</p>

<p><img src="/images/sun/machine_learning_flow.001.jpeg"></p>

<p>虽然说会的不难， 但是里面的每一步都很艰辛。比如被很多人认为脏活累活的”加载预处理数据集”这块，这个大家实践下来的基本共识是，这块就占了整个机器学习流程的60%到80%的工作量。所以，不要心存美好幻想，觉得机器学习或者人工智能是多么高大上和美好的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言的一些记录]]></title>
    <link href="http://isunix.github.io/blog/2019/07/05/ryu-yan-de-%5B%3F%5D-xie-ji-lu/"/>
    <updated>2019-07-05T08:00:01+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/05/ryu-yan-de-[?]-xie-ji-lu</id>
    <content type="html"><![CDATA[<p>在R语言中，如果我们有一个<code>vector</code> 叫 <code>x</code>, <code>x</code> 的值中有 <code>NA</code>，如果我们想要过滤掉 <code>x</code> 中的 <code>NA</code>, 并把过滤后的结果，赋值给变量 <code>y</code>， 可以如下操作:</p>

<p><code>r
y &lt;- x[!is.na(x)]
</code></p>

<p>如果我们再想找出 <code>y</code> 中元素大于0的元素，可以如下操作L:</p>

<p><code>r
y[y &gt; 0]
</code></p>

<p>以上两步合在一起，可以如下操作:</p>

<p><code>r
x[!is.na(x) &amp; x &gt; 0]
</code></p>

<p>如果我们直接使用 <code>x[x &gt; 0]</code> 是不行的，会得到如下的包含<code>NA</code> 值的一个 <code>vector</code>:</p>

<p><code>
 NA        NA 0.3488261        NA 2.4099262        NA        NA        NA        NA        NA 0.4626879
</code></p>

<p>创建一个4行5列的<code>matrix</code>，包含的数值是从1到20，</p>

<p><code>r
my_matrix &lt;- matrix(data=1:20, nrow = 4, ncol = 5)
</code></p>

<p>如果我想给这个<code>matrix</code>的每行添加一列，作为名字，可以采用如下的方式</p>

<p><code>r
patients &lt;- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
</code></p>

<p>但是上面这种方式，会导致<code>implicit coercion</code>, 把数字变成字符，为了解决这个问题，我们可以使用如下的方式</p>

<p><code>r
my_data &lt;- data.frame(patients, my_matrix)
</code></p>

<p>如果我们再想给每个列增加一个<code>name</code>, 可以使用如下的方式:</p>

<p><code>r
cnames &lt;- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) &lt;- cnames
</code></p>

<p>如果我们想要获取当前的工作目录,</p>

<p><code>r
getwd()
</code></p>

<p>如果我们想要切换到另外一个目录，可以</p>

<p><code>r
setwd("~/data/ISLR")
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据分析和机器学习一些摘抄]]></title>
    <link href="http://isunix.github.io/blog/2019/07/04/shu-ju-fen-xi-he-ji-qi-xue-xi-%5B%3F%5D-xie-zhai-chao/"/>
    <updated>2019-07-04T18:24:50+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/04/shu-ju-fen-xi-he-ji-qi-xue-xi-[?]-xie-zhai-chao</id>
    <content type="html"><![CDATA[<ul>
  <li>怎么对待缺失值</li>
</ul>

<p><code>Missing values play an important role in statistics and data analysis. Often, missing values must not be ignored, but rather they should be carefully
| studied to see if there's an underlying pattern or cause for their missingness.</code></p>

]]></content>
  </entry>
  
</feed>
