<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[catogories：Data&ML&AI | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/data-and-ml-and-ai/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2020-11-25T09:43:04+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[文本主题挖掘浅尝辄止]]></title>
    <link href="http://isunix.github.io/blog/2020/11/24/wen-ben-zhu-ti-wa-jue-qian-chang-zhe-zhi/"/>
    <updated>2020-11-24T17:32:37+08:00</updated>
    <id>http://isunix.github.io/blog/2020/11/24/wen-ben-zhu-ti-wa-jue-qian-chang-zhe-zhi</id>
    <content type="html"><![CDATA[<h2 id="section">前言:</h2>

<p>LDA模型还是有点复杂了，目前完全没有掌握，处于调包侠的阶段.</p>

<h2 id="section-1">代码:</h2>

<p>```python
import re
import sys
import jieba</p>

<p>user_dict_file = “my_dict_watch_77.csv”
jieba.load_userdict(user_dict_file)</p>

<p>stop_words_file = “hit_stopwords.txt”
stopwords = open(stop_words_file, ‘r’, encoding = ‘utf8’).readlines()
stopwords = [w.strip() for w in stopwords]</p>

<p>file_to_process = “watch_77.csv”</p>

<p>def word_cut(input_file):
    result_arr = []</p>

<pre><code>with open(file_to_process, 'r') as f:
for line in f.readlines():
    line = line.strip()
    if len(line) &lt; 3:
        continue

    out_str = ""
    re_chinese = re.compile(u"[\u4e00-\u9fa5]+")
    w = re.sub(r'[A-Za-z0-9]|\d+', '', str(line)) # removed chars, but what about "app"? 
    seg_list = jieba.lcut(w, cut_all=False)

    for word in seg_list:
        if word not in stopwords and word != '\t' and re_chinese.search(word, 0) and len(word.strip()) &gt;= 2:
            out_str += word
            out_str += " "

    result_arr.append(out_str.strip().split(" "))
return result_arr
</code></pre>

<p>seg_out_file = “out_file_20201124.txt”
result_arr = word_cut(file_to_process)</p>

<p>with open(seg_out_file, ‘w’,encoding = ‘utf-8’) as file:
        file.write(str(result_arr))</p>

<p>from jieba import analyse
tfidf = analyse.extract_tags</p>

<p>with open(seg_out_file, ‘r’, encoding=’utf-8’) as file:
    texts = file.readlines()</p>

<p>keywords = jieba.analyse.extract_tags(str(texts),
                                      topK=150,
                                      withWeight=True,
                                      allowPOS=(‘nr’, ‘ns’, ‘nt’, ‘nz’, ‘n’, ‘vn’, ‘v’))
for item in keywords:
    print(item)</p>

<p>from gensim import corpora, models, similarities
from gensim.models import LdaModel
from gensim.corpora import Dictionary
import pyLDAvis
import pyLDAvis.gensim</p>

<p>dictionary = corpora.Dictionary(result_arr)
corpus = [dictionary.doc2bow(text) for text in result_arr]</p>

<p>lda = LdaModel(corpus=corpus, id2word=dictionary, num_topics=10)
lda.print_topics(2)</p>

<p>vis_data = pyLDAvis.gensim.prepare(lda, corpus, dictionary)
pyLDAvis.display(vis_data)
```</p>

<h2 id="section-2">参考:</h2>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">LDA wiki</a></li>
  <li><a href="https://juejin.cn/post/6844904094771970056">文本挖掘之LDA主题模型</a></li>
  <li><a href="https://scikit-learn.org/dev/auto_examples/applications/plot_topics_extraction_with_nmf_lda.html#sphx-glr-auto-examples-applications-plot-topics-extraction-with-nmf-lda-py">LDA sk-learn</a></li>
  <li><a href="https://github.com/Nitro/scalda">LDA Scala</a></li>
  <li><a href="https://github.com/XiaoMi/MiNLP/tree/main/minlp-tokenizer">MiNLP-Tokenizer</a></li>
  <li><a href="https://www.cnblogs.com/pinard/p/6831308.html">文本主题模型之LDA(一) LDA基础： 刘建平</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/263065290">文本主题模型之LDA</a></li>
  <li><a href="https://github.com/isnowfy/snownlp">snownlp</a></li>
  <li><a href="https://www.cnblogs.com/Luv-GEM/p/10881838.html">文本主题抽取：用gensim训练LDA模型</a></li>
  <li><a href="https://github.com/fxsjy/jieba">jieba</a></li>
  <li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a></li>
  <li><a href="https://github.com/kimmy-sil/Python-beginning-practice">中文分词处理</a></li>
  <li><a href="https://blog.csdn.net/qq_16633405/article/details/80578804">Doc2Bow简介与实践Demo</a></li>
  <li><a href="https://www.analyticsvidhya.com/blog/2016/08/beginners-guide-to-topic-modeling-in-python/">Beginners Guide to Topic Modeling in Python</a></li>
  <li><a href="https://blog.csdn.net/selinda001/article/details/80446766">主题模型 LDA 入门（附 Python 代码）</a></li>
  <li><a href="https://github.com/goto456/stopwords">中文常用停用词表</a></li>
  <li><a href="https://towardsdatascience.com/topic-modeling-and-latent-dirichlet-allocation-in-python-9bf156893c24">Topic Modeling and Latent Dirichlet Allocation (LDA) in Python</a></li>
  <li><a href="https://blog.csdn.net/vs412237401/article/details/52238248">用docsim/doc2vec/LSH比较两个文档之间的相似度</a></li>
  <li><a href="https://github.com/amueller/word_cloud">wordcloud</a></li>
  <li><a href="https://github.com/bmabey/pyLDAvis">pyLDAvis</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SparkSQL入门和进阶]]></title>
    <link href="http://isunix.github.io/blog/2020/11/20/sparksqlru-men-he-jin-jie/"/>
    <updated>2020-11-20T22:08:55+08:00</updated>
    <id>http://isunix.github.io/blog/2020/11/20/sparksqlru-men-he-jin-jie</id>
    <content type="html"><![CDATA[<h2 id="section">常用的函数：</h2>

<p><code>select</code>、<code>lit</code>、<code>as</code>、<code>groupBy</code>、<code>agg</code>、<code>sum</code>、<code>as</code>、<code>where</code>、<code>withColumn</code>、 <code>col</code>、 <code>when</code>、 <code>otherwise</code>、 <code>join</code>、<code>withColumnRenamed</code>、 <code>isin</code>、 <code>cast</code>、 <code>$</code>、 <code>union</code>、 <code>gt</code>、 <code>struct</code>、<code>sort</code>、<code>desc</code>、<code>show</code>、<code>orderBy</code>、<code>asc</code>、<code>repartition</code>、<code>sortWithinPartitions</code>、<code>filter</code>、<code>selectExpr</code>、<code>pivot</code>、<code>expr</code>、<code>row_number</code>、<code>over</code>、 <code>partitionBy</code></p>

<p>```scala
df
.select($”id”,lit(1).as(“cnt”)) 
.groupBy(“idd”) 
.agg(sum(“cnt”).as(“total”))
.where(“total &gt;=” + cnt2) 
.select(“uid”,”total”)</p>

<p>```</p>

<h2 id="udf">UDF：</h2>

<p><code>spark.udf.register
</code></p>

<h2 id="section-1">参考链接:</h2>
<ul>
  <li><a href="https://blog.csdn.net/weixin_40652340/article/details/79207455">SparkSQL DSL开发
</a></li>
  <li><a href="http://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/Column.html">Column</a></li>
  <li><a href="http://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/Dataset.html">Dataset</a></li>
  <li><a href="http://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/functions\$.html">functions</a></li>
  <li><a href="http://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/index.html\#DataFrame=org.apache.spark.sql.Dataset\[org.apache.spark.sql.Row\]">sql</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-ref-functions-udf-scalar.html">Scalar User Defined Functions (UDFs)
</a></li>
  <li><a href="https://www.cnblogs.com/Diyo/p/11410895.html">SparkSQL DSL 随便写写</a></li>
  <li><a href="https://blog.csdn.net/weixin_42419342/article/details/108918139?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduend\~default-2-108918139.nonecase&amp;utm_term=sparksql中dsl&amp;spm=1000.2123.3001.4430">SparkSQL案例——用SQL和DSL两种语法格式，求出用户连续登录天数
</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些关于RNN和LSTM和GRU的阅读材料]]></title>
    <link href="http://isunix.github.io/blog/2019/08/27/%5B%3F%5D-xie-guan-yu-rnnhe-lstmhe-grude-yue-du-cai-liao/"/>
    <updated>2019-08-27T15:40:38+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/27/[?]-xie-guan-yu-rnnhe-lstmhe-grude-yue-du-cai-liao</id>
    <content type="html"><![CDATA[<p><a href="https://towardsdatascience.com/illustrated-guide-to-recurrent-neural-networks-79e5eb8049c9">Illustrated Guide to Recurrent Neural Networks</a></p>

<p><a href="https://towardsdatascience.com/illustrated-guide-to-lstms-and-gru-s-a-step-by-step-explanation-44e9eb85bf21">Illustrated Guide to LSTM’s and GRU’s: A step by step explanation</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/37204589">直觉理解LSTM和GRU</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/28687529">RNN梯度消失和爆炸的原因</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/28749444">LSTM如何解决梯度消失问题</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/32481747">人人都能看懂的GRU</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/32085405">人人都能看懂的LSTM</a></p>

<p><a href="http://kyonhuang.top/Andrew-Ng-Deep-Learning-notes/#/Sequence_Models/循环序列模型">循环序列模型</a></p>

<p><a href="http://www.ai-start.com/dl2017/html/lesson5-week1.html">第五门课 序列模型(Sequence Models)</a></p>

<p><a href="https://machinelearningmastery.com/time-series-prediction-lstm-recurrent-neural-networks-python-keras/">Time Series Prediction with LSTM Recurrent Neural Networks in Python with Keras</a></p>

<p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a></p>

<p><a href="http://www.wildml.com/2015/10/recurrent-neural-network-tutorial-part-4-implementing-a-grulstm-rnn-with-python-and-theano/">Implementing a GRU/LSTM RNN with Python and Theano</a></p>

<p><a href="http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-1-introduction-to-rnns/">Introduction to RNNs</a></p>

<p><a href="http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/">Implementing a Neural Network from Scratch in Python</a></p>

<p><a href="http://www.wildml.com/2015/09/speeding-up-your-neural-network-with-theano-and-the-gpu/">Speeding up your Neural Network with Theano and the GPU</a></p>

<p><a href="http://cs231n.github.io/optimization-2/">CS231 On Gradients And BackPropagation</a></p>

<p><a href="http://colah.github.io/posts/2015-08-Backprop/">Calculus on Computational Graphs: Backpropagation</a></p>

<p><a href="http://neuralnetworksanddeeplearning.com/chap2.html">How the backpropagation algorithm works</a></p>

<p><a href="http://cs231n.github.io/python-numpy-tutorial/">Numpy Tutorial From CS231</a></p>

<p><a href="https://www.leiphone.com/news/201908/wq1m4fNK8LNuG0Rs.html">卷积神经网络数学原理解析</a></p>

<p><a href="https://christophm.github.io/interpretable-ml-book/">Interpretable Machine Learning</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark中排序输出]]></title>
    <link href="http://isunix.github.io/blog/2019/08/27/sparkzhong-pai-xu-shu-chu/"/>
    <updated>2019-08-27T10:11:02+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/27/sparkzhong-pai-xu-shu-chu</id>
    <content type="html"><![CDATA[<p>```python
# initialize pyspark
import pandas as pd
import numpy as np
import json
np.set_printoptions(suppress=True)</p>

<p>import findspark
findspark.init()
import pyspark</p>

<p>from pyspark.sql import SparkSession
spark = SparkSession.builder \
    .appName(‘PySpark-Analysis’) \
    .config(“spark.executor.memory”, “3g”) \
    .config(“spark.executor.cores”, “8”) \
    .getOrCreate()</p>

<p>import os
folder = “xxxx”
filename = “one-big.tsv”
file = os.path.join(folder, filename)</p>

<p>df = spark.read.text(file).rdd.map(lambda r: r[0]).map(lambda line: line.split(“\t”)).toDF()</p>

<p>df.orderBy(“<em>1”, “</em>2”).coalesce(1).write.csv(“xxx2”, sep=’\t’)
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Science at the Command Line]]></title>
    <link href="http://isunix.github.io/blog/2019/08/14/data-science-at-the-command-line/"/>
    <updated>2019-08-14T14:13:16+08:00</updated>
    <id>http://isunix.github.io/blog/2019/08/14/data-science-at-the-command-line</id>
    <content type="html"><![CDATA[<p>本文是关于如何使用命令行的方式，来更好的认识你的数据.</p>

<h2 id="section">1. 常用的命令和工具:</h2>

<ul>
  <li>
    <p>基本操作命令
<code>sh
cd, mv, cat, ls, wc, rm, sort, uniq, echo
printf, pwd, mkdir, dirname, mktemp， find
mail, sendmail, crontab, export, ps
zip, du, df, tar, split
exec, type, readlink
</code></p>
  </li>
  <li>
    <p>基本工具
<code>sh
grep, egrep, pcregrep, ack
curl, wget
ssh, tmux
awk, sed
</code></p>
  </li>
  <li>
    <p>辅助命令
<code>sh
jq, git,
man, tldr
conda, pip
</code></p>
  </li>
  <li>
    <p>辅助工具
<code>sh
zsh, oh-my-zsh, sexy-bash-prompt
</code></p>
  </li>
  <li>
    <p>瑞士军刀
  <code>sh
  Perl
 </code></p>
  </li>
</ul>

<h2 id="section-1">2. 一些应用场景:</h2>

<ul>
  <li>
    <p>使用 <code>split</code> 按照特定的行数或者大小，将一个文本进行分割
<code>sh
# Split a file, each split having 10 lines (except the last split)
split -l 10 filename
# plit a file with 512 bytes in each split
split -b 512 filename
</code></p>
  </li>
  <li>
    <p>使用 <code>grep -x -f</code>  找到两个文件中的相同的行
<code>sh
grep -x -f  file1 file2
</code></p>
  </li>
  <li>
    <p>使用 <code>grep</code> 或者 <code>egrep</code> 或者 <code>pcregrep</code> 或者 <code>ack</code> 并且辅助以正则表达式， 进行复杂的文本搜索
<code>sh
# print file name with the corresponding line number for each match
grep -Hn search_string path/to/file
# invert match for excluding specific strings:
grep -v search_string path/to/file
# search in case-insensitive mode:
grep -i search_string path/to/file
# search consecutive 9 numbers
grep -E '\d{9}' path/to/file
# search consecutive 9 numbers and grab it
grep -Eo '\d{9}' path/to/file
# recursively search
grep -eilr "\bamazfit\b\|\bwatch\b" path/to/dir
</code></p>
  </li>
  <li>
    <p><code>ssh</code> 登陆远程机器并且同时运行远程操作命令
<code>sh
# ssh 远程执行命令
ssh yyy@xxx.xxx.xxx.xxx "df -h"
# ssh 使用key文件登陆， 并且做远程的端口转发
ssh -L 9007:${hive_server} ${xiaomi_host} -N -i ${keyfile}
</code></p>
  </li>
  <li>
    <p><code>awk</code> 按照特定的分隔符，查看文本有多少列， 查看想要看的列，按照条件进行筛选
<code>sh
# 以空格做分隔符， 并且打印出第二列小于20的行
awk '($2 &lt; 20){print}'
# 以'#' 做分隔符， 并且打印出第二列小于20的行
awk -F '#' '($2&gt;=8){print}'
# 以',' 做分隔符， 并且打印出列数
awk -F"," '{print NF}'
# 有多个判断条件
awk '{if ($4&lt;1 &amp;&amp; $4&gt;=0.85 &amp;&amp; $2 &gt;= 0.001) print $7}'
</code></p>
  </li>
  <li>
    <p><code>sort</code> 结合 <code>uniq</code> 去重
<code>sh
du -cks * | sort | uniq | wc -l
</code></p>
  </li>
  <li>
    <p><code>xargs</code> 传递参数
<code>sh
# xargs 结合 kill 来干掉进程
ps auxww | grep file | grep -v grep | awk '{print $2}' | xargs kill -9
# 删除找到的文件
find . -name "*.txt" | xargs -I , rm -rf ,
</code></p>
  </li>
  <li>
    <p>使用 <code>jq</code> 命令来在命令行下更好的查看json文件
<code>sh
cat file.json | jq
</code></p>
  </li>
  <li>
    <p>非常好用的 <code>|</code>
<code>sh
xx | yy | zz | dd | ee | ff | gg | hh
</code></p>
  </li>
</ul>

<h2 id="section-2">3. 参考资料:</h2>

<ul>
  <li>
    <p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux 菜鸟教程</a></p>
  </li>
  <li>
    <p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 - 教程</a></p>
  </li>
  <li>
    <p><a href="https://github.com/alebcay/awesome-shell">Awesome-Shell</a></p>
  </li>
</ul>

<p>参考链接:</p>

<ul>
  <li>
    <p><a href="https://csvkit.readthedocs.io/en/latest/tutorial/1_getting_started.html#installing-csvkit">csvkit</a></p>
  </li>
  <li>
    <p><a href="[https://www.datascienceatthecommandline.com](https://www.datascienceatthecommandline.com/)">Data Science at the Command Line</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
