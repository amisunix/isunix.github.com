<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-08-21T16:30:24+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nohup简介]]></title>
    <link href="http://isunix.github.io/blog/2014/08/21/nohupjian-jie/"/>
    <updated>2014-08-21T15:45:34+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/21/nohupjian-jie</id>
    <content type="html"><![CDATA[<p>我把这个东西放到Python的category里来，是因为我在写Flask的web应用的时候，遇到部署的问题，需要用到一个工具， 可以一直让这个web进程去运行。土鳖的我还以为这得用到cronjob， 其实用个工具可以帮我们完成这样的一个任务的， 这就是这篇post所要介绍的”nohup”</p>

<p>比如说我现在在一个叫server.sh的文件中写入了如下的内容来run一个web server:  </p>

<p><code>sh
gunicorn -w 4 -b 0.0.0.0:1234 myapp:app
</code>  </p>

<p>首先这个Flask web apppication, 不同的框架使用gunicorn大同小异。然后使用的是gunicorn这个http server. 具体的关于gunicorn的知识可以自己去查下。只是有点是：你得先安装下的:  </p>

<p><code>py
pip install gunicorn
</code>  </p>

<p>Here the “-w” args means worker, namely 4 processes here.   </p>

<p>For my application, if I want to use nohup, I will have to issue the following command. </p>

<p><code>sh
nohup ./server.sh &amp;
</code></p>

<p>Nohuo will create a nohup.out file in the directory where you run the command. </p>

<p>nohup 只不过是让进程脱离父进程, 这样即使父进程死掉，它也还在运行。</p>

<p>Thus if we want to use “jobs” to see process, we will not be able to see it. we can use the “ps a” command line to see the the process.  </p>

<p>使用 fg %jobnumber　会将任务拿到前台执行，拿到前台后如果要关闭这个任务按Ctrl+c组合键即可，但如果要暂停这个任务可以按Ctrl+z组合键这时就会将任务置于暂停状态。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check File Encoding and Convert a File to a Certain Encoding]]></title>
    <link href="http://isunix.github.io/blog/2014/08/19/check-file-encoding-and-convert-a-file-to-a-certain-encoding/"/>
    <updated>2014-08-19T13:58:55+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/19/check-file-encoding-and-convert-a-file-to-a-certain-encoding</id>
    <content type="html"><![CDATA[<p>The case scenario is: I have namy source files of codes and the commoents there and some print messages are in English, of course I can open the file in vim and issue the following command to make them to utf-8 encoding:  </p>

<p><code>vim
:set fileencoding=utf8
</code> <br />
The question here is I have many files thus I do not want to do this repeatedly. So a script to ease the pain is needed.   </p>

<p>If we want to know the file’s encoding, we can issue the following command:  </p>

<p><code>pl
file filename  
or
file -mime filename  
</code></p>

<p>Ok, I am stucked here, I have no idea how to do this ritht now. mabe later.   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Basics Snippets]]></title>
    <link href="http://isunix.github.io/blog/2014/08/14/python-basics-snippets/"/>
    <updated>2014-08-14T14:27:29+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/14/python-basics-snippets</id>
    <content type="html"><![CDATA[<p>```py
open(‘file’).read() 							# read entire file into string
open(‘file’).read(N) 							# read next N bytes into string
open(‘file’).readlines()						# read entire file into line strings list
open(‘file’).readline() 						# read next line, through ‘\n’  </p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Python on Centos Locally]]></title>
    <link href="http://isunix.github.io/blog/2014/08/14/install-python-on-centos-locally/"/>
    <updated>2014-08-14T12:25:15+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/14/install-python-on-centos-locally</id>
    <content type="html"><![CDATA[<p>This post depicts how to install Python on the CentOS in your local dir.  </p>

<p>1.First show the python2.x version.</p>

<p>```py
wget http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz <br />
tar -zxvf Python-2.7.6.tar.xz<br />
cd Python-2.7.6<br />
./configure –prefix=/home/sun/local –enable-unicode=ucs4 –enable-shared LDFLAGS=”-Wl,-rpath /home/sun/local/lib”<br />
make &amp;&amp; make altinstall</p>

<p>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py<br />
python ez_setup.py
easy_install-2.7 pip
pip2.7 install [packagename] <br />
(pip defaults to pip2.7)
```</p>

<p>2.Now the python3.x version</p>

<p>```py
wget http://python.org/ftp/python/3.4.1/Python-3.4.1.tar.xz
tar xf Python-3.4.1.tar.xz
cd Python-3.4.1
./configure –prefix=/hom/sun/local –enable-shared LDFLAGS=”-Wl,-rpath /home/sun/local/lib”
make &amp;&amp; make altinstall  </p>

<p>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py<br />
mv python3.4 python3
python3 ez_setup.py
easy_install-3.4 pip
pip3 install [packagename]   </p>

<p>```  </p>

<p>If you want to install the package used by python3, you need to using the command “pip3 install [packagename]”, otherwise just “pip install [packagename]”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning Python Study Notes]]></title>
    <link href="http://isunix.github.io/blog/2014/06/27/beginning-python-study-notes/"/>
    <updated>2014-06-27T16:15:19+08:00</updated>
    <id>http://isunix.github.io/blog/2014/06/27/beginning-python-study-notes</id>
    <content type="html"><![CDATA[<ol>
  <li>input会假设用户的输入是合法的python表达式，而raw_input则不做这样的要求的。  </li>
  <li>在python中列表可以修改， 而元组则不能；会使用改变列表的常用method。   </li>
  <li>一般使用元组作为字典的建， 这种情况下，因为键不可修改，所以就不能够使用列表了。  </li>
  <li>列表的各个元素通过逗号分隔， 写在方括号中。   </li>
  <li>如果分片所得部包括序列结尾的元素， 那么，只需置空最后一个索引即可， 如numbers[-3:], 同样的方法也可以用于序列的开始的元素的。numbers[:3], 如果需要复制整个的序列，可以将两个索引都置空的: numbers[:]   </li>
  <li>pop方法是唯一一既能修改列表又返回元素值的列表方法(除了None)。</li>
  <li>（42，）这是只有一个元素的元组。  </li>
  <li>strip方法返回去除两侧(不包括内部)空格的字符串；</li>
  <li>字典中的值并没有特殊的顺序，但是都存储在一个特定的键里， 键可以是数字， 字符串， 甚至是元组。  </li>
  <li>range函数包含下限， 但是不包含上限。   </li>
  <li>break会跳出循环， 而continue会结束当前的迭代然后跳到下一轮循环的开始的。  </li>
  <li>想要什么事情都不做， 使用pass就可以了。</li>
  <li>执行一个字符串的语句是exec， 如， exec “print ”hello world“   </li>
  <li>eval会计算python表达式， 并且返回结果值。  </li>
  <li>并非所有的python函数都是有返回值的。</li>
  <li>get used to “try except else clause”.</li>
  <li>try finally, finally 可以在可能的异常后面进行清理。   </li>
  <li>sys这个模块能够让你访问与python解释器联系紧密的变量还有函数。</li>
  <li>os模块为你提供了多个访问操作系统服务的功能。  </li>
  <li>关注fileinput这个模块。   </li>
  <li>关注time模块。</li>
  <li>关注re模块。</li>
  <li>re.compile将正则表达式(以字符串书写的)转换为模式对象，可以实现更有效率的匹配。  </li>
  <li>关注getopt还有optparse这两个模块。  </li>
  <li>dir(obj)会返回按字母顺序排序的属性名称列表。  </li>
  <li>help(obj)会提供交互式帮助或者关于特定对象的交互帮助信息。   </li>
  <li>python的open函数的第三个参数控制着文件的缓冲， 如果参数是0， I/O就是无缓冲的， 如果是1， I/O就是有缓冲的, 这就意味着python使用内存来代替硬盘， 让程序更快， 是有使用flush或者close的时候才会更新硬盘上的数据。大于1的数据代表缓冲区的大小，-1代表使用默认的缓冲区的大小。  </li>
  <li>关注urllib还有urllib2模块。   </li>
  <li>关注HTMLParser模块。  </li>
  <li>关注模块BeautifulSoup4</li>
</ol>
]]></content>
  </entry>
  
</feed>
