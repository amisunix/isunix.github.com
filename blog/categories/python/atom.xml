<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2015-11-02T16:23:15+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resources for Learning Wsgi]]></title>
    <link href="http://isunix.github.io/blog/2015/10/27/resources-for-learning-wsgi/"/>
    <updated>2015-10-27T16:14:52+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/27/resources-for-learning-wsgi</id>
    <content type="html"><![CDATA[<p>Here below are some resources I used to learn wsgi and tornado werkzeug.</p>

<ol>
  <li>wsgi:</li>
</ol>

<p><code>html
https://brodie.io/journal/why-wsgi/
http://wsgi.readthedocs.org/en/latest/what.html
https://www.python.org/dev/peps/pep-3333/
http://wsgi.readthedocs.org/en/latest/learn.html
http://wsgi.tutorial.codepoint.net/
http://linuxgazette.net/115/orr.html
</code></p>

<ol>
  <li>werkzeug:</li>
</ol>

<p><code>html
http://werkzeug.pocoo.org/
https://github.com/mitsuhiko/werkzeug
</code></p>

<ol>
  <li>websocket:</li>
</ol>

<p><code>html
http://buildnewgames.com/websockets/
http://rz.scale-it.pl/2013/01/25/tornado___the_best_web_framework.html
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Decorator and @app.route in Flask]]></title>
    <link href="http://isunix.github.io/blog/2015/10/23/about-decorator-and-at-app-dot-route-in-flask/"/>
    <updated>2015-10-23T14:09:30+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/23/about-decorator-and-at-app-dot-route-in-flask</id>
    <content type="html"><![CDATA[<p>About decorator and Flask’s @app.route internal mechanism, I found a good post:</p>

<p><code>html
http://ains.co/blog/things-which-arent-magic-flask-part-1.html
http://ains.co/blog/things-which-arent-magic-flask-part-2.html
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Basics About Generators in Python]]></title>
    <link href="http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python/"/>
    <updated>2015-10-19T08:46:43+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python</id>
    <content type="html"><![CDATA[<p>Here below is a reference for learning python generators:</p>

<p><code>html
http://www.dabeaz.com/generators/
http://www.dabeaz.com/finalgenerator/
http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855
</code></p>

<p>A basic explanation about the “for” statement in python:</p>

<p><code>py
for x in obj:
	#statements
</code></p>

<p>and how it is realized:</p>

<p><code>py
_iter = iter(obj)
while 1:
	try:
		x = _iter.next()
	except StopIteration:
		break
	#statements
</code></p>

<p>and why the “StopIteration” in the above code? It happens in iterables:</p>

<p><code>py
&gt;&gt;&gt; items = [1,2,3]
&gt;&gt;&gt; it = iter(items)
&gt;&gt;&gt; it.next()
1
&gt;&gt;&gt; it.next()
2
&gt;&gt;&gt; it.next()
3
&gt;&gt;&gt; it.next()
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</code></p>

<p>and now will implement a user defined object that supports iterable:</p>

<p>```py
class countdown(object):
    def <strong>init</strong>(self, start):
        self.count = start</p>

<pre><code>def __iter__(self):
    return self

def next(self):
    if self.count &lt;= 0:
        raise StopIteration
    r = self.count
    self.count -= 1
    return r
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    c = countdown(3)
    for i in c:
        print(i)
```</p>

<p>countdown using generator:</p>

<p>```py
def countdown(n):
    while n &gt; 0:
        yield n
        n -= 1</p>

<p>for i in countdown(5):
    print(i)</p>

<p>```</p>

<p>About how to use non-generator methods, generator methods, awk to calculate the sum of a columns of numbs.</p>

<p>The records in the log file looks like this:</p>

<p><code>
156.63.68.202 - - [29/Feb/2008:07:49:28 -0600] "GET /favicon.ico HTTP/1.1" 404 133
80.161.85.77 - - [29/Feb/2008:07:52:46 -0600] "GET /ply/ply.html HTTP/1.1" 200 97238
</code></p>

<p>First the non-generator method:</p>

<p>```py
wwwlog = open(“access-log”)
total = 0
for line in wwwlog:
    bytestr = line.rsplit(None,1)[1]
    if bytestr != ‘-‘:
        total += int(bytestr)</p>

<p>print “Total”, total
```</p>

<p>and the generator method:</p>

<p>```py
wwwlog     = open(“access-log”)
bytecolumn = (line.rsplit(None,1)[1] for line in wwwlog)
bytes      = (int(x) for x in bytecolumn if x != ‘-‘)</p>

<p>print “Total”, sum(bytes)
```</p>

<p>and then the awk method:</p>

<p><code>awk
awk '{ total += $NF } END { print total }' access-log
</code></p>

<p>PS: (a very useful shell script tutorial)</p>

<p><code>html
http://www.grymoire.com/Unix/Sh.html
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Python Resources to Be Referenced]]></title>
    <link href="http://isunix.github.io/blog/2015/10/14/some-python-resources-to-be-referenced/"/>
    <updated>2015-10-14T16:24:06+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/14/some-python-resources-to-be-referenced</id>
    <content type="html"><![CDATA[<p>This post is a collection of useful python resources.</p>

<p>```html
https://github.com/vinta/awesome-python
(a collection of use python libraries)</p>

<p>http://www.fullstackpython.com/django.html
(shows resources about being a full stack python developer)</p>

<p>http://www.fullstackpython.com/best-python-resources.html
(cool python resources)</p>

<p>http://www.fullstackpython.com/web-frameworks.html
(about python web frameworks)</p>

<p>http://twoscoopspress.org/pages/current-django-books
(current django books)</p>

<p>http://python.jobbole.com
(python section in jobbole)</p>

<p>https://www.djangopackages.com/
(useful django packages)</p>

<p>https://github.com/rosarior/awesome-django
(we have awesome python, now we have awesome django</p>

<p>https://code.djangoproject.com/wiki/DjangoResources
(django resources)</p>

<p>http://elweb.co/33-projects-that-make-developing-django-apps-awesome/
(tools to help django develop)</p>

<p>http://jessenoller.com/good-to-great-python-reads/
(some good resources on python knowledges)</p>

<p>http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855
(about the yield keyword)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Decorator Examples]]></title>
    <link href="http://isunix.github.io/blog/2015/10/13/python-decorator-examples/"/>
    <updated>2015-10-13T16:54:03+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/13/python-decorator-examples</id>
    <content type="html"><![CDATA[<p>Maybe I will just paste the link here,</p>

<p><code>html
http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484
</code></p>
]]></content>
  </entry>
  
</feed>
