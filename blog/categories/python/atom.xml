<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2018-10-11T17:16:21+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<p>```py
import pip
from subprocess import call</p>

<p>for dist in pip.get_installed_distributions():
    call(“pip install –upgrade “ + dist.project_name, shell=True)
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python Request to Download Movies]]></title>
    <link href="http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies/"/>
    <updated>2015-12-04T14:50:25+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies</id>
    <content type="html"><![CDATA[<p>This post shows a working way to download movies using python requests module.</p>

<p>```py
import requests
import re
import sys</p>

<p>class MovieDownload:
    def <strong>init</strong>(self, url):
        self.url = url
        if self.url.<strong>contains</strong>(‘//’):
            self.download_movie()
        else:
            print(“wrong url entered”)</p>

<pre><code>def download_movie(self):
    r = requests.get(self.url)
    pattern_title = re.compile('&lt;h2 class="entry_title"&gt;(.*?)&lt;/h2&gt;')
    title = re.findall(pattern_title, r.text)[0].split('/')[0]
    pattern_to_download = re.compile('&lt;li&gt;&lt;a href="(.*?)"&gt;.*?1024\.mkv.*?&lt;/a&gt;')
    movie_urls = re.findall(pattern_to_download, r.text)

    with open('movie.txt', 'w') as f:
        print("There are {} urls here!\n".format(len(movie_urls)))
        f.write("There are {} urls here!\n\n".format(len(movie_urls)))
        for movie_url in movie_urls:
            print("{}\n".format(movie_url))
            f.write("{}\n\n".format(movie_url))
</code></pre>

<p>url = “http://cn163.net/archives/3639/”
MovieDownload(url)</p>

<p>sys.exit(0)
```</p>

<p>and then execute the script as:</p>

<p><code>sh
python3 movie_download.py
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycharm Shortcuts]]></title>
    <link href="http://isunix.github.io/blog/2015/11/20/pycharm-shortcuts/"/>
    <updated>2015-11-20T18:47:53+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/20/pycharm-shortcuts</id>
    <content type="html"><![CDATA[<p>The following are some notes on using pycharm.</p>

<p>1.shortcuts</p>

<p><code>sh
cmd+O           (search class)
cmd+shift+O     (search file name)
cmd+alt+O       (go to symbol), then hit cmd+y to get a preview, hit enter will jump to the code.
by ctrl+clicking a method name, you will be redirected to its definition.
for a html file, type "!" then type "tab" key will give a basic html5 template.
for flask project, in the .py file, type 'flaskp' and hit "tab", will give you the definition of post method.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ptpython With Python3 as the Backend]]></title>
    <link href="http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend/"/>
    <updated>2015-11-19T12:32:02+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend</id>
    <content type="html"><![CDATA[<p>I want to use ptpython with python3 as the interpreter, here is how:</p>

<p><code>sh
pip3 install ptpython
python3 -m ptpython
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Basics About Generators in Python]]></title>
    <link href="http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python/"/>
    <updated>2015-10-19T08:46:43+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/19/some-basics-about-generators-in-python</id>
    <content type="html"><![CDATA[<p>Here below is a reference for learning python generators:</p>

<p><code>html
http://www.dabeaz.com/generators/
http://www.dabeaz.com/finalgenerator/
http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python/231855#231855
</code></p>

<p>A basic explanation about the “for” statement in python:</p>

<p><code>py
for x in obj:
	#statements
</code></p>

<p>and how it is realized:</p>

<p><code>py
_iter = iter(obj)
while 1:
	try:
		x = _iter.next()
	except StopIteration:
		break
	#statements
</code></p>

<p>and why the “StopIteration” in the above code? It happens in iterables:</p>

<p><code>py
&gt;&gt;&gt; items = [1,2,3]
&gt;&gt;&gt; it = iter(items)
&gt;&gt;&gt; it.next()
1
&gt;&gt;&gt; it.next()
2
&gt;&gt;&gt; it.next()
3
&gt;&gt;&gt; it.next()
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</code></p>

<p>and now will implement a user defined object that supports iterable:</p>

<p>```py
class countdown(object):
    def <strong>init</strong>(self, start):
        self.count = start</p>

<pre><code>def __iter__(self):
    return self

def next(self):
    if self.count &lt;= 0:
        raise StopIteration
    r = self.count
    self.count -= 1
    return r
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    c = countdown(3)
    for i in c:
        print(i)
```</p>

<p>countdown using generator:</p>

<p>```py
def countdown(n):
    while n &gt; 0:
        yield n
        n -= 1</p>

<p>for i in countdown(5):
    print(i)</p>

<p>```</p>

<p>About how to use non-generator methods, generator methods, awk to calculate the sum of a columns of numbs.</p>

<p>The records in the log file looks like this:</p>

<p><code>
156.63.68.202 - - [29/Feb/2008:07:49:28 -0600] "GET /favicon.ico HTTP/1.1" 404 133
80.161.85.77 - - [29/Feb/2008:07:52:46 -0600] "GET /ply/ply.html HTTP/1.1" 200 97238
</code></p>

<p>First the non-generator method:</p>

<p>```py
wwwlog = open(“access-log”)
total = 0
for line in wwwlog:
    bytestr = line.rsplit(None,1)[1]
    if bytestr != ‘-‘:
        total += int(bytestr)</p>

<p>print “Total”, total
```</p>

<p>and the generator method:</p>

<p>```py
wwwlog     = open(“access-log”)
bytecolumn = (line.rsplit(None,1)[1] for line in wwwlog)
bytes      = (int(x) for x in bytecolumn if x != ‘-‘)</p>

<p>print “Total”, sum(bytes)
```</p>

<p>and then the awk method:</p>

<p><code>awk
awk '{ total += $NF } END { print total }' access-log
</code></p>

<p>PS: (a very useful shell script tutorial)</p>

<p><code>html
http://www.grymoire.com/Unix/Sh.html
</code></p>
]]></content>
  </entry>
  
</feed>
