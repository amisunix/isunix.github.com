<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2019-05-07T17:02:01+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<p>```py
import pip
from subprocess import call</p>

<p>for dist in pip.get_installed_distributions():
    call(“pip install –upgrade “ + dist.project_name, shell=True)
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python Request to Download Movies]]></title>
    <link href="http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies/"/>
    <updated>2015-12-04T14:50:25+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies</id>
    <content type="html"><![CDATA[<p>This post shows a working way to download movies using python requests module.</p>

<p>```py
import requests
import re
import sys</p>

<p>class MovieDownload:
    def <strong>init</strong>(self, url):
        self.url = url
        if self.url.<strong>contains</strong>(‘//’):
            self.download_movie()
        else:
            print(“wrong url entered”)</p>

<pre><code>def download_movie(self):
    r = requests.get(self.url)
    pattern_title = re.compile('&lt;h2 class="entry_title"&gt;(.*?)&lt;/h2&gt;')
    title = re.findall(pattern_title, r.text)[0].split('/')[0]
    pattern_to_download = re.compile('&lt;li&gt;&lt;a href="(.*?)"&gt;.*?1024\.mkv.*?&lt;/a&gt;')
    movie_urls = re.findall(pattern_to_download, r.text)

    with open('movie.txt', 'w') as f:
        print("There are {} urls here!\n".format(len(movie_urls)))
        f.write("There are {} urls here!\n\n".format(len(movie_urls)))
        for movie_url in movie_urls:
            print("{}\n".format(movie_url))
            f.write("{}\n\n".format(movie_url))
</code></pre>

<p>url = “http://cn163.net/archives/3639/”
MovieDownload(url)</p>

<p>sys.exit(0)
```</p>

<p>and then execute the script as:</p>

<p><code>sh
python3 movie_download.py
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ptpython With Python3 as the Backend]]></title>
    <link href="http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend/"/>
    <updated>2015-11-19T12:32:02+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/19/using-ptpython-with-python3-as-the-backend</id>
    <content type="html"><![CDATA[<p>I want to use ptpython with python3 as the interpreter, here is how:</p>

<p><code>sh
pip3 install ptpython
python3 -m ptpython
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing From Multiple Requirements Files]]></title>
    <link href="http://isunix.github.io/blog/2015/09/21/installing-from-multiple-requirements-files/"/>
    <updated>2015-09-21T16:18:23+08:00</updated>
    <id>http://isunix.github.io/blog/2015/09/21/installing-from-multiple-requirements-files</id>
    <content type="html"><![CDATA[<p>Say we want to install modules from multiple requirement files. We will put the requirement files in the directory “requirements”.</p>

<p>First the base.txt file.</p>

<p><code>
Django==1.7.10
psycopg2==2.4.5
</code></p>

<p>Then the file local.txt</p>

<p><code>
-r base.txt
django-discover-runner==0.2.2
</code></p>

<p>and production.txt(production installaions should be close to what is used in other locations, so production.txt commonly just calls base.txt)</p>

<p><code>
-r base.txt
</code></p>

<p>The for local and production env, we can issue the following commands:</p>

<p><code>sh
pip install -r requirements/local.txt
</code></p>

<p><code>sh
pip install -r requirements/production.txt
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Multiple Versions of Python in Pyenv]]></title>
    <link href="http://isunix.github.io/blog/2015/07/28/enable-multiple-versions-of-python-in-pyenv/"/>
    <updated>2015-07-28T15:12:47+08:00</updated>
    <id>http://isunix.github.io/blog/2015/07/28/enable-multiple-versions-of-python-in-pyenv</id>
    <content type="html"><![CDATA[<p>When I am using python installed from pyenv, we can enable different python versions by issuing the following command:</p>

<p><code>python
pyenv global 2.7.10 3.4.3
</code></p>

<p>This way we can use python2 and python3.</p>

]]></content>
  </entry>
  
</feed>
