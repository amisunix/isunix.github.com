<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[catogories：Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2019-08-02T07:58:07+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python中不输出warning的信息]]></title>
    <link href="http://isunix.github.io/blog/2019/07/29/pythonzhong-bu-shu-chu-warningde-xin-xi/"/>
    <updated>2019-07-29T13:36:53+08:00</updated>
    <id>http://isunix.github.io/blog/2019/07/29/pythonzhong-bu-shu-chu-warningde-xin-xi</id>
    <content type="html"><![CDATA[<p>我们在<code>Python</code> 代码中，如果不想输出一些warnings, 可以在代码的一开始，加入如下的代码，就可以了.</p>

<p><code>py
import warnings
warnings.filterwarnings('ignore')
</code>
filterwarnings 函数可以带参数的，上述的方式是把所有的warnings都给ignore了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipenv使用备忘]]></title>
    <link href="http://isunix.github.io/blog/2019/05/31/pipenvshi-yong-bei-wang/"/>
    <updated>2019-05-31T08:22:14+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/31/pipenvshi-yong-bei-wang</id>
    <content type="html"><![CDATA[<p>我在某个python环境下有很多包，我们使用如下的命令把这些包给输出到requirements.txt里去</p>

<p><code>sh
pip freeze &gt; requirements.txt
</code></p>

<p>然后我们使用pipenv来创建一个虚拟环境</p>

<p><code>sh
mkdir xxx &amp;&amp; mv requirements.txt xxx &amp;&amp; cd xxx
pipenv --python 3.6
pipenv shell
pipenv install --dev
</code></p>

<p>如果我们想删除创建的virtualenv, 可以</p>

<p><code>sh
pipenv --rm
</code></p>

<p>也可以到<code>~/.local/share/virtualenvs</code>下面去手动删除.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用豆瓣源安装python包]]></title>
    <link href="http://isunix.github.io/blog/2019/05/31/shi-yong-dou-ban-yuan-an-zhuang-pythonbao/"/>
    <updated>2019-05-31T08:01:15+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/31/shi-yong-dou-ban-yuan-an-zhuang-pythonbao</id>
    <content type="html"><![CDATA[<p>我们在使用pip安装python的包的时候，可以使用豆瓣源来提高下载速度</p>

<p><code>sh
pip  install  requests -i  https://pypi.doubanio.com/simple/  --trusted-host pypi.doubanio.com
</code></p>

<p>在linux和mac上，我们可以在$HOME/.pip/pip.conf里面，写入如下的内容, 那样就不用每次都像上面那样写那么长的一大串了</p>

<p><code>sh
[global]
index-url = https://pypi.doubanio.com/simple
[install]
trusted-host = pypi.doubanio.com
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update All Python Modules Through Pip]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip/"/>
    <updated>2016-03-31T16:32:49+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-python-modules-through-pip</id>
    <content type="html"><![CDATA[<p>I want to update all the installed python modules through pip. Here below is one recipe I found.</p>

<p>```py
import pip
from subprocess import call</p>

<p>for dist in pip.get_installed_distributions():
    call(“pip install –upgrade “ + dist.project_name, shell=True)
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Python Request to Download Movies]]></title>
    <link href="http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies/"/>
    <updated>2015-12-04T14:50:25+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/04/use-python-request-to-download-movies</id>
    <content type="html"><![CDATA[<p>This post shows a working way to download movies using python requests module.</p>

<p>```py
import requests
import re
import sys</p>

<p>class MovieDownload:
    def <strong>init</strong>(self, url):
        self.url = url
        if self.url.<strong>contains</strong>(‘//’):
            self.download_movie()
        else:
            print(“wrong url entered”)</p>

<pre><code>def download_movie(self):
    r = requests.get(self.url)
    pattern_title = re.compile('&lt;h2 class="entry_title"&gt;(.*?)&lt;/h2&gt;')
    title = re.findall(pattern_title, r.text)[0].split('/')[0]
    pattern_to_download = re.compile('&lt;li&gt;&lt;a href="(.*?)"&gt;.*?1024\.mkv.*?&lt;/a&gt;')
    movie_urls = re.findall(pattern_to_download, r.text)

    with open('movie.txt', 'w') as f:
        print("There are {} urls here!\n".format(len(movie_urls)))
        f.write("There are {} urls here!\n\n".format(len(movie_urls)))
        for movie_url in movie_urls:
            print("{}\n".format(movie_url))
            f.write("{}\n\n".format(movie_url))
</code></pre>

<p>url = “http://cn163.net/archives/3639/”
MovieDownload(url)</p>

<p>sys.exit(0)
```</p>

<p>and then execute the script as:</p>

<p><code>sh
python3 movie_download.py
</code></p>
]]></content>
  </entry>
  
</feed>
