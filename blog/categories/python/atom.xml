<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-10-28T21:30:45+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Flask]]></title>
    <link href="http://isunix.github.io/blog/2014/08/27/notes-on-flask/"/>
    <updated>2014-08-27T12:10:36+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/27/notes-on-flask</id>
    <content type="html"><![CDATA[<p>I have been learning Flask for quite a while. This is a note to keep down of all those snippets and notes I have learnt and hope to keep it as a reminder.  </p>

<p>1.if you want to get the browser info, use the following code:  </p>

<p><code>py
from flask import request
@app.route('/')
def index():
	user_agent = request.headers.get('User-Agent')
	return '&lt;p&gt;Your browser is %s&lt;/p&gt;' % user_agent
</code>  </p>

<p>2.There are two contexts in Flask: the application context and the request context.  </p>

<p>3.before_first_request: Register a function to run before the first request is
handled.  </p>

<p>4.before_request: Register a function to run before each request.  </p>

<p>5.after_request: Register a function to run after each request, if no unhandled exceptions occurred.  </p>

<p>6.teardown_request: Register a function to run after each request, even if unhandled
exceptions occurred.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nohup简介]]></title>
    <link href="http://isunix.github.io/blog/2014/08/21/nohupjian-jie/"/>
    <updated>2014-08-21T15:45:34+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/21/nohupjian-jie</id>
    <content type="html"><![CDATA[<p>我把这个东西放到Python的category里来，是因为我在写Flask的web应用的时候，遇到部署的问题，需要用到一个工具， 可以一直让这个web进程去运行。土鳖的我还以为这得用到cronjob， 其实用个工具可以帮我们完成这样的一个任务的， 这就是这篇post所要介绍的”nohup”</p>

<p>比如说我现在在一个叫server.sh的文件中写入了如下的内容来run一个web server:  </p>

<p><code>sh
gunicorn -w 4 -b 0.0.0.0:1234 myapp:app
</code>  </p>

<p>首先这个Flask web apppication, 不同的框架使用gunicorn大同小异。然后使用的是gunicorn这个http server. 具体的关于gunicorn的知识可以自己去查下。只是有点是：你得先安装下的:  </p>

<p><code>py
pip install gunicorn
</code>  </p>

<p>Here the “-w” args means worker, namely 4 processes here.   </p>

<p>For my application, if I want to use nohup, I will have to issue the following command. </p>

<p><code>sh
nohup ./server.sh &amp;
</code></p>

<p>Nohuo will create a nohup.out file in the directory where you run the command. </p>

<p>nohup 只不过是让进程脱离父进程, 这样即使父进程死掉，它也还在运行。</p>

<p>Thus if we want to use “jobs” to see process, we will not be able to see it. we can use the “ps a” command line to see the the process.  </p>

<p>使用 fg %jobnumber　会将任务拿到前台执行，拿到前台后如果要关闭这个任务按Ctrl+c组合键即可，但如果要暂停这个任务可以按Ctrl+z组合键这时就会将任务置于暂停状态。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check File Encoding and Convert a File to a Certain Encoding]]></title>
    <link href="http://isunix.github.io/blog/2014/08/19/check-file-encoding-and-convert-a-file-to-a-certain-encoding/"/>
    <updated>2014-08-19T13:58:55+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/19/check-file-encoding-and-convert-a-file-to-a-certain-encoding</id>
    <content type="html"><![CDATA[<p>The case scenario is: I have namy source files of codes and the commoents there and some print messages are in English, of course I can open the file in vim and issue the following command to make them to utf-8 encoding:  </p>

<p><code>vim
:set fileencoding=utf8
</code> <br />
The question here is I have many files thus I do not want to do this repeatedly. So a script to ease the pain is needed.   </p>

<p>If we want to know the file’s encoding, we can issue the following command:  </p>

<p><code>pl
file filename  
or
file -mime filename  
</code></p>

<p>Ok, I am stucked here, I have no idea how to do this ritht now. mabe later.   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Basics Snippets]]></title>
    <link href="http://isunix.github.io/blog/2014/08/14/python-basics-snippets/"/>
    <updated>2014-08-14T14:27:29+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/14/python-basics-snippets</id>
    <content type="html"><![CDATA[<p>```py
open(‘file’).read() 							# read entire file into string
open(‘file’).read(N) 							# read next N bytes into string
open(‘file’).readlines()						# read entire file into line strings list
open(‘file’).readline() 						# read next line, through ‘\n’  </p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Python on Centos Locally]]></title>
    <link href="http://isunix.github.io/blog/2014/08/14/install-python-on-centos-locally/"/>
    <updated>2014-08-14T12:25:15+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/14/install-python-on-centos-locally</id>
    <content type="html"><![CDATA[<p>This post depicts how to install Python on the CentOS in your local dir.  </p>

<p>1.First show the python2.x version.</p>

<p>```py
wget http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz <br />
tar -zxvf Python-2.7.6.tar.xz<br />
cd Python-2.7.6<br />
./configure –prefix=/home/sun/local –enable-unicode=ucs4 –enable-shared LDFLAGS=”-Wl,-rpath /home/sun/local/lib”<br />
make &amp;&amp; make altinstall</p>

<p>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py<br />
python ez_setup.py
easy_install-2.7 pip
pip2.7 install [packagename] <br />
(pip defaults to pip2.7)
```</p>

<p>2.Now the python3.x version</p>

<p>```py
wget http://python.org/ftp/python/3.4.1/Python-3.4.1.tar.xz
tar xf Python-3.4.1.tar.xz
cd Python-3.4.1
./configure –prefix=/hom/sun/local –enable-shared LDFLAGS=”-Wl,-rpath /home/sun/local/lib”
make &amp;&amp; make altinstall  </p>

<p>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py<br />
mv python3.4 python3
python3 ez_setup.py
easy_install-3.4 pip
pip3 install [packagename]   </p>

<p>```  </p>

<p>If you want to install the package used by python3, you need to using the command “pip3 install [packagename]”, otherwise just “pip install [packagename]”</p>
]]></content>
  </entry>
  
</feed>
