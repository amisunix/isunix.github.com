<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-07-24T15:45:53+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Typical Perl Script to Search Info in a File]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/a-typical-perl-script-to-search-info-in-a-file/"/>
    <updated>2014-07-24T15:33:54+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/a-typical-perl-script-to-search-info-in-a-file</id>
    <content type="html"><![CDATA[<p>This one is where I excerpted from the book “perl for dummies”.  </p>

<p>```perl</p>

<p>$TheDB = ‘edata.txt’;</p>

<p>open(INDB, $TheDB) or die “The database $TheDB could “ . “not be found.\n”;</p>

<p>while(1) { </p>

<p>print “\nDo you want to search by employee ID (I), “ . “ or quit (Q): “;</p>

<p>$DoSearch = <stdin>;
  chomp($DoSearch);
  $DoSearch =~ tr/A-Z/a-z/;</stdin></p>

<p>if($DoSearch eq ‘q’) { last }</p>

<p>unless($DoSearch eq ‘i’) {
    print “You must enter either I or Q.\n”;
    next; 
  }</p>

<p>print “Search for ID number: “;
  $SearchFor = <stdin>;
  chomp($SearchFor);</stdin></p>

<p>seek(INDB, 0, 0);   ##search from the beginning of file.</p>

<p>$SuccessCount = 0;</p>

<p>while(<indb>) {
    $TheRec = $_;
    chomp($TheRec);
    ($LastName, $FirstName, $ID, $Tel) =
      split(/\t/, $TheRec);
    if($ID eq $SearchFor) {
      $SuccessCount = $SuccessCount + 1;
      print "$ID: $FirstName $LastName, ext. ". "$Tel\n";
    } 
  } </indb></p>

<p>if($SuccessCount == 0) { print “No records found.\n” }
  else { print “$SuccessCount records found.\n” }
} </p>

<p>print “Program finished.\n”;</p>

<p>```
We can learn the use of while, endless loop, file-handle, last, tr, seek, $_, eq, split, string concatenation if-else, chomp, ==, eq all these things in one perl script.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Typical Perl Program]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/a-typical-perl-program/"/>
    <updated>2014-07-24T15:17:20+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/a-typical-perl-program</id>
    <content type="html"><![CDATA[<p>Of courese there are many perl programms that can be claimed as “typical”, yet you can not what is truely “typical”. The one below is where I met in the book “perl for dummies”. Ok, show you the code now.   </p>

<p>```perl  </p>

<p>$TheFile = “sample.txt”;</p>

<p>open(INFILE, $TheFile) or die “The file $TheFile could “ .  “not be found.\n”;</p>

<p>$CharCount = 0;
$WordCount = 0;
$LineCount = 0;</p>

<p>while(<infile>) {
  $TheLine = $_;
  chomp($TheLine);</infile></p>

<p>$LineCount = $LineCount + 1;
  $LineLen = length($TheLine);
  $CharCount = $CharCount + $LineLen;</p>

<p>if($TheLine eq “”) { next }; ##evaluate the next line;
  $WordCount = $WordCount + 1;
  $CharPos = 0;</p>

<p>until($CharPos == $LineLen) {
    if(substr($TheLine, $CharPos, 1) eq “ “)
      { $WordCount = $WordCount + 1 }
    $CharPos = $CharPos + 1;
  }
}</p>

<p>print “For the file $TheFile:\n”;
print “Number of characters $CharCount\n”;
print “Number of words    $WordCount\n”;
print “Number of lines    $LineCount\n”;</p>

<p>```    </p>

<p>I list this program here, because We can learn how to use chomp, length, $_, &lt;&gt;, until, next, eq, ==, next, substr, FILEHANDLE, string concatenation, how to tell if it is a word and so on, all these import concepts in perl programming in one script. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl One-liner to Remove Blank Lines]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/perl-one-liner-to-remove-blank-lines/"/>
    <updated>2014-07-24T15:05:16+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/perl-one-liner-to-remove-blank-lines</id>
    <content type="html"><![CDATA[<p>Here below is the one-liner I found to remove a blank line in a file.   </p>

<p>```perl  </p>

<p>perl -pi -e ‘s!^\s+?$!!’ file.txt  </p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regarding Integer in Perl and Java]]></title>
    <link href="http://isunix.github.io/blog/2014/07/22/regarding-integer-in-perl-and-java/"/>
    <updated>2014-07-22T22:07:12+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/22/regarding-integer-in-perl-and-java</id>
    <content type="html"><![CDATA[<p>If we want to get an integer in perl through two divided values, we have to use int($a/$b). While in Java, a/b will give out the float value that it derives.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Script to Comiple C/cpp Files Conveniently]]></title>
    <link href="http://isunix.github.io/blog/2014/07/21/perl-script-to-comiple-c-slash-cpp-files-conveniently/"/>
    <updated>2014-07-21T21:31:33+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/21/perl-script-to-comiple-c-slash-cpp-files-conveniently</id>
    <content type="html"><![CDATA[<p>我自己在编译c还有c++文件的时候， 总感觉每次都得敲像下面这种格式的一串字符， 感觉很麻烦的。   </p>

<p>```c
gcc -o hello hello.c</p>

<p>```</p>

<p>所以就有了现在的这个脚本。使用方法很简单，想上面这个hello.c的文件，我们只要发出下面的命令:    </p>

<p>```c</p>

<p>cpl hello.c   </p>

<p>```</p>

<p>就可以编译出来一个去掉以原来的文件名去掉ext的文件。  </p>

<p>很简单吧！哈哈！  </p>

<p>下面给出来代码， 还是继续把doc写进去的那种。</p>

<p>```perl</p>

<p>use 5.010;
use strict;
use warnings;
use utf8;
use Cwd;
use File::Basename;</p>

<p>my $currentDir = getcwd;
my $file = $ARGV[0];
my $fullpath = “$currentDir/$file”;
my @suffix_list = qw(.cpp .c);</p>

<p>my ($name, $dir, $ext) = fileparse($file, @suffix_list);
given($ext){</p>

<pre><code>when(".c"){
    my $compile_c = "gcc -o $name $file";
    system($compile_c);
}

when(".cpp"){
    my $compile_cpp = "g++ -o $name $file";
    system($compile_cpp);
}

default{
    say "$file is of an type not compilable!";
} }
</code></pre>

<p><strong>END</strong>
=pod</p>

<p>=head1 NAME</p>

<p>cpl</p>

<p>=head1 SYNOPSIS
    $ cpl filename</p>

<p>cpl –use gcc/g++ to compile a file with c/cpp extension. Usually we will do things like “gcc -o hello hello.c”, but with this scipt, we can just issue command like this, “gcp hello.c”;</p>

<p>Thanks,
Steven</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
