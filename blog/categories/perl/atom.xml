<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-12-18T13:34:37+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Study of Bloom Filters and Bloom::Filter Perl Module]]></title>
    <link href="http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module/"/>
    <updated>2014-12-09T13:46:30+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BerkeleyDB]]></title>
    <link href="http://isunix.github.io/blog/2014/12/08/berkeleydb/"/>
    <updated>2014-12-08T09:48:39+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/08/berkeleydb</id>
    <content type="html"><![CDATA[<p>I saw one of my previous colleagues is using BerkeleyDB in his perl code, but I have no idea why we have to use it, here is an article giving us more detailes on BerkeleyDB.</p>

<p><code>html
http://www.aosabook.org/en/bdb.html
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources on Mason]]></title>
    <link href="http://isunix.github.io/blog/2014/11/30/resources-on-mason/"/>
    <updated>2014-11-30T10:19:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/30/resources-on-mason</id>
    <content type="html"><![CDATA[<p>I collect some links to resources on Mason here. </p>

<p><code>html
http://www.masonbook.com/book/
http://www.masonhq.com/
http://en.wikipedia.org/wiki/Mason_(Perl)
http://www.perl.com/pub/2002/12/11/mason.html
http://www.slideshare.net/chrisv/htmlmason-by-example
</code></p>

<p>Will update this post if more are found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Array Into String Using Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl/"/>
    <updated>2014-11-27T16:49:04+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl</id>
    <content type="html"><![CDATA[<p>In perl, there are cases we may want to make an array into string, and then for the string, we may also want to change it to the format that we want to use. Here below are some exaples. </p>

<p>Say we have an array, </p>

<p><code>pl
my @nums = (1234, 5678, 2345, 8976);
</code></p>

<p>And we then want to change it to a string with comma separated followed by a blank space.  </p>

<p><code>pl
my $nums = join ", ", @nums;
</code></p>

<p>We then want to use the nums in a sql “in” clause which will have the format, </p>

<p><code>sql
select * from table where column in (1234, 5678, 2345, 8976);
</code></p>

<p>Of course we can not use the array @nums here, we can change the $nums to the format, </p>

<p><code>pl
$nums_in_str = "(" . join( ",", @nums ) . ")";
</code></p>

<p>Then we can do the sql query as the following:  </p>

<p><code>sql
select * from table where column in $nums_in_str
</code></p>

<p>That’s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Siting Css in Cgi Script]]></title>
    <link href="http://isunix.github.io/blog/2014/11/26/siting-css-in-cgi-script/"/>
    <updated>2014-11-26T17:09:55+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/26/siting-css-in-cgi-script</id>
    <content type="html"><![CDATA[<p>While writing perl cgi scripts, when we need to add css or js files, there are two ways to add the file, one using absolute path, one using relative path. </p>

<p>First we want to check the document root of our file, we cat get it using the following way. </p>

<p>```pl
#!/usr/bin/env perl</p>

<p>print “Content-type: text/plain; charset=utf-8\n\n”;
print $ENV{DOCUMENT_ROOT};
```</p>

<p>For example, in my case, it gives out the following result:  </p>

<p><code>pl
"/usr/local/www/apache22/data"
</code></p>

<p>We assume that our server name is gopid.com, in the /usr/local/www/apache22/ dir, there are the data dir, cgi-bin dir, we make a sub-dir named steven in the data dir, then we can using the following two ways to site the css and js files.</p>

<p><code>html
&lt;link type="text/css" href="http://isunix.github.io/steven/js/bootstrap/css/bootstrap.min.css" rel="stylesheet"&gt;
&lt;link type="text/css" href="http://isunix.github.io/steven/css/margin.css" rel="stylesheet"&gt;
</code></p>

<p>Or using the absolute path: </p>

<p><code>html
&lt;link type="text/css" href="https://goopig.com/steven/js/bootstrap/css/bootstrap.min.css" rel="stylesheet"&gt;
&lt;link type="text/css" href="https://goopig.com/steven/css/margin.css" rel="stylesheet"&gt;
</code></p>

<p>PS, if we want to print out the whole env infomation using cgi, we can using the following script:  </p>

<p>```pl
#!/usr/local/bin/perl</p>

<p>print “Content-type: text/plain; charset=utf-8\n\n”;
foreach $var (sort(keys(%ENV))) {
    $val = $ENV{$var};
    $val =~ s|\n|\n|g;
    $val =~ s|”|\“|g;
    print “${var}="${val}"\n”;
}
```</p>

]]></content>
  </entry>
  
</feed>
