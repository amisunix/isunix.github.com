<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-09-05T17:58:10+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Oriented Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/05/object-oriented-perl/"/>
    <updated>2014-09-05T15:46:51+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/05/object-oriented-perl</id>
    <content type="html"><![CDATA[<p>We can find details about the info list below by issuing “perldoc perlobj”, or “perldoc perlootut”</p>

<p>1.When we bless something, we are not blessing the variable which contains a reference to that thing, nor are we blessing the reference that the variable stores; we are blessing the thing that the variable refers to (sometimes known as the referent).  </p>

<p>```pl</p>

<p>use Scalar::Util ‘blessed’;
my $foo = {};
my $bar = $foo;</p>

<p>bless $foo, ‘Class’;
print blessed( $bar );</p>

<p>$bar = “some other value”;
print blessed( $bar );</p>

<p>```</p>

<p>The first will print out “Class” and second undef(of course you can see it).</p>

<p>When we call “bless” on a variable, we are actually blessing the underlying data structure that the variable refers to. We are not blessing the reference itself, nor the variable that contains that reference. That’s why the second call to “blessed( $bar )” returns false. At that point $bar is no longer storing a reference to an
object. You will sometimes see older books or documentation mention “blessing a reference” or describe an object as a “blessed reference”, but this is incorrect. It isn’t the reference that is blessed as an object; it’s the thing the reference refers to (i.e. the referent).   </p>

<p>2.Objects are merely Perl data structures (hashes, arrays, scalars, filehandles, etc.) that have been explicitly associated with a particular class. That explicit association is created by the built-in “bless” function.</p>

<p>3.An object is simply a data structure that knows to which class it belongs.A class is simply a package. A class provides methods that expect to operate on objects. A method is simply a subroutine that expects a reference to an object (or a package name, for class methods) as the first argument. </p>

<p>4.Each package contains a special array called @ISA. The @ISA array contains a list of that class’s parent classes, if any. This array is examined when Perl does method resolution. It is possible to manually set @ISA. and you may see this in older Perl code. Much older code also uses the base pragma. For new code, we recommend that you use the parent pragma to declare your parents.  This pragma will take care of setting @ISA.  It will also load the parent classes and make sure that the package doesn’t inherit from itself.  </p>

<p>5.However the parent classes are set, the package’s @ISA variable will contain a list of those parents. This is simply a list of scalars, each of which is a string that corresponds to a package name.   </p>

<p>6.All classes inherit from the UNIVERSAL class implicitly. The UNIVERSAL class is implemented by the Perl core, and provides several default methods, such as “isa()”, “can()”, and “VERSION()”.  The “UNIVERSAL” class will never appear in a package’s @ISA variable.  </p>

<p>7.Perl provides no special constructor syntax. This means that a class must implement its own constructor. A constructor is simply a class method that returns a reference to a new object.    </p>

<p>8.A simple read-only accessor simply gets the value of a single attribute:  </p>

<p>```pl</p>

<p>sub path {
	my $self = shift;
	return $self-&gt;{path};
} 
```  </p>

<p>A read-write accessor will allow the caller to set the value as well as get it:  </p>

<p>```pl</p>

<p>sub path {
	my $self = shift;</p>

<pre><code>if (@_) {
	$self-&gt;{path} = shift;
}

return $self-&gt;{path}; } ```  
</code></pre>

<p>9.More on bless. </p>

<p><code>pl
my $object = bless {}, $class;
my $object = bless {};
</code></p>

<p>In the first form, the anonymous hash is being blessed into the class
in $class. In the second form, the anonymous hash is blessed into the
current package. The second form is strongly discouraged, because it breaks the ability of a subclass to reuse the parent’s constructor, but you may still run across it in existing code.   </p>

<p>10.If you simply want to check that a variable contains an object reference, we recommend that you use “defined blessed($object)”, since “ref” returns true values for all references, not just objects.  </p>

<p>11.If you call a method that doesn’t exist in a class, Perl will throw an error. However, if that class or any of its parent classes defines an “AUTOLOAD” method, that “AUTOLOAD” method is called instead.   </p>

<p>12.All the examples so far have shown objects based on a blessed hash. However, it’s possible to bless any type of data structure or referent, including scalars, globs, and subroutines. You may see this sort of thing when looking at code in the wild.  </p>

<p>13.You should also check out perlmodlib for some style guides on constructing both modules and classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh-keygen Usage]]></title>
    <link href="http://isunix.github.io/blog/2014/09/05/ssh-keygen-usage/"/>
    <updated>2014-09-05T13:57:20+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/05/ssh-keygen-usage</id>
    <content type="html"><![CDATA[<p>Say I am on a server named “stsun1” and every time I want to login to a server named “stsun2”, I have to enter my password, by using ssh-keygen we can avoid this.  </p>

<p>```</p>

<ol>
  <li>
    <p>login to stsun1     </p>
  </li>
  <li>
    <p>cd ~/.ssh and check if you have ‘id_rsa’,  ‘id_rsa.pub’ files, if not, go to step 3, if you already have one, go to step 4.    </p>
  </li>
  <li>
    <p>ssh-keygen -t rsa, and you will see ‘id_rsa’,  ‘id_rsa.pub’ files.    </p>
  </li>
  <li>
    <p>copy the .pub file to the .ssh dir on server stsun2, then “cat id_rsa.pub » ~/.ssh/authorized_keys”</p>
  </li>
</ol>

<p>```</p>

<p>That’ all!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Set Up]]></title>
    <link href="http://isunix.github.io/blog/2014/08/28/git-set-up/"/>
    <updated>2014-08-28T13:46:06+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/28/git-set-up</id>
    <content type="html"><![CDATA[<p>I am writing this tool since I do not want to surf the internet and look for the steps to build git repo.  </p>

<p>This problem I want to solve is: I want to build git repo in one server and clone it if I want to have it on another server.  </p>

<p>On server A:</p>

<p>```pl
git config –global user.name “Steven Sun”<br />
git config –global user.email “stsun@gmail.com” <br />
git config –global –list<br />
git config –global color.ui “auto”    </p>

<p>mkdir mysite <br />
cd mysite <br />
git init<br />
git add .<br />
git commit -am “first comit”  <br />
```</p>

<p>For the address of your repo, refer to the following:  </p>

<p><code>pl
$ git clone http[s]://example.com/path/to/repo.git/
$ git clone ssh://example.com/path/to/repo.git/
$ git clone git://example.com/path/to/repo.git/
$ git clone /opt/git/project.git 
$ git clone file:///opt/git/project.git
$ git clone ftp[s]://example.com/path/to/repo.git/
$ git clone rsync://example.com/path/to/repo.git/  
</code>  </p>

<p>Thus in my working environment, I can issue the followin command to clone the repo in a server to another:  </p>

<p><code>pl
git clone ssh://example.com/path/to/repo.git/
</code></p>

<p>We can use “git pull” to pull the latest files. </p>

<p>For the .gitignore file, we can create one in the repo dir and add to the .gitignore file something like this:  </p>

<p><code>pl
*.jpg
*.jpeg
*.png
*.old
</code>  </p>

<p>For the details, please refer to online resources.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Ways to Build a Module]]></title>
    <link href="http://isunix.github.io/blog/2014/08/12/two-ways-to-create-a-module/"/>
    <updated>2014-08-12T20:51:22+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/12/two-ways-to-create-a-module</id>
    <content type="html"><![CDATA[<p>There are two build systems for building a module. One is to use the old and stable “ExtUtils::Makemaker”, and new one is using “Module::Build”. We will use the Module::Starter module to help us create a module.  </p>

<p>By default, Module::Starter create a distribution with Makefile.PL</p>

<p>First with Makefile.PL  </p>

<p>```pl
module-starter –module=”Animal” –author=”Steven Sun” –email=steven.sun2013@gmail.com –verbose    </p>

<p>This is the same as:<br />
module-starter –builder=”ExtUtils::Makemaker” –module=”Animal” –author=”Steven Sun” –email=steven.sun2013@gmail.com –verbose    </p>

<p>perl Makefile.PL <br />
make
make test <br />
make disttest<br />
make dist
```</p>

<p>Next we will show you the “Build.PL”</p>

<p>```pl<br />
module-starter –builder=”Module::Build” –module=”Animal” –author=”Steven Sun” –email=steven.sun2013@gmail.com –verbose </p>

<p>or in a simpler way, we can do this:<br />
module-starter –mb –module=”Animal” –author=”Steven Sun” –email=steven.sun2013@gmail.com –verbose  </p>

<p>perl Build.PL <br />
./Build<br />
./Build test
./Build disttest       ##this will create a .tar.gz archive which we can distribute now.<br />
./Build dist
```</p>

<p>For the Module::Build way, there is a shortcut.   </p>

<p>We don’t want to type that long command line every time, so module-starter can get that information from a    <br />
configuration file $HOME/.module-starter/config. If we’re on Windows, that .module-starter name is a bit of a    <br />
problem, so we can set the MODULE_STARTER_DIR environment variable to the name of the directory that contains
config. Inside config, we can list the parameter names and values separated by a colon.</p>

<p>```perl</p>

<p>author: Steven Sun<br />
email: steven.sun2013@gmail.com<br />
builder: Module::Build<br />
verbose: 1
```<br />
Once we have our configuration file setup, life is much easier since we only need to specify the name of the distribution that we want to create. </p>

<p>```perl  </p>

<p>% module−starter −−module=Animal<br />
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on the Book Perl-debugged]]></title>
    <link href="http://isunix.github.io/blog/2014/07/25/notes-on-the-book-perl-debugged/"/>
    <updated>2014-07-25T15:25:02+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/25/notes-on-the-book-perl-debugged</id>
    <content type="html"><![CDATA[<p>这篇blog是Perl debugged的阅读笔记。    </p>

<p>1.If we want to know more about Perl, we can type one of the following 3 commands:   </p>

<p>```perl 
perldoc perl<br />
perldoc perltoc<br />
perldoc perlintro  </p>

<p>```   <br />
or you can just use the “man perl” command.  </p>

<ol>
  <li>More on perldoc  </li>
</ol>

<p>```perl<br />
perldoc perlsyn<br />
#this will show the info of Perl syntax.   </p>

<p>perldoc perldata<br />
#this will show the info of Perl data types.  </p>

<p>perldoc perlop<br />
#this will show the info of Perl operators and precedence.</p>

<p>perldoc perlre <br />
#this will show the info of Perl regular expressions.   </p>

<p>perldoc perllol<br />
#this will show the info of Manipulating arrays of arrays in Perl.   </p>

<p>perldoc perlsub<br />
#this will show the info of Perl subroutines.    </p>

<p>perldoc perlfunc <br />
#this will show the info of Perl buintin functions.   </p>

<p>perldoc perlfaq<br />
#this will show the info of frequently asked questions about perl </p>

<p>perldoc perlstyle
#this will show the info of Perl style guide.  </p>

<p>perldoc perltrap<br />
#this will show the info of Perl traps for the unwary. </p>

<p>```  </p>

<p>3.If want to look for the info a funcion in perl, we can do:  </p>

<p><code>perl  
perldoc -f split
#take split as an example.  
</code>  </p>

<p>For all those asked-often questions, you can use the following command to take a look at it:  </p>

<p>```perl  </p>

<p>perldoc -q sleep   </p>

<p>```  <br />
4.聪明的人知道他们可以改变自己的态度， 信念和行为， 而且他们知道如何去改变。  </p>

<p>5.In emacs, we can use “M-X perldb” to enable the perl debugging mode.  </p>

]]></content>
  </entry>
  
</feed>
