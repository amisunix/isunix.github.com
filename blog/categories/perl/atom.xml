<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-08-08T15:23:40+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on the Book Perl-debugged]]></title>
    <link href="http://isunix.github.io/blog/2014/07/25/notes-on-the-book-perl-debugged/"/>
    <updated>2014-07-25T15:25:02+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/25/notes-on-the-book-perl-debugged</id>
    <content type="html"><![CDATA[<p>这篇blog是Perl debugged的阅读笔记。    </p>

<p>1.If we want to know more about Perl, we can type one of the following 3 commands:   </p>

<p>```perl 
perldoc perl<br />
perldoc perltoc<br />
perldoc perlintro  </p>

<p>```   <br />
or you can just use the “man perl” command.  </p>

<ol>
  <li>More on perldoc  </li>
</ol>

<p>```perl<br />
perldoc perlsyn<br />
#this will show the info of Perl syntax.   </p>

<p>perldoc perldata<br />
#this will show the info of Perl data types.  </p>

<p>perldoc perlop<br />
#this will show the info of Perl operators and precedence.</p>

<p>perldoc perlre <br />
#this will show the info of Perl regular expressions.   </p>

<p>perldoc perllol<br />
#this will show the info of Manipulating arrays of arrays in Perl.   </p>

<p>perldoc perlsub<br />
#this will show the info of Perl subroutines.    </p>

<p>perldoc perlfunc <br />
#this will show the info of Perl buintin functions.   </p>

<p>perldoc perlfaq<br />
#this will show the info of frequently asked questions about perl </p>

<p>perldoc perlstyle
#this will show the info of Perl style guide.  </p>

<p>perldoc perltrap<br />
#this will show the info of Perl traps for the unwary. </p>

<p>```  </p>

<p>3.If want to look for the info a funcion in perl, we can do:  </p>

<p><code>perl  
perldoc -f split
#take split as an example.  
</code>  </p>

<p>For all those asked-often questions, you can use the following command to take a look at it:  </p>

<p>```perl  </p>

<p>perldoc -q sleep   </p>

<p>```  <br />
4.聪明的人知道他们可以改变自己的态度， 信念和行为， 而且他们知道如何去改变。  </p>

<p>5.In emacs, we can use “M-X perldb” to enable the perl debugging mode.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About the Use of My and Our in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/about-the-of-my-and-our-and-local-in-perl/"/>
    <updated>2014-07-24T19:32:11+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/about-the-of-my-and-our-and-local-in-perl</id>
    <content type="html"><![CDATA[<p>关于perl中的my， our的用法自己一直都是一知半解的。以至于基本上在程序中把所有的变量的前面都加上my， 省事还不报错!   </p>

<p>I am still not familiar the concept, but I will list some examples here to add as a reminder.  </p>

<p><code>perl   
our $var = 1;
{
	our $var = 2;
	print "$var\n";
}
print "$var\n";    
</code></p>

<p>It will give us the result:  </p>

<p><code>
2
2
</code><br />
If the code looks like this:   </p>

<p><code>perl   
my $var = 1;
{
	my $var = 2;
	print "$var\n";
}
print "$var\n";    
</code> <br />
It will give us the result:   </p>

<p><code> 
2
1  
</code>
If the code is:   </p>

<p><code>perl  
our $var = 1;
{
	my $var = 2;
	print "$var\n";
}
print "$var\n";    
</code>   <br />
It will give us the following result:  </p>

<p><code>
2
1
</code>
if the code is:  </p>

<p><code>perl 
my $var = 1;
{
	our $var = 2;
	print "$var\n";
}
print "$var\n";    
</code><br />
It will give us the result:   </p>

<p><code>
2
1
</code>   </p>

<p>If the code is one of the following, it will give us the result 2:  </p>

<p>```perl<br />
my $var = 1;
my $var = 2;
print $var, “\n”;  </p>

<p>our $var = 1;
our $var = 2;
print $var, “\n”;     </p>

<p>my $var = 1;
our $var = 2;
print $var, “\n”;   </p>

<p>our $var = 1;
my $var = 2;
print $var, “\n”; 
``` <br />
I still can not claim I understand my and our.   </p>

<p>We will give more examples on this.  </p>

<p>The following 3 code snippets will give us the result (1, 6, 11):   </p>

<p>```perl</p>

<p>my $i = 0;
for ($i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}
print $i, “\n”;
#1,6,11   </p>

<p>our $i = 0;
for ($i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}
print $i, “\n”;
#1,6,11   </p>

<p>our $i = 0;
for (our $i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}</p>

<p>print $i, “\n”;
#1,6,11 <br />
```  </p>

<p>While the following 3 will give us the result (1, 6, 0):  </p>

<p>```perl  </p>

<p>my $i = 0;
for (my $i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}
print $i, “\n”;
#1,6,0</p>

<p>my $i = 0;
for (our $i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}
#1,6,0  </p>

<p>our $i = 0;
for (my $i = 1; $i&lt;10; $i++){
    print $i, “\n”;
    $i = $i + 4;
}
print $i, “\n”;
#1,6,0  </p>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minutes About Stdin]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/minutes-about-stdin/"/>
    <updated>2014-07-24T17:26:27+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/minutes-about-stdin</id>
    <content type="html"><![CDATA[<p>There are some minute details about perl that we need to take care. So here I take a note for later reminder. </p>

<ol>
  <li>
    <p>STDERR will print out the error messages to the screen or to a file if you want.   </p>
  </li>
  <li>
    <p>If we have a line of code like:  </p>
  </li>
</ol>

<p><code>perl  
  $GetALine = &lt;STDIN&gt;;
 </code></p>

<p>It will wait for the user to enter something and then append a line ending character to the string that the user enters. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About the Sort Function in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/about-the-sort-function-in-perl/"/>
    <updated>2014-07-24T16:51:22+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/about-the-sort-function-in-perl</id>
    <content type="html"><![CDATA[<p>This blog post is about the sort function in Perl. Mostly it is from the book “perl for dummies”, since I am reading it now.   </p>

<p>This is a good book, since it explains many concepts very clearly.  </p>

<p>The “sort” function sorts a list alphabeticlly. Perl also allows us to sort a list according to the rule we defined.  </p>

<p>if alphabetically, we can write the code as the following:  </p>

<p>```perl</p>

<p>@strs = (‘cognition’, ‘attune’, ‘bell’);
print join(‘ ‘, sort @strs);</p>

<p>```  <br />
It will give the following result:  </p>

<p><code>
attune bell cognition
</code></p>

<p>Here below I will show what we can do if we want to sort based on the way we want it to be:  </p>

<p>```perl </p>

<p>@strs = (‘cognition’, ‘attune’, ‘bell’);
print join(‘ ‘, sort{length($a) &lt;=&gt; length($b)} @strs);  </p>

<p>```<br />
The above code will sort the list according to the length of the string in the list.  </p>

<p>What if the our so-called rule is a subroutine?  </p>

<p>```perl
sub lensort { length($a) &lt;=&gt; length($b) };</p>

<p>@strs = (‘cognition’, ‘attune’, ‘bell’);
print join(‘ ‘, sort lensort @strs);</p>

<p>```  </p>

<p>This post is going to be continued. I will add more things as I come accross more useful and interesing examples regarding the sort function.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About the Defined Function in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/24/about-the-defined-function-in-perl/"/>
    <updated>2014-07-24T16:09:53+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/24/about-the-defined-function-in-perl</id>
    <content type="html"><![CDATA[<p>在”perl for dummies” 这本书中有段很精彩的关于defined 函数的说明。现在记录如下:    </p>

<p>在perl中构建语句的一个基本规则是: 使用变量前应该在赋值语句的右边定义它们，这样做可以防止perl给未定义的变量插入默认值.  </p>

<p>未定义的变量的存在是有意义的。照搬书中的例子，如果试图从空列表中提取数据， pop函数就会返回一个未定义的值。让pop函数返回未定义的值比返回假值要好，因为’false’可能就是列表中的某个元素。  </p>

<p>那么我们怎么去判断一个函数是否返回未定义的值呢？ 这里”defined” 就派上用场了。该函数会作用于一个变量或者表达式。如果这个被作用的对象已被定义，defined函数就会返回真， 否则就会返回假。 通常会跟着if或者unless来使用的。  </p>

<p>```perl
unless (defined($Yummy = pop(@Bonbons))){
	print “there are no more bonbos left.”;
}  </p>

<p>```<br />
如果@Bonbons这个列表是空的， defined函数就会返回假值，就会执行print语句，这个时候$Yummy变量将包含一个未定义的值。   </p>

]]></content>
  </entry>
  
</feed>
