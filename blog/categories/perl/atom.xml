<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-09-08T11:06:23+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XS and Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/08/xs-and-perl/"/>
    <updated>2014-09-08T10:55:29+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/08/xs-and-perl</id>
    <content type="html"><![CDATA[<p>For more on extending Perl with C, refer to the following tutorial. </p>

<p><code>
perlxs  
ExtUtils::ParseXS   
h2xs   
perlxstut  
</code>  </p>

<p>We can alse refer to these book, </p>

<p><code>  
extending and embedding perl    
Programming the Perl DBI   
Data Munging with Perl  
Vincent Pit's "XS Recipes"
</code>  </p>

<p>I like Perl and I also hope to use C to make somethings.   </p>

<p>Combining C and Perl together is a wonderful thing for me to try.  </p>

<p>Working on it.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getter-setter Methods in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/07/getter-setter-methods-in-perl/"/>
    <updated>2014-09-07T12:49:26+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/07/getter-setter-methods-in-perl</id>
    <content type="html"><![CDATA[<p>As well as getting the value of an attribute, you may well want to set or change it. The syntax you’ll use is as follows:   </p>

<p><code>pl
print "Old address: ", $object-&gt;address(), "\n";
$object-&gt;address("Campus Mirabilis, Pisa, Italy");
print "New address: ", $object-&gt;address(), "\n";
</code>  </p>

<p>This kind of accessor is called a get-set method because you can use it to both get and set the attribute. Turning your current read–only accessors into accessors that can also set the value is simple. Let’s create a get–set method for address():   </p>

<p>```pl  </p>

<p>sub address {
	my $self = shift;
	# Receive more data
	my $data = shift;   </p>

<pre><code># Set the address if there's any data there.
$self-&gt;{address} = $data if defined $data;
return $self-&gt;{address};
</code></pre>

<p>}
```  </p>

<p>If you don’t particularly want to trap calling the method as a class method (since it’ll generate an error when we try to access the hash entry anyway), you can write really miniature get–set methods like the following:   </p>

<p>```pl
sub address { $<em>[0]-&gt;{address } = $</em>[1] if defined $<em>[1]; $</em>[0]-&gt;{address } }    </p>

<p>sub lastname { $<em>[0]-&gt;{lastname } = $</em>[1] if defined $<em>[1]; $</em>[0]-&gt;{lastname } }    </p>

<p>sub firstname { $<em>[0]-&gt;{firstname} = $</em>[1] if defined $<em>[1]; $</em>[0]-&gt;{firstname} }
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Perl Standard Modules]]></title>
    <link href="http://isunix.github.io/blog/2014/09/07/some-perl-standard-modules/"/>
    <updated>2014-09-07T01:10:52+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/07/some-perl-standard-modules</id>
    <content type="html"><![CDATA[<p>Below are some pelr standard perl modules which deserves deep learning, using “perldoc perlmodlib” to see a complete list of all the modules in the Perl distribution.    </p>

<p>```pl</p>

<p>Data::Dumper <br />
perldoc -f eval   <br />
File::Find  <br />
Getopt::Std<br />
Getopt::Long  <br />
File::Spec <br />
Benchmark<br />
File::Slurp <br />
Bundle::LWP   <br />
Bundle::libnet   <br />
Text::Wrap<br />
Text::Tabs<br />
Pod::Autopod <br />
HTML::Parser<br />
Storable<br />
```</p>

<p>If you want to install a module in a certian path, use “perl Makefile.PL –PREFIX=/my/module/path”.   </p>

<p>Also read “perldoc perlnewmod”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Debug Tut]]></title>
    <link href="http://isunix.github.io/blog/2014/09/06/perl-debug-tut/"/>
    <updated>2014-09-06T21:48:04+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/06/perl-debug-tut</id>
    <content type="html"><![CDATA[<p>Use the following way to see the detailed info of perl debugger info.  </p>

<p><code>pl
perldoc perldebguts
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Perl Learning Notes]]></title>
    <link href="http://isunix.github.io/blog/2014/09/06/mastering-perl-learning-notes/"/>
    <updated>2014-09-06T18:03:53+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/06/mastering-perl-learning-notes</id>
    <content type="html"><![CDATA[<p>This is for the book “mastering perl”. There are some code snippets in this book which I think is quite useful, thus I keep a note of them below.  </p>

<p>1.global matching:  </p>

<p><code>pl
$_ = "Just another Perl hacker,";
my @words = /(\S+)/g; # "Just" "another" "Perl" "hacker,"
print join("",split(@words));
</code>  </p>

<p>2.my $word_count = () = /(\S+)/g; <br />
It will give out the number of matched items.</p>

<p>3.</p>
]]></content>
  </entry>
  
</feed>
