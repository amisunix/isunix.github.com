<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-07-18T21:00:57+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Examples of Using Grep and Map in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/18/examples-of-using-grep-and-map-in-perl/"/>
    <updated>2014-07-18T20:55:08+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/18/examples-of-using-grep-and-map-in-perl</id>
    <content type="html"><![CDATA[<p>在«Learnign Perl»中，初步介绍了perl的一些高级用法， 我之前翻译了些intermediate perl, 但是最近这段时间实在是太忙了， 而且现在还有很多其他的事情得去处理，所以真的不知道得到什么时候才可以继续拾起翻译intermediate perl的任务来。好了，下面把学习perl中的一些关于map还有grep的例子记录在这里，也方便自己以后来查询。   </p>

<p>```perl
my @odd_numbers = grep { $_ % 2 } 1..1000;  </p>

<p>my @matching_lines = grep { /\bfred\b/i } &lt;$fh&gt;;</p>

<p>my @matching_lines = grep /\bfred\b/i, &lt;$fh&gt;;  </p>

<p>my @matching_lines = grep /\bfred\b/i, &lt;$fh&gt;;
my $line_count = @matching_lines;  </p>

<p>my $line_count = grep /\bfred\b/i, &lt;$fh&gt;;  </p>

<p>my @data = (4.75, 1.5, 2, 1234, 6.9456, 12345678.9, 29.95);
my @formatted_data = map { &amp;big_money($_) } @data;  </p>

<p>print “The money numbers are:\n”,
map { sprintf(“%25s\n”, $_) } @formatted_data;  </p>

<p>my @data = (4.75, 1.5, 2, 1234, 6.9456, 12345678.9, 29.95);
print “The money numbers are:\n”,
map { sprintf(“%25s\n”, &amp;big_money($_) ) } @data;  </p>

<p>print “Some powers of two are:\n”,
map “\t” . ( 2 ** $_ ) . “\n”, 0..15;  </p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using of Loops in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/18/using-of-loops-in-perl/"/>
    <updated>2014-07-18T19:59:02+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/18/using-of-loops-in-perl</id>
    <content type="html"><![CDATA[<p>«Learning Perl»中的一个例子。  </p>

<p><code>
Make a program that will repeatedly ask the user to guess a secret number
from 1 to 100 until the user guesses the secret number. Your program should pick
the number at random by using the magical formula int(1 + rand 100).§ When
the user guesses wrong, the program should respond, “Too high” or “Too low.” If
the user enters the word quit or exit, or if the user enters a blank line, the program
should quit. Of course, if the user guesses correctly, the program should quit then
as well!
</code>  </p>

<p>还是把code贴在这里吧！ </p>

<p>```perl</p>

<p>my $secret = int(1 + rand(100));</p>

<p>while(1){
    print “please enter a guess from 1 to 100: “;
    chomp(my $guess = <stdin>);
    if ($guess =~ /quit|exit|\A\s*\z/i){
        print "sorry you gave up, the number was $secret.\n";
        last;
    } elsif ($guess &lt; $secret){
        print "too small!\n";
    } elsif ($guess == $secret){
        print "that was it!\n";
        last;
    } else {
        print "too large!\n";
    }
}  </stdin></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Examples Regarding Hash in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/18/use-examples-regarding-hash-in-perl/"/>
    <updated>2014-07-18T19:18:44+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/18/use-examples-regarding-hash-in-perl</id>
    <content type="html"><![CDATA[<p>1.要求用户输入人名， 打印出对应的item.</p>

<p>```perl</p>

<p>my %last_name = qw{
    fred flintstone
    barney rubble
    wilma flintstone
};</p>

<p>print “please enter a first name: “;
chomp(my $name = <stdin>);
print "that's $name $last_name{$name}.\n";</stdin></p>

<p>```<br />
这是一个很典型的标准用法了。  </p>

<p>2.要求用户进行几行输入，然后统计频数.   </p>

<p>```perl
use strict;
use warnings;
use utf8;</p>

<p>my (@words, %count, $word);
chomp(@words = <stdin>);</stdin></p>

<p>foreach $word (@words){
    $count{$word} += 1;
}</p>

<p>foreach $word (keys %count){
    print “$word was seen $count{$word} times.\n”;
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interesting Use of State in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/17/interesting-use-of-state-in-perl/"/>
    <updated>2014-07-17T18:48:44+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/17/interesting-use-of-state-in-perl</id>
    <content type="html"><![CDATA[<p>还是来自«learning perl»中的例子。</p>

<ol>
  <li>写一个名为greet的子例程，当给定一个人名作为参数的时候，打出欢迎他的信息，并告诉他前一个来宾的名字。  </li>
</ol>

<p>```perl</p>

<p>use 5.010;
greet(‘Fred’);
greet(‘Barney’);</p>

<p>sub greet{
    state $last_person;</p>

<pre><code>my $name = shift;

print "Hi, $name!";

if (defined $last_person) {
    print "$last_person is also here!\n";
}

else {
    print "you are the first one here!\n";
}

$last_person = $name; } 
</code></pre>

<p>```<br />
2.修改程序1， 告诉所有新来的人之前已经迎来了哪些人.   </p>

<p>```perl 
use Data::Dumper;
use 5.010;</p>

<p>greet(‘Fred’);
greet(‘Barney’);
greet(‘Wilma’);
greet(‘Betty’);</p>

<p>sub greet{
    state @before;</p>

<pre><code>my $name = shift;
print "Hi, $name!";

if (@before){
    print " I have seen @before\n";
}
else {
    print " you are the first one here!\n";
}

push @before, $name; }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About the Use of State in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/07/17/about-the-use-of-state-in-perl/"/>
    <updated>2014-07-17T16:02:20+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/17/about-the-use-of-state-in-perl</id>
    <content type="html"><![CDATA[<p>算了还是引用一下«learning perl»中文翻译版本中的话吧:   </p>

<p>```
在Perl中可以使用my操作符来创建私有变量， 但是每次调用这个子程序的时候，这个私有变量都会被重新定义。而使用state操作符来声明的变量，我们便可以在子程序的多次调用期间保留变量之前的值， 并将变量的作用域限于子程序内部</p>

<p>```</p>

<p>让我们来看下使用my还有使用state所产生的不同的效果吧。  </p>

<p>首先是my:  </p>

<p>```perl</p>

<p>use 5.010;</p>

<p>running_sum( 5, 6 );
running_sum( 1..3 );
running_sum( 4 );</p>

<p>sub running_sum {
    my $sum = 0;
    my @numbers;</p>

<pre><code>foreach my $number ( @_ ) {
  push @numbers, $number;
  $sum += $number;
}

say "the sum of (@numbers) is $sum"; }  
</code></pre>

<p>```  </p>

<p>这段code产生的结果是:  </p>

<p>```perl</p>

<p>the sum of (5 6) is 11
the sum of (1 2 3) is 6
the sum of (4) is 4</p>

<p>```   </p>

<p>下面是state:  </p>

<p>```perl</p>

<p>use 5.010;
running_sum( 5, 6 );
running_sum( 1..3 );
running_sum( 4 );</p>

<p>sub running_sum {
    state $sum = 0;
    state @numbers;
    foreach my $number ( @_ ) {
        push @numbers, $number;
        $sum += $number;
    }</p>

<p>say “The sum of (@numbers) is $sum”;
}</p>

<p>```<br />
它的结果是:   </p>

<p>```perl  </p>

<p>The sum of (5 6) is 11
The sum of (5 6 1 2 3) is 17
The sum of (5 6 1 2 3 4) is 21</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
