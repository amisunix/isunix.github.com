<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-12-25T18:06:02+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes to Be Take While Using Ssh-keygen]]></title>
    <link href="http://isunix.github.io/blog/2014/12/23/notes-to-be-take-while-using-ssh-keygen/"/>
    <updated>2014-12-23T20:18:10+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/23/notes-to-be-take-while-using-ssh-keygen</id>
    <content type="html"><![CDATA[<p>I encoutered some problems while I was using ssh-keygen, it turns out to be originating from privileges setting up.</p>

<p>The following way turns out to be working.</p>

<p>1.Do not set up your home directory to be “777”, it will not work. I set it to be “755”</p>

<p><code>sh
chmod 755 /home/stsun
</code></p>

<p>2.</p>

<p><code>sh
chmod 600 authorized_keys 
</code></p>

<p>3.</p>

<p><code>sh
chmod 700 .ssh
</code></p>

<p>And then it works well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study of Bloom Filters and Bloom::Filter Perl Module]]></title>
    <link href="http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module/"/>
    <updated>2014-12-09T13:46:30+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/09/study-of-bloom-filters-and-bloom-filter-perl-module</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BerkeleyDB]]></title>
    <link href="http://isunix.github.io/blog/2014/12/08/berkeleydb/"/>
    <updated>2014-12-08T09:48:39+08:00</updated>
    <id>http://isunix.github.io/blog/2014/12/08/berkeleydb</id>
    <content type="html"><![CDATA[<p>I saw one of my previous colleagues is using BerkeleyDB in his perl code, but I have no idea why we have to use it, here is an article giving us more detailes on BerkeleyDB.</p>

<p><code>html
http://www.aosabook.org/en/bdb.html
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources on Mason]]></title>
    <link href="http://isunix.github.io/blog/2014/11/30/resources-on-mason/"/>
    <updated>2014-11-30T10:19:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/30/resources-on-mason</id>
    <content type="html"><![CDATA[<p>I collect some links to resources on Mason here. </p>

<p><code>html
http://www.masonbook.com/book/
http://www.masonhq.com/
http://en.wikipedia.org/wiki/Mason_(Perl)
http://www.perl.com/pub/2002/12/11/mason.html
http://www.slideshare.net/chrisv/htmlmason-by-example
</code></p>

<p>Will update this post if more are found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Array Into String Using Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl/"/>
    <updated>2014-11-27T16:49:04+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/27/make-array-into-string-using-perl</id>
    <content type="html"><![CDATA[<p>In perl, there are cases we may want to make an array into string, and then for the string, we may also want to change it to the format that we want to use. Here below are some exaples. </p>

<p>Say we have an array, </p>

<p><code>pl
my @nums = (1234, 5678, 2345, 8976);
</code></p>

<p>And we then want to change it to a string with comma separated followed by a blank space.  </p>

<p><code>pl
my $nums = join ", ", @nums;
</code></p>

<p>We then want to use the nums in a sql “in” clause which will have the format, </p>

<p><code>sql
select * from table where column in (1234, 5678, 2345, 8976);
</code></p>

<p>Of course we can not use the array @nums here, we can change the $nums to the format, </p>

<p><code>pl
$nums_in_str = "(" . join( ",", @nums ) . ")";
</code></p>

<p>Then we can do the sql query as the following:  </p>

<p><code>sql
select * from table where column in $nums_in_str
</code></p>

<p>That’s it!</p>
]]></content>
  </entry>
  
</feed>
