<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-09-24T20:51:05+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamicly Adding a Method to a Module]]></title>
    <link href="http://isunix.github.io/blog/2014/09/24/dynamicly-adding-a-method-to-a-module/"/>
    <updated>2014-09-24T12:57:20+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/24/dynamicly-adding-a-method-to-a-module</id>
    <content type="html"><![CDATA[<p>We can follow the following steps to add/change a method in a module dynamicly.  </p>

<p>```pl
use strict;
use warnings;
use utf8;
{</p>

<pre><code>package Data::Dumper;

sub test {
    print "test to add a new method to Data::Dumper\n";
} }
</code></pre>

<p>use Data::Dumper;
Data::Dumper::test;
print Dumper \%Data::Dumper::
```</p>

<p>we can also use the following one liner to check the methods defined in a module:  </p>

<p><code>pl
perl -e "use File::Find; use Data::Dumper; print Dumper \%File::Find::"  
</code>  </p>

<p>or we can use JSON to print out its format:  </p>

<p><code>pl
perl -e "use File::Find; use JSON; print to_json(\%File::Find::)"  
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map and Grep in Perl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/19/map-and-grep-in-perl/"/>
    <updated>2014-09-19T12:27:58+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/19/map-and-grep-in-perl</id>
    <content type="html"><![CDATA[<p>I ran across some usage of grep and map in perl in some of the scripts I am reading. just to keep a note here. </p>

<p>```pl
my @line = grep {not /^\s*$/} map {chomp;$_} <filein>;  </filein></p>

<p>@keyorder = grep {not /^\s*$/} @column;  </p>

<p>$rh_meta-&gt;{$meta_name} = {
	map {
		($_, 1)
	} grep {
		not /^\d+$/;
	} ($meta_body =~ /(\w+)/g)</p>

<p>$str =~ tr/a-z/A-Z/;
##how to use tr
```</p>

<p>I also come across some usage of redo and labeled loop, please see the following examples.</p>

<p><code>pl
#!/usr/bin/perl
for $i (0..9) {
    for $j (0..9) {
        print "$i x $j\n";
        last if $i ==3;
    }
}
#the one without labeled loop, the "last" will only act on the inner loop.
</code></p>

<p>if we want the “last” to act on the “outer” loop, we can do the following:  </p>

<p><code>pl
#!/usr/bin/perl
LO: for $i (0..9) {
        for $j (0..9) {
            print "$i x $j\n";
            last LO if $i ==3;
        }
    }
</code></p>

<p>namely we can use “labeled loop” to control the outer loop from the inner loop.</p>

<p>for the redo function, the difference it has to “next” is “next” will go to the next loop, while “redo” will just “redo” the current loop, this is partilarly useful if we want to ask the user to re-enter the password if they get the password wrong:  </p>

<p>```pl
use utf8;</p>

<p>my @words = qw{ fred barney pebbles dino };
my $errors = 0;</p>

<p>foreach (@words) {
    print “type the word ‘$_’: “;
    chomp(my $try = <stdin>);
    if ($try ne $_) {
      print "sorry, it is not right\n";
      $errors++;
      redo;
    }
}
##if you did not enter the right item, you will be asked and again!
```</stdin></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Gnuplot From the Source Code]]></title>
    <link href="http://isunix.github.io/blog/2014/09/17/install-gnuplot-from-the-source-code/"/>
    <updated>2014-09-17T10:38:15+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/17/install-gnuplot-from-the-source-code</id>
    <content type="html"><![CDATA[<p>On the centos server, I want to install gnuplot in my local dir, here are the steps:  </p>

<ol>
  <li>
    <p>download the source code and cd into the dir.</p>
  </li>
  <li>
    <p>./configure –prefix=$HOME/local –with-readline=gnu</p>
  </li>
  <li>
    <p>make</p>
  </li>
  <li>
    <p>make install</p>
  </li>
</ol>

<p>That is all. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gnuplot in Action]]></title>
    <link href="http://isunix.github.io/blog/2014/09/17/gnuplot-in-action/"/>
    <updated>2014-09-17T10:15:15+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/17/gnuplot-in-action</id>
    <content type="html"><![CDATA[<p>I am trying to grasp how to use gnuplot because one of our project used gnuplot, and I am deeply attracted by the power it shows. Although I have taken courses in Matlab SAS, and I know how to use those software to draw all those kinds of beautiful curves, the one using gnuplot still astonished me for it flexibility. That’s how this article comes out.  </p>

<p>1.first let us quote some words,</p>

<p>```
The purpose of computing is insight, not numbers.
	—R. W. Hamming</p>

<p>The purpose of computing is insight, not pictures.
	—L. N. Trefethen
``` </p>

<p>2.According to research in cognitive science, the things people remember are things they discover during self-motivated exploration. (Personally I think this is true)    </p>

<p>3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Not Using MIME::Lite]]></title>
    <link href="http://isunix.github.io/blog/2014/09/12/about-not-using-mime-lite/"/>
    <updated>2014-09-12T14:40:15+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/12/about-not-using-mime-lite</id>
    <content type="html"><![CDATA[<p>when you use “perldoc MIME::Lite”, you will see the folliwng info:  </p>

<p><code>
MIME::Lite is not recommended by its current maintainer.  There are a number of alternatives, like Email::MIME or MIME::Entity and Email::Sender, which you should probably use instead.  MIME::Lite continues to accrue weird bug reports, and it is not receiving a large amount of refactoring due to the availability of better alternatives. Please consider using something else.
</code></p>

<p>Thus I decided not use MIME::Lite any more. </p>
]]></content>
  </entry>
  
</feed>
