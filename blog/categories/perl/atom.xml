<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2017-09-14T10:38:32+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update All Perl Modules Through Cpanm]]></title>
    <link href="http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm/"/>
    <updated>2016-03-31T16:54:00+08:00</updated>
    <id>http://isunix.github.io/blog/2016/03/31/update-all-perl-modules-through-cpanm</id>
    <content type="html"><![CDATA[<p>I want to update all the installed Perl modules using cpanm. Here is a method I found.</p>

<p><code>sh
cpan-outdated -p | cpanm
</code></p>

<p>We have to first download the module “http://search.cpan.org/CPAN/authors/id/T/TO/TOKUHIROM/App-cpanoutdated-0.24.tar.gz” and then issue the command to update the modules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scheme Mastermind Game Re-write Using Python and Perl]]></title>
    <link href="http://isunix.github.io/blog/2015/12/30/scheme-mastermind-game-re-write-using-python-and-perl/"/>
    <updated>2015-12-30T16:34:41+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/30/scheme-mastermind-game-re-write-using-python-and-perl</id>
    <content type="html"><![CDATA[<p>There is a game “mastermind” written using scheme, which can be found using the folliwng page.</p>

<p>It looks like this:</p>

<p><img src="/images/sun/mastermind.png">  </p>

<p>Here I will re-write the game using Perl and Python.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Secret Operators and Constants]]></title>
    <link href="http://isunix.github.io/blog/2015/12/17/perl-secret-operators-and-constants/"/>
    <updated>2015-12-17T10:37:47+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/17/perl-secret-operators-and-constants</id>
    <content type="html"><![CDATA[<p>Several days I met some perl one-liner like this:</p>

<p><code>sh
cat $file | perl -Mautodie -MList::MoreUtils=none -ne 'chomp; push @re, $_ }{ open $fh, $ENV{CF}; @s = &lt;$fh&gt;; foreach $s (@s) { print $s if none { $s =~ qr/$_/ } @re };'
</code></p>

<p>I have no idea what the “}{“ here means, at first I thought it maybe some typo.</p>

<p>Then my colleagues showed me the following page, which lists many weird perl operators.</p>

<p><code>html
http://search.cpan.org/dist/perlsecret/lib/perlsecret.pod
</code></p>

<p>To have a look at how it is used in the backend:</p>

<p><code>sh
$ perl -MO=Deparse -lne '}{print$.'
</code></p>

<p>It will give the following code:</p>

<p><code>perl
-e syntax OK
    BEGIN { $/ = "\n"; $\ = "\n"; }
    LINE: while (defined($_ = &lt;ARGV&gt;)) {
        chomp $_;
    }
    {
        print $.;
    }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Perl One-liners]]></title>
    <link href="http://isunix.github.io/blog/2015/12/11/more-perl-one-liners/"/>
    <updated>2015-12-11T10:18:24+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/11/more-perl-one-liners</id>
    <content type="html"><![CDATA[<p>Some maybe useful perl one-liners here for easy reference.</p>

<p>Some of the tip are from the post:</p>

<p><code>html
http://www.catonmat.net/blog/perl-one-liners-explained-part-one/
</code></p>

<p>Some are from my own daily usage.</p>

<p>I also found there are posts about useful sed/awk/perl one-liners:</p>

<p><code>html
http://www.catonmat.net/blog/awk-one-liners-explained-part-one/
http://www.catonmat.net/blog/sed-one-liners-explained-part-one/
http://www.catonmat.net/blog/introduction-to-perl-one-liners/
http://linux.gda.pl/spotkania/sp_13/perl-one-liners.pdf
</code></p>

<p>1.Loop through a file for each line to find the lines matching certain pattern. Then grep those pattern against a file, and print those lines which has a column meets certain criteria.</p>

<p><code>sh
cat file1.txt | perl -nle 'print $1 if /\b(__[0-9a-z]\w+)\b/i;' | sort | uniq | xargs -I , grep , -w fileb.txt | awk '$2==0' | awk '{print $7}' | sort | uniq | xargs -I , grep , -w filec.txt | awk '$8==0' | awk '{print $8," ",$13}' &gt; /tmp/`date +%Y%m%d`.txt
</code></p>

<p>2.Add a blank line before every line.</p>

<p><code>sh
perl -pe 's//\n/' file.txt
</code></p>

<p>3.Remove all blank lines</p>

<p><code>sh
cat file.txt | perl -ne 'print unless /^$/'
</code></p>

<p>4.Remove all consecutive blank lines, leaving just one.</p>

<p><code>sh
cat file.txt | perl -00 -pe ''
</code></p>

<p>5.Compress/expand all blank lines into N consecutive ones.</p>

<p><code>sh
cat 1.txt| perl -00 -pe '$_.="\n"x4'
</code></p>

<p>6.substitute something in a file:</p>

<p><code>sh
perl -pi -e 's/good/bad/g' file.txt
</code></p>

<p>7.same as item-6 but only on lines match something:</p>

<p><code>sh
perl -pi -e 's/good/bad/g if /matched/' file
</code></p>

<p>8.Finding all repeated lines in a file:</p>

<p><code>sh
perl -ne 'print if $a{$_}++' 1.txt
</code></p>

<p>9.Numbering lines in a file:</p>

<p><code>sh
perl -ne 'print "$. $_"' file.txt
</code>
or with the ‘-p’ argument:</p>

<p><code>sh
perl -pe '$_ = "$. $_"' file.txt
</code></p>

<p>10.Sum up all the numbers on each line:</p>

<p><code>sh
cat file.txt| perl -MList::Util=sum -alne 'print sum @F'
</code></p>

<p>11.TO see how the above one-liner works, use the Data::Dumper module to get a look at it:</p>

<p><code>sh
cat file.txt| perl -MData::Dumper -alne 'print  Dumper @F'
</code></p>

<p>12.Finding the date 10 days ago:</p>

<p><code>sh
perl -MPOSIX -le '@now = localtime; $now[3] -= 10; print scalar localtime mktime @now'
</code></p>

<p>13.Find the sum of the numbers in the first column:</p>

<p><code>sh
cat file.txt| perl -lane '$sum += $F[0]; END { print $sum }'
</code></p>

<p>14.Getting a list of the names of all users on the system:</p>

<p><code>sh
perl -a -F: -lne 'print $F[4]' /etc/passwd
</code></p>

<p>15.Print the number of non-empty lines in a file:</p>

<p><code>sh
cat file.txt | perl -le 'print scalar(grep{/./}&lt;&gt;)'
</code></p>

<p>16.Print the number of empty lines in a file:</p>

<p><code>sh
cat file.txt| perl -lne '$a++ if /^$/; END {print $a+0}'
</code></p>

<p>or </p>

<p><code>sh
cat file.txt | perl -le 'print scalar(grep{/^$/}&lt;&gt;)'
</code></p>

<p>or </p>

<p><code>sh
cat file.txt | perl -le 'print ~~grep{/^$/}&lt;&gt;'
</code></p>

<p>17.Print the number of lines in a file that match a pattern (emulate grep -c):</p>

<p><code>sh
cat 3.txt| perl -lne '$a++ if /good/; END {print $a+0}'
</code></p>

<p>or </p>

<p><code>sh
cat 3.txt | grep -c "good"
</code></p>

<p>18.Generate and print the alphabet:</p>

<p><code>sh
perl -le 'print ("a".."z")'
or 
perl -le 'print a..z'
or 
perl -le 'print join "", ("a".."z")'
</code></p>

<p>19.Generate a random 8 character password:</p>

<p><code>sh
perl -le 'print map { ("a".."z")[rand 26] } 1..8'
</code></p>

<p>20.Find the numeric values for characters in the string:</p>

<p><code>sh
perl -le 'print join ", ", map { ord } split //, "hello world"'
</code></p>

<p>21.Generate an array with odd numbers from 1 to 100:</p>

<p><code>sh
perl -le '@odd = grep {$_ % 2 == 1} 1..100; print "@odd"'
</code></p>

<p>22.Find the length of the string:</p>

<p><code>sh
perl -le 'print length "hello boy"'
</code></p>

<p>23.Find the number of elements in an array:</p>

<p><code>sh
perl -le '@array = ("a".."z"); print ~~@array'
or
perl -le '@array = ("a".."z"); print scalar @array'
or 
perl -le '@array = ("a".."z"); print $#array + 1'
</code></p>

<p>24.Base64 encode a string:</p>

<p><code>sh
perl -MMIME::Base64 -e 'print encode_base64("string")'
</code></p>

<p>25.base64 encode the whole file:</p>

<p><code>sh
perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file
</code></p>

<p>26.Base64 decode a string:</p>

<p><code>sh
perl -MMIME::Base64 -le 'print decode_base64("c3RyaW5n")'
</code></p>

<p>27.URL-escape a string:</p>

<p><code>sh
perl -MURI::Escape -le 'print uri_escape("1+2")'
</code></p>

<p>28.URL-unescape a string:</p>

<p><code>sh
perl -MURI::Escape -le 'print uri_unescape("1%2B2")'
</code></p>

<p>29.HTML-encode a string:</p>

<p><code>sh
perl -MHTML::Entities -le 'print encode_entities("&lt;br&gt;")'
</code></p>

<p>30.HTML-decode a string:</p>

<p><code>sh
perl -MHTML::Entities -le 'print decode_entities("&amp;lt;br&amp;gt;")'
</code></p>

<p>31.Convert all text to uppercase:</p>

<p><code>sh
cat file | perl -nle 'print uc'
</code></p>

<p>32.Camel case each line:</p>

<p><code>sh
cat file | perl -ple 's/(\w+)/\u$1/g'
</code></p>

<p>33.Strip leading whitespace (spaces, tabs) from the beginning of each line:</p>

<p><code>sh
cat file | perl -ple 's/^[ \t]+//'
</code></p>

<p>34.Strip trailing whitespace (space, tabs) from the end of each line:</p>

<p><code>sh
cat file | perl -ple 's/[ \t]+$//'
</code></p>

<p>35.Strip whitespace from the beginning and end of each line:</p>

<p><code>sh
cat file | perl -ple 's/^[ \t]+|[ \t]+$//g'
</code></p>

<p>36.Substitute (find and replace) “foo” with “bar” on lines that match “baz”:</p>

<p><code>sh
cat file | perl -pe '/baz/ &amp;&amp; s/foo/bar/'
</code></p>

<p>37.Print the first line of a file (emulate head -1):</p>

<p><code>sh
cat file | perl -ne 'print; exit'
</code></p>

<p>38.Print the first 10 lines of a file (emulate head -10):</p>

<p><code>sh
perl -ne 'print if $. &lt;= 10'
</code></p>

<p>This one-liner uses the $. special variable. This variable stands for “current line number.” </p>

<p>39.Print the last line of a file:</p>

<p><code>sh
cat file | perl -ne '$last = $_; END { print $last }'
or
cat file | perl -ne 'print if eof'
</code></p>

<p>40.Print the last 10 lines of a file (emulate tail -10):</p>

<p><code>sh
cat file | perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }'
</code></p>

<p>41.Print only lines that do not match a regular expression:</p>

<p><code>sh
cat file | perl -ne '!/regex/ &amp;&amp; print'
</code></p>

<p>42.Print the line before a line that matches a regular expression:</p>

<p><code>sh
cat file | perl -ne '/regex/ &amp;&amp; $last &amp;&amp; print $last; $last = $_'
</code></p>

<p>43.Print the line after a line that matches a regular expression:</p>

<p><code>sh
cat file | perl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/'
</code></p>

<p>44.Print lines that match regex AAA and regex BBB in any order:</p>

<p><code>sh
cat file | perl -ne '/AAA/ &amp;&amp; /BBB/ &amp;&amp; print'
</code></p>

<p>45.Print lines that don’t match match regexes AAA and BBB:</p>

<p><code>sh
cat file | perl -ne '!/AAA/ &amp;&amp; !/BBB/ &amp;&amp; print'
</code></p>

<p>46.Print lines that match regex AAA followed by regex BBB followed by CCC:</p>

<p><code>sh
cat file | perl -ne '/AAA.*BBB.*CCC/ &amp;&amp; print'
</code></p>

<p>47.Print lines that are 20 chars or longer:</p>

<p><code>sh
cat file | perl -ne 'print if length &gt;= 80'
</code></p>

<p>48.Print only line 13:</p>

<p><code>sh
cat file | perl -ne '$. == 13 &amp;&amp; print &amp;&amp; exit'
</code></p>

<p>49.Print all lines except line 13.</p>

<p><code>sh
perl -ne '$. != 13 &amp;&amp; print'
</code></p>

<p>50.Print only lines 13, 19 and 67:</p>

<p><code>sh
perl -ne 'print if $. == 13 || $. == 19 || $. == 67'
</code></p>

<p>51.Print all lines between two regexes:</p>

<p><code>sh
cat file | perl -ne 'print if /regex1/../regex2/'
</code></p>

<p>52.Print all lines from line 17 to line 30:</p>

<p><code>sh
cat file | perl -ne 'print if $. &gt;= 17 &amp;&amp; $. &lt;= 30'
</code></p>

<p>53.Print the longest line:</p>

<p><code>sh
cat file | perl -ne '$l = $_ if length($_) &gt; length($l); END { print $l }'
</code></p>

<p>54.Print the shortest line:</p>

<p><code>sh
cat file | perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) &lt; length($s); END { print $s }'
</code></p>

<p>55.Print all lines that contain only characters:</p>

<p><code>sh
cat file | perl -ne 'print if /^[[:alpha:]]+$/'
</code></p>

<p>56.Print all lines that repeat:</p>

<p><code>sh
cat file | perl -ne 'print if ++$a{$_} == 2'
</code></p>

<p>57.Print all unique lines:</p>

<p><code>sh
cat file | perl -ne 'print unless $a{$_}++'
</code></p>

<p>58.To remove blank lines:</p>

<p><code>sh
cat file | perl -pi -e 's!^\s+?$!!'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commen Perl Modules I Use]]></title>
    <link href="http://isunix.github.io/blog/2015/12/08/commen-perl-modules-i-use/"/>
    <updated>2015-12-08T16:07:21+08:00</updated>
    <id>http://isunix.github.io/blog/2015/12/08/commen-perl-modules-i-use</id>
    <content type="html"><![CDATA[<p>I will list some of common perl modules I here.</p>

<p><code>sh
LWP::UserAgent
Mojolicious
Dancer
Dancer2
DBI
File::Slurp
Path::Tiny
IO::All
File::Slurp::Tiny
File::Slurper
DBD::SQLite
Data::Dumper
FindBin
Getopt::Long
Class::Date
POSIX
JSON
Try::Tiny
use File::Basename
List::Util
List::MoreUtils
File::Spec::Functions
File::Spec
Email::Simple
Data::Printer
DBD::mysql
Sort::Fields
</code></p>

<p>Of course we can write a small script to loop through these modules and install these modules all together.</p>
]]></content>
  </entry>
  
</feed>
