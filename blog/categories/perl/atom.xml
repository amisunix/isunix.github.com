<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-09-06T21:49:45+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Perl Debug Tut]]></title>
    <link href="http://isunix.github.io/blog/2014/09/06/perl-debug-tut/"/>
    <updated>2014-09-06T21:48:04+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/06/perl-debug-tut</id>
    <content type="html"><![CDATA[<p>Use the following way to see the detailed info of perl debugger info.  </p>

<p><code>pl
perldoc perldebguts
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Perl Learning Notes]]></title>
    <link href="http://isunix.github.io/blog/2014/09/06/mastering-perl-learning-notes/"/>
    <updated>2014-09-06T18:03:53+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/06/mastering-perl-learning-notes</id>
    <content type="html"><![CDATA[<p>This is for the book “mastering perl”. There are some code snippets in this book which I think is quite useful, thus I keep a note of them below.  </p>

<p>1.global matching:  </p>

<p><code>pl
$_ = "Just another Perl hacker,";
my @words = /(\S+)/g; # "Just" "another" "Perl" "hacker,"
print join("",split(@words));
</code>  </p>

<p>2.my $word_count = () = /(\S+)/g; <br />
It will give out the number of matched items.</p>

<p>3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun Perl Code Snippets]]></title>
    <link href="http://isunix.github.io/blog/2014/09/06/fun-perl-code-snippets/"/>
    <updated>2014-09-06T10:02:29+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/06/fun-perl-code-snippets</id>
    <content type="html"><![CDATA[<p>I collect some useful code snippets here for later usage or just keep a note of what I have read.  </p>

<p>1.find files larger than a specifed size(in byte):   </p>

<p><code>pl
use File::Find;
find(sub { print "$_\n" if -s $_ &gt; $ARGV[0]; }, ".");
</code><br />
2.we can use “man module::name” or “perldoc module::name” to check the detailed info of a module.   </p>

<p>3.For the first example, if using require, we can write it as the following:  </p>

<p><code>pl
require File::Find;
File::Find::find(sub { print "$File::Find::name\n" if -s &gt; 1_024_000; }, '.');
</code>  </p>

<p>4.”use” happens during compile time, whereas “require” happens at runtime.    </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Perlrun]]></title>
    <link href="http://isunix.github.io/blog/2014/09/05/notes-on-perlrun/"/>
    <updated>2014-09-05T19:24:02+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/05/notes-on-perlrun</id>
    <content type="html"><![CDATA[<p>We keep notes on some of the useful notes on perl command line knowledge here.  </p>

<p>1.-i[extension]:  </p>

<p>specifies that files processed by the “&lt;&gt;” construct are to be edited in-place.  It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for print() statements.   </p>

<p>2.-p:
causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like sed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Perl Man Page]]></title>
    <link href="http://isunix.github.io/blog/2014/09/05/useful-perl-man-page/"/>
    <updated>2014-09-05T18:14:03+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/05/useful-perl-man-page</id>
    <content type="html"><![CDATA[<p>We can check them like “perl perlre”. These useful perl manuals are:</p>

<p>```pl
perlre</p>

<p>perlobj</p>

<p>perlootut</p>

<p>perlmodlib  </p>

<p>perlintro  </p>

<p>perlsyn   </p>

<p>perlop  </p>

<p>perlsub  </p>

<p>perlrequick  </p>

<p>perlretut  </p>

<p>perlfunc  </p>

<p>perlref  </p>

<p>perlreftut</p>

<p>perldsc   </p>

<p>perllol  </p>

<p>perlrun</p>

<p>perldebug  </p>

<p>perlnewmod    </p>

<p>perlfaq3</p>

<p>```  </p>

<p>And below are some modules we may find useful:  </p>

<p>```pl
Moose::Manual  </p>

<p>Mouse</p>

<p>Mouse::Tiny</p>

<p>Class::Accessor </p>

<p>Role::Tiny</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
