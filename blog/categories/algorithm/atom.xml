<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2015-12-17T11:01:17+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reverse a Linked List in Place]]></title>
    <link href="http://isunix.github.io/blog/2015/09/15/reverse-a-linked-list-in-place/"/>
    <updated>2015-09-15T09:33:40+08:00</updated>
    <id>http://isunix.github.io/blog/2015/09/15/reverse-a-linked-list-in-place</id>
    <content type="html"><![CDATA[<p>We will show how to reverse a linked list in place using both python and javascript(actually converted from coffeescript).</p>

<p>1.python version:</p>

<p>```py
class ListNode:
    def <strong>init</strong>(self, x):
        self.val = x
        self.next = None</p>

<p>def reverse(head):
    p = head
    start = None
    while p:
        next_one = p.next
        p.next = start
        start = p
        p = next_one</p>

<pre><code>return start
</code></pre>

<p>head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)</p>

<p>result = reverse(head)
while result:
    print result.val
    result = result.next
```</p>

<p>2.javascript version:</p>

<p>```js
// Generated by CoffeeScript 1.9.3
var ListNode, head, result, reverse_linkedList;</p>

<p>ListNode = (function() {
  function ListNode(val) {
    this.val = val;
    this.next = null;
  }</p>

<p>return ListNode;</p>

<p>})();</p>

<p>reverse_linkedList = function(head) {
  var next_one, p, start;
  p = head;
  start = null;
  while (p) {
    next_one = p.next;
    p.next = start;
    start = p;
    p = next_one;
  }
  return start;
};</p>

<p>head = new ListNode(1);</p>

<p>head.next = new ListNode(2);</p>

<p>head.next.next = new ListNode(3);</p>

<p>result = reverse_linkedList(head);</p>

<p>while (result) {
  console.log(result.val);
  result = result.next;
}
```</p>

<p>3.to reverse a linked from position m to n:</p>

<p>```py
class ListNode(object):
    def <strong>init</strong>(self, x):
        self.val = x
        self.next = None</p>

<p>class Solution(object):
    def reverseBetween(self, head, m, n):
        dummyNode = ListNode(0)
        p = dummyNode
        q = head</p>

<pre><code>    for x in range(m-1):
        p.next = q
        q = q.next
        p = p.next

    start = None
    end = q
    next_one = None

    for x in range(m, n+1):
        next_one = q.next
        q.next = start
        start = q
        q = next_one


    p.next = start
    end.next = next_one
    return dummyNode.next
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    solution = Solution()</p>

<pre><code>head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

m, n = 2, 4

result = solution.reverseBetween(head, m, n)
while result:
    print result.val
    result = result.next ```
</code></pre>

<p>4.we will also show another ways to reverse a linked list, first the cursive way:</p>

<p>```py
class ListNode:
    def <strong>init</strong>(self, x):
        self.val = x
        self.next = None</p>

<p>def reverse(head):
    if head == None or head.next == None:
        return head</p>

<pre><code>second = head.next
head.next = None
result = reverse(second)
second.next = head

return result
</code></pre>

<p>head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)</p>

<p>result = reverse(head)
while result:
    print result.val
    result = result.next
```</p>

<p>```js
// Generated by CoffeeScript 1.9.3
var ListNode, head, result, reverse_linkedList;</p>

<p>ListNode = (function() {
  function ListNode(val) {
    this.val = val;
    this.next = null;
  }</p>

<p>return ListNode;</p>

<p>})();</p>

<p>reverse_linkedList = function(head) {
  var result, second;
  if (head === null || head.next === null) {
    return head;
  }
  second = head.next;
  head.next = null;
  result = reverse_linkedList(second);
  second.next = head;
  return result;
};</p>

<p>head = new ListNode(1);</p>

<p>head.next = new ListNode(2);</p>

<p>head.next.next = new ListNode(3);</p>

<p>result = reverse_linkedList(head);</p>

<p>while (result) {
  console.log(result.val);
  result = result.next;
}
```</p>
]]></content>
  </entry>
  
</feed>
