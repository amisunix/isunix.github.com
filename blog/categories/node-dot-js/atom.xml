<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-08-08T16:13:06+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Callback Function in node.js]]></title>
    <link href="http://isunix.github.io/blog/2014/08/08/callback-function-in-node-dot-js/"/>
    <updated>2014-08-08T16:03:41+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/08/callback-function-in-node-dot-js</id>
    <content type="html"><![CDATA[<p>Asynchronous IO is Node.js is very hard to understand. Here is one example from the book “Node.js开发指南”.  </p>

<p>```js </p>

<p>function readFileCallBack(err, data) {
  if (err) {
    console.error(err);
  } else {
    console.log(data);
  }
}</p>

<p>var fs = require(‘fs’);
fs.readFile(‘file.txt’, ‘utf-8’, readFileCallBack);
console.log(‘end.’);  </p>

<p>```  </p>

<p>When fs.readFile is called, is just sents the asynchronous I/O to the operating system, then it comes to back and executes the statements following it. After that, it enter into the event loop to listen on the event. When fs accepts the event finished by the I/O request, the event loop will call the callback function to finish the following work.  </p>

<p>Thus in this case, we will see the “end.” first and then the contents of the file.txt.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node Express Upgrade With Modules Deprecated]]></title>
    <link href="http://isunix.github.io/blog/2014/08/08/node-express-upgrade-with-modules-deprecated/"/>
    <updated>2014-08-08T15:17:47+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/08/node-express-upgrade-with-modules-deprecated</id>
    <content type="html"><![CDATA[<p>The “express” web application framework for node updates termly. Thus some of the apis may not be usable after a while. Here below are some of the apis deprecated between version2.5.2 and version4.8.2.   </p>

<p>```js</p>

<p><code>express.createServer()</code> - it has been deprecated for a long time. Use <code>express()</code> </p>

<p>deprecate <code>connect.createServer()</code> – use <code>connect()</code> instead</p>

<p>deprecate <code>.createServer()</code> &amp; remove old stale examples</p>

<p>Added <code>express.createServer()</code> for BC</p>

<p>Fixed for middleware stacked via <code>createServer()</code></p>

<p>previously the <code>foo</code> middleware passed to <code>createServer(foo)</code> </p>

<p>express.bodyParser() will have to be installed separately.</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
