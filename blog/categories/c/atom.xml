<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2014-09-10T16:07:23+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[程序的输入输出]]></title>
    <link href="http://isunix.github.io/blog/2014/08/31/cheng-xu-de-shu-ru-shu-chu/"/>
    <updated>2014-08-31T10:45:18+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/31/cheng-xu-de-shu-ru-shu-chu</id>
    <content type="html"><![CDATA[<p>介绍三种程序的输入输出方法。   </p>

<p>```c
#include <stdlib.h>
#include <stdio.h>
#define INF 100000</stdio.h></stdlib.h></p>

<p>int main(){</p>

<p>int x, n=0, min=INF, max=-INF, s=0;
  while(scanf(“%d”, &amp;x) == 1){
    s += x;
    if (x &lt; min) min=x;
    if (x &gt; max) max=x;
    n++;
  }
  printf(“%d %d %.3f\n”, min, max, (double)s/n);
  return 0;
}
```    </p>

<p>```c
#define LOCAL
#include <stdlib.h>
#include <stdio.h>
#define INF 10000000</stdio.h></stdlib.h></p>

<p>int main(){
  #ifdef LOCAL
    freopen(“data.in”, “r”, stdin);
    freopen(“data.out”, “w”, stdout);
  #endif</p>

<p>int x, n=0, min=INF, max=-INF, s=0;
  while(scanf(“%d”, &amp;x) == 1){
    s += x;
    if (x &lt; min) min=x;
    if (x &gt; max) max=x;
    n++;
  }
  printf(“%d %d %.3f\n”, min, max, (double)s/n);
  return 0;
}
```   </p>

<p>```c
#include <stdlib.h>
#include <stdio.h>
#define INF 10000000</stdio.h></stdlib.h></p>

<p>int main(){
  FILE *fin, *fout;
  fin = fopen(“data.in”, “rb”);
  fout = fopen(“data.out”, “wb”);</p>

<p>int x, n=0, min=INF, max=-INF, s=0;
  while(fscanf(fin, “%d”, &amp;x) == 1){
    s += x;
    if (x &lt; min) min=x;
    if (x &gt; max) max=x;
    n++;
  }</p>

<p>fprintf(fout, “%d %d %.3f\n”, min, max, (double)s/n);
  fclose(fin);
  fclose(fout);
  return 0;
}
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Tail Recursion Using C]]></title>
    <link href="http://isunix.github.io/blog/2014/07/18/notes-on-tail-recursion-using-c/"/>
    <updated>2014-07-18T13:50:41+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/18/notes-on-tail-recursion-using-c</id>
    <content type="html"><![CDATA[<p>还是先上一段递归的c代码吧:  </p>

<p>```c
#include <stdlib.h>
#include <stdio.h /></stdlib.h></p>

<p>int FibonacciRecursive(int n){
  if(n &lt; 2){
    return n;
  }
  return (FibonacciRecursive(n-1) + FibonacciRecursive(n-2));
}</p>

<p>int main(){
  printf(“Fibonacci number till 6 is: %d\n”, FibonacciRecursive(6));
}</p>

<p>```    </p>

<p>而所谓的尾递归就是把当前的运算结果（或路径）放在参数里传给下层函数, 采用尾递归的算法示例如下:   </p>

<p>```c</p>

<p>int FibonacciTailRecursive(int n, int ret1, int ret2){
  if(n==0){
    return ret1;
  }
  return FibonacciTailRecursive(n-1, ret2, ret1 + ret2);
}</p>

<p>```   </p>

<p>一下是一个在别人的博客中看到的利用递归还有尾递归来求单链表的长度的例子。 </p>

<p>```c
#include <stdlib.h>
#include <stdio.h /></stdlib.h></p>

<p>typedef struct node{
  int data;
  struct node* next;
}node, *linklist;</p>

<p>void InitLinklist(linklist* head){
  if(<em>head != NULL){
    free(</em>head);
  }
  <em>head = (node</em>)malloc(sizeof(node));
  (*head)-&gt;next = NULL;
}</p>

<p>void InsertNode(linklist* head, int d){
  node* newNode = (node<em>)malloc(sizeof(node));
  newNode-&gt;data = d;
  newNode-&gt;next = (</em>head)-&gt;next;
  (*head)-&gt;next = newNode;
}</p>

<p>//using recursion to get the length of the linklist;
int GetLengthRecursive(linklist head){
  if(head-&gt;next == NULL){
    return 0;
  }
  return (GetLengthRecursive(head-&gt;next) + 1);
}</p>

<p>//using tail recursive to get the length of a linklist,
//with the help of the variable “acc” to store the length of the current linklist, increment it</p>

<p>int GetLengthTailRecursive(linklist head, int *acc){
  if(head-&gt;next == NULL){
    return *acc;
  }
  *acc = *acc + 1;
  return GetLengthTailRecursive(head-&gt;next, acc);
}</p>

<p>void PrintLinklist(linklist head){
  node* pnode = head-&gt;next;
  while(pnode){
    printf(“%d-&gt;”, pnode-&gt;data);
    pnode = pnode-&gt;next;
  }
  printf(“-&gt;NULL\n”);
}</p>

<p>int main(){
  linklist head = NULL;
  int len = 0;
  InitLinklist(&amp;head);
  InsertNode(&amp;head, 10);
  InsertNode(&amp;head, 21);
  InsertNode(&amp;head, 14);
  InsertNode(&amp;head, 19);
  InsertNode(&amp;head, 132);
  InsertNode(&amp;head, 192);
  PrintLinklist(head);
  printf(“The length of linklist is: %d\n”, GetLengthRecursive(head));
  GetLengthTailRecursive(head, &amp;len);
  printf(“the length of linklist is: %d\n”, len);
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swap Two Values Without Introducing a Temporary Variable]]></title>
    <link href="http://isunix.github.io/blog/2014/07/15/swqp-two-values-without-introducing-a-temporary-variable/"/>
    <updated>2014-07-15T13:29:26+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/15/swqp-two-values-without-introducing-a-temporary-variable</id>
    <content type="html"><![CDATA[<p>The usual way for us to swap two values in c is by introducing a intermediate variable. But actually there is way for us to complete the task wnile not adding a new varible.   </p>

<p>```c</p>

<h1 id="include-stdlibh">include <stdlib.h /></h1>
<p>#include <stdio.h /></p>

<p>int main(){
  int a, b;
  scanf(“%d %d”, &amp;a, &amp;b);
  a = b - a;
  b = b - a;
  a = b + a;</p>

<p>printf(“%d %d\n”, a, b);
  return 0;
}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
