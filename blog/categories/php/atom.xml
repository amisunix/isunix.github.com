<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2016-08-04T16:10:29+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Include and Require in PHP]]></title>
    <link href="http://isunix.github.io/blog/2014/11/18/include-and-require-in-php/"/>
    <updated>2014-11-18T13:42:05+08:00</updated>
    <id>http://isunix.github.io/blog/2014/11/18/include-and-require-in-php</id>
    <content type="html"><![CDATA[<p>For a person who has experience in programming PHP, he should have heard the concept of “include”, “include_once”, “require”, “require_once”. We will give a little deailed info here.</p>

<p>1.include_once</p>

<p>```
The include_once statement includes and evaluates the specified file during the execution of the script. This is a behavior similar to the include statement, with the only difference being that if the code from a file has already been included, it will not be included again. As the name suggests, it will be included just once.</p>

<p>include_once may be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, so in this case it may help avoid problems such as function redefinitions, variable value reassignments, etc.
```  </p>

<p>2.require and include</p>

<p>```
the differences between require and include are:  </p>

<p>当要包含的文件不存在时,include产生一个警告(Warning)该语句后面的程序会继续执行；而require则导致一个致命错误（Fatal error),程序就此终止。</p>

<p>include_once和require_once
应该用于在脚本执行期间同一个文件有可能被包含超过一次的情况下, 想确保它只被包含一次以避免函数重定义, 变量重新赋值等问题.</p>

<p>*.incluce在用到时加载，这个函式一般是放在流程控制的处理区段中
*.require在一开始就加载，这个函式通常放在PHP程式的最前面
*._once后缀表示已加载的不加载
```  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pro PHP and Jquery Chap03: Object Oriented Programming]]></title>
    <link href="http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming/"/>
    <updated>2014-10-30T14:03:48+08:00</updated>
    <id>http://isunix.github.io/blog/2014/10/30/pro-php-and-jquery-chap03-object-oriented-programming</id>
    <content type="html"><![CDATA[<p>I have written some code in PHP, but I almost never use the object oriented way. Here below is some excerpts from the book “Pro PHP and Jquery”.  </p>

<p>1.How to build a class and instantiate it.   </p>

<p><code>php
&lt;?php
  class MyClass{
    //class properties and methods go here
  }
  $obj = new MyClass;
  var_dump($obj);
?&gt;
</code>  </p>

<p>It gives out something like </p>

<p><code>php
object(MyClass)#1 (0) { }
</code></p>

<p>2.The following code shows how to set and read out a class property.  </p>

<p>```php
&lt;?php
  class MyClass{
    //class properties and methods go here
    public $prop1 = “I’m a class property!”;
  }</p>

<p>$obj = new MyClass;
  echo $obj-&gt;prop1;
?&gt;
```   </p>

<p>3.THe following code shows how to define methods in php. Methods are class-specific functions:  </p>

<p>```php
&lt;?php
class MyClass {
  public $prop1 = “I’m a class property!”;
  public function setProperty($newval){
    $this-&gt;prop1 = $newval;
  }</p>

<p>public function getProperty(){
    return $this-&gt;prop1 . “<br />”;
  }
}</p>

<p>$obj = new MyClass;
echo $obj-&gt;prop1;</p>

<p>?&gt;
```</p>

<p>4.Use of contructor methods:</p>

<p>```php
&lt;?php
class MyClass
{
  public $prop1 = “I’m a class property!”;</p>

<p>public function <strong>construct()
  {
    echo ‘The class “’, __CLASS</strong>, ‘” was initiated!<br />’;
  }</p>

<p>public function setProperty($newval)
  {
    $this-&gt;prop1 = $newval;
  }</p>

<p>public function getProperty()
  {
    return $this-&gt;prop1 . “<br />”;
  }
}</p>

<p>// Create a new object
$obj = new MyClass;
// Get the value of $prop1
echo $obj-&gt;getProperty();
// Output a message at the end of the file
echo “End of file.<br />”;
?&gt;
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Using Curl]]></title>
    <link href="http://isunix.github.io/blog/2014/09/26/notes-on-using-curl/"/>
    <updated>2014-09-26T18:03:17+08:00</updated>
    <id>http://isunix.github.io/blog/2014/09/26/notes-on-using-curl</id>
    <content type="html"><![CDATA[<p>This post gives a little detailed info on how to use curl. Of course we can use “man curl” to get the listed info, what makes this post different is, we will give more examples as to how to use curl.   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways to Include a Jquery File]]></title>
    <link href="http://isunix.github.io/blog/2014/08/01/ways-to-include-a-jquery-file/"/>
    <updated>2014-08-01T15:03:11+08:00</updated>
    <id>http://isunix.github.io/blog/2014/08/01/ways-to-include-a-jquery-file</id>
    <content type="html"><![CDATA[<p>The following are several addtional ways to include a jquery file in your php script.  </p>

<p><code>js
&lt;script type="text/javascript" src="js/jquery-1.11.1.min.js"&gt;&lt;/script&gt;
</code><br />
or  </p>

<p><code>js
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;
&lt;/script&gt;
</code> <br />
or  </p>

<p>```js
<script type="text/javascript" src="http://www.google.com/jsapi"> </script></p>

<script type="text/javascript">
	google.load("jquery", "1.7.1");
</script>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Split Mids to Several Lines With Fixed Number Per Line]]></title>
    <link href="http://isunix.github.io/blog/2014/07/17/split-mids-to-several-lines-with-fixed-number-per-line/"/>
    <updated>2014-07-17T10:26:09+08:00</updated>
    <id>http://isunix.github.io/blog/2014/07/17/split-mids-to-several-lines-with-fixed-number-per-line</id>
    <content type="html"><![CDATA[<p>We have many mids with one mid every line, now we want to print all those mids out with a fixed number of mids per line. I want to realize this function in Perl first without success, so I am using PHP. </p>

<p>```php </p>

<?php

$scriptname = $argv[0];
$txt_file = $argv[1];
$dir = ".";

$contents = file_get_contents("$dir/$txt_file", FILE_USE_INCLUDE_PATH);
$contents = trim($contents);

$mid_splited = preg_split("/\n/", $contents);

$count_mids = count($mid_splited);

for ($i = 0; $i < $count_mids; $i++){
  print "$mid_splited[$i] ";
  if ($i % 7 == 0){
    print "\n";
  }
}


?>

<p>```　</p>
]]></content>
  </entry>
  
</feed>
